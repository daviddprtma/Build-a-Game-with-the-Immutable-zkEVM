/* eslint-disable import/no-extraneous-dependencies */
import { afterEach, describe, expect, it, jest } from '@jest/globals';
import {
  fireEvent,
  render,
  screen as rtlScreen,
  waitFor,
} from '@testing-library/react';

import { createAnalytics, StandardAnalyticsActions } from './createAnalytics';
import { getCookies } from './utils';

const DUMMY_WRITE_KEY = '1234';

const buildMockBrowser = () => ({
  page: jest.fn(),
  track: jest.fn(),
  identify: jest.fn(),
});

const buildLoader = () => {
  const browser = buildMockBrowser();
  const loader = {
    load: jest.fn().mockReturnValue(browser),
  };
  return { loader, browser };
};

function buildAppAndProvider({ writeKey }: { writeKey?: string } = {}) {
  const { AnalyticsProvider, useAnalytics } = createAnalytics({
    writeKey,
    appName: 'test',
  });

  function DemoApp({
    userJourney = '',
    screen = '',
    control = '',
    controlType = '',
    action,
    extras = {},
    errorStub,
  }: {
    userJourney?: string;
    screen?: string;
    control?: string;
    controlType?: string;
    action?: string;
    extras?: Record<string, unknown>;
    errorStub?: any;
  }) {
    const { page, track, identifyFromCookie, updateWriteKey } = useAnalytics();
    return (
      <div>
        <button
          data-testid="page"
          onClick={() =>
            page({
              userJourney,
              screen,
              action: action as StandardAnalyticsActions,
              extras,
            })
          }
        >
          page
        </button>
        <button
          data-testid="track"
          onClick={() =>
            track({
              userJourney,
              screen,
              control,
              controlType,
              action: action as StandardAnalyticsActions,
              extras,
            })
          }
        >
          track
        </button>
        <button
          data-testid="identifyFromCookie"
          onClick={async () => {
            try {
              await identifyFromCookie();
            } catch (err) {
              errorStub?.(err);
            }
          }}
        >
          identifyFromCookie
        </button>
        <button
          data-testid="updateWriteKey"
          onClick={() => {
            updateWriteKey('7890');
          }}
        >
          updateWriteKey
        </button>
      </div>
    );
  }

  return { AnalyticsProvider, DemoApp, ...buildLoader() };
}

const DUMMY_COOKIE_USERID = '0x12345';
jest.mock('./utils', () => ({
  ...(jest.requireActual('./utils') as any),
  getCookies: jest.fn(() => 'moo=1234;'),
}));

describe('createAnalytics()', () => {
  it('should load the segment analytics browser client', () => {
    const { AnalyticsProvider, DemoApp, loader } = buildAppAndProvider({
      writeKey: DUMMY_WRITE_KEY,
    });
    render(
      <AnalyticsProvider loaderOverride={loader as any}>
        <DemoApp />
      </AnalyticsProvider>,
    );
    expect(loader.load).toHaveBeenCalledWith({
      writeKey: DUMMY_WRITE_KEY,
    });
  });

  it('should load the segment analytics browser client with updated segment-write-key', () => {
    const { AnalyticsProvider, DemoApp, loader } = buildAppAndProvider({
      writeKey: DUMMY_WRITE_KEY,
    });
    render(
      <AnalyticsProvider loaderOverride={loader as any}>
        <DemoApp />
      </AnalyticsProvider>,
    );
    fireEvent.click(rtlScreen.getByTestId('updateWriteKey'));
    expect(loader.load).toHaveBeenCalledWith({
      writeKey: '7890',
    });
  });

  describe('AnalyticsProvider.page()', () => {
    it('should call analytics.page with the right (capitalised) params', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp userJourney="JEST_Test" screen="moo" action="viewed" />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('page'));
      expect(browser.page).toHaveBeenCalledWith('testJEST_TestMooViewed', {});
    });

    it('should allow arbitrary props to be mixed into analytics.page call', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp
            userJourney="JEST_Test"
            screen="moo"
            action="someAction"
            extras={{ moo: 'cow' }}
          />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('page'));
      expect(browser.page).toHaveBeenCalledWith(expect.stringMatching(/.+/), {
        moo: 'cow',
      });
    });
  });

  describe('AnalyticsProvider.track()', () => {
    it('should call analytics.track with the right (capitalised) params', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp
            userJourney="JEST_Test"
            screen="moo"
            control="something"
            controlType="button"
            action="pressed"
          />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('track'));
      expect(browser.track).toHaveBeenCalledWith(
        'testJEST_TestMoo_SomethingButtonPressed',
        {},
      );
    });

    it('should allow to skip control and controlType params', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp userJourney="JEST_Test" screen="moo" action="succeeded" />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('track'));
      expect(browser.track).toHaveBeenCalledWith(
        'testJEST_TestMoo_Succeeded',
        {},
      );
    });

    it('should allow to skip action param when control and controlType params are provided', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp
            userJourney="JEST_Test"
            screen="moo"
            control="something"
            controlType="button"
          />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('track'));
      expect(browser.track).toHaveBeenCalledWith(
        'testJEST_TestMoo_SomethingButton',
        {},
      );
    });

    it('should allow arbitrary props to be mixed into analytics.track call', () => {
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp
            userJourney="JEST_Test"
            screen="moo"
            action="someAction"
            extras={{ moo: 'cow', userId: '1234' }}
          />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('track'));
      expect(browser.track).toHaveBeenCalledWith(expect.stringMatching(/.+/), {
        userId: '1234',
        moo: 'cow',
      });
    });
  });

  describe('identifyFromCookie()', () => {
    afterEach(() => {
      jest.clearAllMocks();
    });

    it('should correctly call analytics.identify, with the user ID from a cookie', () => {
      (getCookies as jest.Mock).mockImplementation(
        () => `moo=1234; ajs_user_id=${DUMMY_COOKIE_USERID}`,
      );
      const { AnalyticsProvider, DemoApp, loader, browser } =
        buildAppAndProvider({
          writeKey: DUMMY_WRITE_KEY,
        });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp />
        </AnalyticsProvider>,
      );
      fireEvent.click(rtlScreen.getByTestId('identifyFromCookie'));
      expect(browser.identify).toHaveBeenCalledWith(DUMMY_COOKIE_USERID);
    });

    it('should throw when there is no user id inside a cookie', () => {
      (getCookies as jest.Mock).mockImplementation(() => `moo=1234;`);
      const errorStub = jest.fn();
      const { AnalyticsProvider, DemoApp, loader } = buildAppAndProvider({
        writeKey: DUMMY_WRITE_KEY,
      });
      render(
        <AnalyticsProvider loaderOverride={loader as any}>
          <DemoApp errorStub={errorStub} />
        </AnalyticsProvider>,
      );
      expect(errorStub).not.toHaveBeenCalled();
      fireEvent.click(rtlScreen.getByTestId('identifyFromCookie'));
      waitFor(() => {
        expect(errorStub).toHaveBeenCalledWith(
          Error('No user ID found in cookie'),
        );
      });
    });
  });

  describe('when no writeKey is provided', () => {
    it('console logs the events instead of sending them', async () => {
      const { AnalyticsProvider, DemoApp } = buildAppAndProvider();
      const log = jest.fn();

      render(
        <AnalyticsProvider log={log}>
          <DemoApp
            userJourney="JEST_Test"
            screen="moo"
            action="viewed"
            extras={{ moo: 'cow', userId: '1234' }}
          />
        </AnalyticsProvider>,
      );

      fireEvent.click(rtlScreen.getByTestId('page'));

      await waitFor(() =>
        expect(log).toHaveBeenCalledWith({
          '0': null,
          '1': 'testJEST_TestMooViewed',
          '2': {
            moo: 'cow',
            name: 'testJEST_TestMooViewed',
            path: '/',
            referrer: '',
            search: '',
            title: '',
            url: 'http://localhost/',
            userId: '1234',
          },
          '3': undefined,
          method: 'page',
        }),
      );
    });
  });
});
