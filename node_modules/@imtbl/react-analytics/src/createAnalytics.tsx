import { AnalyticsBrowser, Context } from '@segment/analytics-next';
import { AnalyticsBuffered } from '@segment/analytics-next/dist/types/core/buffer';
import {
  createContext,
  PropsWithChildren,
  useCallback,
  useContext,
  useMemo,
  useState,
} from 'react';

import { capitalize, getCookies } from './utils';

export type StandardAnalyticsActions =
  | 'Viewed'
  | 'Opened'
  | 'Pressed'
  | 'Started'
  | 'Succeeded'
  | 'Failed'
  | 'Impression'
  | 'Request';

export type StandardAnalyticsControlTypes =
  | 'Button'
  | 'Link'
  | 'ButtCon'
  | 'StatefulButtCon'
  | 'TextInput'
  | 'TextArea'
  | 'Select'
  | 'Checkbox'
  | 'Radio'
  | 'Toggle'
  | 'MenuItem'
  | 'InputBar'
  | 'BaseClickable';

function loadStubBrowser(
  loader: typeof AnalyticsBrowser,
  log: typeof console.log,
) {
  const browser = loader.load(
    { writeKey: '', cdnSettings: { integrations: {} } }, // cdnSettings prevents settings API call
    { integrations: { All: false } }, // don't send events
  );
  ['identify', 'group', 'alias', 'page', 'track'].forEach(method => {
    browser.on(method, (...props) => log({ method, ...props }));
  });
  return browser;
}

/**
 * The `createAnalytics` function is a TypeScript React function that creates an analytics provider and
 * hook for tracking user actions and events in a web application.
 * https://immutable.atlassian.net/wiki/spaces/DAG/pages/2119436426/Naming+Events+Immutable+s+Telemetry+Taxonomy#Track-Events
 * @param `UserJourney`: the specific user journey this telemetry relates to, such as Sign In or Purchase.
 * @param `Screen`: the web page or app screen a user is seeing, such as Sign In with Email or Permissions.
 * @param `Control`: how a user is interacting with the user interface, usually by clicking a button or inputting text. This can also include client side events such as database updates, API calls, or background tasks.
 * @param `ControlType`: how a user is interfacing with a control element, such as inputting text or selecting from a dropdown list.
 * @param `Action`: An optional string representing the action a user is taking, such as "Succeeded" or "Failed".
 * @returns The `createAnalytics` function returns an object with two properties: `AnalyticsProvider`
 * and `useAnalytics`.
 */
export function createAnalytics<
  UserJourney extends string,
  Screen extends string,
  Control extends string,
  ControlType extends string,
  Action extends string = StandardAnalyticsActions,
>({ appName, writeKey }: { appName: string; writeKey?: string }) {
  type ControlAndAction =
    | { action: Action; control?: never; controlType?: never }
    | { control: Control; controlType: ControlType; action?: Action };

  type TrackProps = {
    screen: Screen;
    userJourney: UserJourney;
    extras?: Record<string, unknown>;
  } & ControlAndAction;

  type PageProps = {
    screen: Screen;
    userJourney: UserJourney;
    action?: Action;
    extras?: Record<string, unknown>;
  };

  type UseAnalyticsReturnType = {
    page: (props: PageProps) => Promise<Context>;
    track: (props: TrackProps) => Promise<Context>;
    identify: AnalyticsBuffered['identify'];
    group: AnalyticsBuffered['group'];
    alias: AnalyticsBuffered['alias'];
    identifyFromCookie: () => Promise<Context>;
    updateWriteKey: (writeKey: string) => void;
  };
  const AnalyticsContext = createContext<UseAnalyticsReturnType>(undefined!);

  /**
   * The `AnalyticsProvider` function is a React component that provides analytics tracking
   * functionality to its child components.
   * @param - `children`: The child components that will be wrapped by the `AnalyticsProvider`
   * component.
   * @returns The `AnalyticsProvider` component is returning the `children` prop wrapped in an
   * `AnalyticsContext.Provider` component. The `AnalyticsContext.Provider` component is providing a
   * value to the context, which includes the `page`, `track`, `identifyFromCookie`, `identify`, `updateWriteKey`,
   * `group`, and `alias` functions.
   */
  function AnalyticsProvider({
    children,
    loaderOverride: browser = AnalyticsBrowser,
    // eslint-disable-next-line no-console
    log = console.log,
  }: PropsWithChildren<{
    loaderOverride?: typeof AnalyticsBrowser;
    log?: typeof console.log;
  }>) {
    const [writeKeyInState, setWriteKeyInState] = useState(writeKey);
    const analytics = useMemo(
      () =>
        writeKeyInState
          ? browser.load({ writeKey: writeKeyInState })
          : loadStubBrowser(browser, log),
      [browser, writeKeyInState, log],
    );

    /* The `page` function is a function that is used to track page views in the application.
    It takes in an object `PageProps` as its parameter, which contains properties such as
    `userJourney`, `screen`, and additional properties. */
    const page = useCallback(
      ({ userJourney, screen, action, extras = {} }: PageProps) => {
        const eventName = [
          appName +
            capitalize(userJourney) +
            capitalize(screen) +
            capitalize(action),
        ].join('');
        return analytics.page(eventName, extras);
      },
      [analytics],
    );

    /* The `track` function is a function that is used to track user actions and events in the
    application. It takes in an object `TrackProps` as its parameter, which contains properties such
    as `userJourney`, `screen`, `action`, `control`, `controlType`, and additional properties. */
    const track = useCallback(
      ({
        userJourney,
        screen,
        action,
        extras = {},
        ...optionalProps
      }: TrackProps) => {
        let controlAndType: string = '';
        if ('control' in optionalProps && 'controlType' in optionalProps) {
          controlAndType =
            capitalize(optionalProps.control) +
            capitalize(optionalProps.controlType);
        }

        const eventName = [
          appName + capitalize(userJourney) + capitalize(screen),
          controlAndType + capitalize(action),
        ].join('_');

        return analytics.track(eventName, {
          ...extras,
        });
      },
      [analytics],
    );

    /* The `identifyFromCookie` function is a function that is used to identify the user based
    on the user ID stored in a cookie. */
    const identifyFromCookie = useCallback(async () => {
      const userIdCookie = getCookies()
        .split('; ')
        .find(row => row.startsWith('ajs_user_id='));
      if (userIdCookie) {
        const userId = userIdCookie.split('=')[1];
        return analytics.identify(userId);
      }
      return Promise.reject(new Error('No user ID found in cookie'));
    }, [analytics]);

    const memoizedContextValue = useMemo(
      () => ({
        page,
        track,
        identifyFromCookie,
        identify: analytics.identify,
        group: analytics.group,
        alias: analytics.alias,
        updateWriteKey: setWriteKeyInState,
      }),
      [analytics, page, track, identifyFromCookie],
    );

    return (
      <AnalyticsContext.Provider value={memoizedContextValue}>
        {children}
      </AnalyticsContext.Provider>
    );
  }

  /**
   * The function "useAnalytics" returns the analytics store from the context, or throws an error if
   * the store is not found.
   * @returns the value of the `store` variable, which is of type `UseAnalyticsReturnType`.
   */
  function useAnalytics(): UseAnalyticsReturnType {
    const store = useContext(AnalyticsContext);
    if (!store) {
      throw new Error('useAnalytics: Store not found');
    }

    return store;
  }

  return { AnalyticsProvider, useAnalytics };
}
