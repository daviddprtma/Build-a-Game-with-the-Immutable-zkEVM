import * as _emotion_react_jsx_runtime from '@emotion/react/jsx-runtime';
import { AnalyticsBrowser, Context } from '@segment/analytics-next';
import { AnalyticsBuffered } from '@segment/analytics-next/dist/types/core/buffer';
import { PropsWithChildren } from 'react';

type StandardAnalyticsActions = 'Viewed' | 'Opened' | 'Pressed' | 'Started' | 'Succeeded' | 'Failed' | 'Impression' | 'Request';
type StandardAnalyticsControlTypes = 'Button' | 'Link' | 'ButtCon' | 'StatefulButtCon' | 'TextInput' | 'TextArea' | 'Select' | 'Checkbox' | 'Radio' | 'Toggle' | 'MenuItem' | 'InputBar' | 'BaseClickable';
/**
 * The `createAnalytics` function is a TypeScript React function that creates an analytics provider and
 * hook for tracking user actions and events in a web application.
 * https://immutable.atlassian.net/wiki/spaces/DAG/pages/2119436426/Naming+Events+Immutable+s+Telemetry+Taxonomy#Track-Events
 * @param `UserJourney`: the specific user journey this telemetry relates to, such as Sign In or Purchase.
 * @param `Screen`: the web page or app screen a user is seeing, such as Sign In with Email or Permissions.
 * @param `Control`: how a user is interacting with the user interface, usually by clicking a button or inputting text. This can also include client side events such as database updates, API calls, or background tasks.
 * @param `ControlType`: how a user is interfacing with a control element, such as inputting text or selecting from a dropdown list.
 * @param `Action`: An optional string representing the action a user is taking, such as "Succeeded" or "Failed".
 * @returns The `createAnalytics` function returns an object with two properties: `AnalyticsProvider`
 * and `useAnalytics`.
 */
declare function createAnalytics<UserJourney extends string, Screen extends string, Control extends string, ControlType extends string, Action extends string = StandardAnalyticsActions>({ appName, writeKey }: {
    appName: string;
    writeKey?: string;
}): {
    AnalyticsProvider: ({ children, loaderOverride: browser, log, }: PropsWithChildren<{
        loaderOverride?: typeof AnalyticsBrowser | undefined;
        log?: {
            (...data: any[]): void;
            (message?: any, ...optionalParams: any[]): void;
        } | undefined;
    }>) => _emotion_react_jsx_runtime.JSX.Element;
    useAnalytics: () => {
        page: (props: {
            screen: Screen;
            userJourney: UserJourney;
            action?: Action | undefined;
            extras?: Record<string, unknown> | undefined;
        }) => Promise<Context>;
        track: (props: {
            screen: Screen;
            userJourney: UserJourney;
            extras?: Record<string, unknown> | undefined;
        } & ({
            action: Action;
            control?: undefined;
            controlType?: undefined;
        } | {
            control: Control;
            controlType: ControlType;
            action?: Action | undefined;
        })) => Promise<Context>;
        identify: AnalyticsBuffered['identify'];
        group: AnalyticsBuffered['group'];
        alias: AnalyticsBuffered['alias'];
        identifyFromCookie: () => Promise<Context>;
        updateWriteKey: (writeKey: string) => void;
    };
};

export { StandardAnalyticsActions, StandardAnalyticsControlTypes, createAnalytics };
