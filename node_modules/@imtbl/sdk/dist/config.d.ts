declare enum Environment {
    PRODUCTION = "production",
    SANDBOX = "sandbox"
}
declare class ImmutableConfiguration {
    readonly environment: Environment;
    readonly rateLimitingKey?: string;
    readonly apiKey?: string;
    readonly publishableKey?: string;
    constructor(options: {
        environment: Environment;
    });
}
declare const addApiKeyToAxiosHeader: (apiKey: string) => void;
declare const addPublishableKeyToAxiosHeader: (publishableKey: string) => void;
declare const addRateLimitingKeyToAxiosHeader: (rateLimitingKey: string) => void;
type ImmutableConfigurationWithRequireableFields<T> = ImmutableConfiguration & (T extends {
    apiKey: 'required';
} ? Required<{
    apiKey: string;
}> : {}) & (T extends {
    publishableKey: 'required';
} ? Required<{
    publishableKey: string;
}> : {});
type ImmutableConfigurationWithOmitableFields<T> = (T extends {
    apiKey: 'omit';
} ? Omit<ImmutableConfigurationWithRequireableFields<T>, 'apiKey'> : ImmutableConfigurationWithRequireableFields<T>);
interface ModuleConfiguration<T> {
    baseConfig: ImmutableConfigurationWithOmitableFields<T>;
    overrides?: T;
}

export { Environment, ImmutableConfiguration, ModuleConfiguration, addApiKeyToAxiosHeader, addPublishableKeyToAxiosHeader, addRateLimitingKeyToAxiosHeader };
