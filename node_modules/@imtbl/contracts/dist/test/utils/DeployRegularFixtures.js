"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disguidedEOAFixture = exports.walletSCFixture = exports.RegularAllowlistFixture = void 0;
const hardhat_1 = require("hardhat");
const utils_1 = require("ethers/lib/utils");
// Helper function to deploy all required contracts for Allowlist testing. Deploys:
// - ERC721
// - Mock factory
// - Mock wallet factory
// - Allowlist registry
// - Mock market place
const RegularAllowlistFixture = async (owner) => {
    const operatorAllowlistFactory = (await hardhat_1.ethers.getContractFactory("OperatorAllowlist"));
    const operatorAllowlist = await operatorAllowlistFactory.deploy(owner.address);
    // ERC721
    const erc721PresetFactory = (await hardhat_1.ethers.getContractFactory("ImmutableERC721MintByID"));
    const erc721 = await erc721PresetFactory.deploy(owner.address, "ERC721Preset", "EP", "https://baseURI.com/", "https://contractURI.com", operatorAllowlist.address, owner.address, hardhat_1.ethers.BigNumber.from("200"));
    // Mock Wallet factory
    const WalletFactory = (await hardhat_1.ethers.getContractFactory("MockWalletFactory"));
    const walletFactory = await WalletFactory.deploy();
    // Mock  factory
    const Factory = (await hardhat_1.ethers.getContractFactory("MockFactory"));
    const factory = await Factory.deploy();
    // Mock market place
    const mockMarketplaceFactory = (await hardhat_1.ethers.getContractFactory("MockMarketplace"));
    const marketPlace = await mockMarketplaceFactory.deploy(erc721.address);
    // Mock EIP1271 Wallet
    const mockEIP1271Wallet = (await hardhat_1.ethers.getContractFactory("MockEIP1271Wallet"));
    const eip1271Wallet = await mockEIP1271Wallet.deploy(owner.address);
    return {
        erc721,
        walletFactory,
        factory,
        operatorAllowlist,
        marketPlace,
        eip1271Wallet,
    };
};
exports.RegularAllowlistFixture = RegularAllowlistFixture;
// Helper function to deploy SC wallet via CREATE2 and return deterministic address
const walletSCFixture = async (walletDeployer, mockWalletFactory) => {
    // Deploy the implementation contract or wallet module
    const Module = await hardhat_1.ethers.getContractFactory("MockWallet");
    const module = await Module.connect(walletDeployer).deploy();
    const moduleAddress = module.address;
    // Calculate salt
    const salt = hardhat_1.ethers.utils.keccak256("0x1234");
    // Deploy wallet via factory
    await mockWalletFactory.connect(walletDeployer).deploy(module.address, salt);
    const deployedAddr = await mockWalletFactory.getAddress(module.address, salt);
    return { deployedAddr, moduleAddress };
};
exports.walletSCFixture = walletSCFixture;
// Helper function to return required artifacts to deploy disguised EOA via CREATE2
const disguidedEOAFixture = async (erc721Addr, MockFactory, saltInput) => {
    // Encode the constructor params
    const encodedParams = utils_1.defaultAbiCoder.encode(["address"], [erc721Addr]).slice(2);
    // Calculate salt
    const salt = hardhat_1.ethers.utils.keccak256(saltInput);
    // Get the artifact for bytecode
    const mockDisguisedEOAArtifact = await hardhat_1.artifacts.readArtifact("MockDisguisedEOA");
    // Append bytecode and constructor params
    const constructorByteCode = `${mockDisguisedEOAArtifact.bytecode}${encodedParams}`;
    // Calulate address of deployed contract
    const deployedAddr = await MockFactory.computeAddress(salt, hardhat_1.ethers.utils.keccak256(constructorByteCode));
    return { deployedAddr, salt, constructorByteCode };
};
exports.disguidedEOAFixture = disguidedEOAFixture;
