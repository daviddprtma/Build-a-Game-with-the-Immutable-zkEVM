import * as _emotion_react_jsx_runtime from '@emotion/react/jsx-runtime';
import * as react from 'react';
import { ReactElement, Ref, ElementType, ComponentPropsWithRef, MouseEvent, ReactNode, MouseEventHandler, ComponentPropsWithoutRef, ComponentType, RefObject, Component, Dispatch, SetStateAction, useEffect, useLayoutEffect, MutableRefObject } from 'react';
import { BaseTokens, LooseAutocomplete, SpacingTokenPaths, ColorTokenPaths, GradientTokenPaths, ShadowTokenPaths, BorderRadiusTokenPaths, FontTokenPaths, TextTokenPaths, IconTokenPaths, BorderTokenPaths, MotionTokenPaths, ProcessedBaseTokens, BodySize, BodyWeight, HeadingSize, HeadingWeight, CaptionSize, CaptionWeight, Colors, Breakpoints, DesignTokens, designTokens } from '@biom3/design-tokens';
import * as csstype from 'csstype';
import { Properties, Property } from 'csstype';
import { DistributiveOmit } from '@emotion/react';

type ResponsiveKey = keyof BaseTokens['breakpoint'];
type BreakpointTheme = {
    [key in ResponsiveKey]?: number;
};

type BaseComponentProps<T extends HTMLElement | SVGElement> = {
    testId?: string;
    className?: string;
    rc?: ReactElement<unknown>;
    domRef?: Ref<T>;
};
type StandardComponentWithProps<T extends HTMLElement | SVGElement, Props extends {} = {}> = BaseComponentProps<T> & SxComponentProps & Props;
type DomPropsWithDomRef<TElement extends ElementType> = {
    [Key in keyof ComponentPropsWithRef<TElement> as Key extends 'ref' ? 'domRef' : Key]: ComponentPropsWithRef<TElement>[Key];
};
type Overwrite<A, B> = Omit<A, keyof B> & B;
type TupleOf<T, N extends number, R extends unknown[]> = R['length'] extends N ? R : TupleOf<T, N, [T, ...R]>;
type Tuple<T, N extends number> = N extends N ? number extends N ? T[] : TupleOf<T, N, []> : never;
type GetFontWeights<T extends keyof BaseTokens['text']> = keyof BaseTokens['text'][T][keyof BaseTokens['text'][T]];
type GetTypeSizes<T extends keyof BaseTokens['text']> = keyof BaseTokens['text'][T];
type ErrorBrand<T extends string> = {
    _error: T;
} & object;
type RemoveErrorBrand<T> = T extends ErrorBrand<any> ? never : T;
type MakeWriteable<T extends {
    [x: string]: any;
}, K extends string> = {
    [P in K]: T[P];
};
type MakeResponsive<T> = [
    ...ErrorMessage: ErrorBrand<'Error! This may or may not be caused by exceeding the breakpoint limit!'>[],
    First: T | null,
    Second: T | null,
    Third: T | null,
    Fourth: T | null,
    Fifth: T | null,
    Sixth: T | null,
    Seventh: T | null
] | T | Tuple<T | null, 1> | Tuple<T | null, 2> | Tuple<T | null, 3> | Tuple<T | null, 4> | Tuple<T | null, 5> | Tuple<T | null, 6> | Tuple<T | null, 7>;
type DomReferenceRect = {
    bottom: number;
    height: number;
    left: number;
    right: number;
    top: number;
    width: number;
    x: number;
    y: number;
};
type SmartCloneProps = StandardComponentWithProps<HTMLElement, {
    fallBackDomNode?: keyof JSX.IntrinsicElements;
    onClick?: (ev: MouseEvent<unknown>) => void;
    children?: ReactNode;
    [key: string]: unknown;
}>;

type SpacingProperties = 'm' | 'margin' | 'marginTop' | 'mt' | 'marginRight' | 'mr' | 'marginBottom' | 'mb' | 'marginLeft' | 'ml' | 'marginX' | 'mx' | 'marginY' | 'my' | 'p' | 'padding' | 'paddingTop' | 'pt' | 'paddingRight' | 'pr' | 'paddingBottom' | 'pb' | 'paddingLeft' | 'pl' | 'paddingX' | 'px' | 'paddingY' | 'py' | 'scrollMargin' | 'scrollMarginTop' | 'scrollMarginRight' | 'scrollMarginBottom' | 'scrollMarginLeft' | 'scrollMarginX' | 'scrollMarginY' | 'scrollPadding' | 'scrollPaddingTop' | 'scrollPaddingRight' | 'scrollPaddingBottom' | 'scrollPaddingLeft' | 'scrollPaddingX' | 'scrollPaddingY' | 'top' | 'right' | 'bottom' | 'left' | 'gridGap' | 'gridColumnGap' | 'gridRowGap' | 'gap' | 'columnGap' | 'rowGap' | 'width' | 'w' | 'minw' | 'maxw' | 'minWidth' | 'maxWidth' | 'columnWidth' | 'height' | 'h' | 'minh' | 'maxh' | 'minHeight' | 'maxHeight' | 'flexBasis' | 'size' | 'letterSpacing';
type ColorProperties = 'color' | 'c' | 'bg' | 'background' | 'backgroundColor' | 'borderColor' | 'caretColor' | 'outlineColor' | 'textDecorationColor' | 'fill' | 'stroke' | 'borderTopColor' | 'borderRightColor' | 'borderBottomColor' | 'borderLeftColor' | 'columnRuleColor' | 'bgc';
type GradientProperties = 'bg' | 'background' | 'color' | 'c' | 'backgroundImage' | 'bgi';
type ShadowProperties = 'boxShadow' | 'textShadow';
type RadiusProperties = 'borderRadius' | 'borderTopLeftRadius' | 'borderTopRightRadius' | 'borderBottomLeftRadius' | 'borderBottomRightRadius' | 'brad' | 'bradtl' | 'bradtr' | 'bradbl' | 'bradbr';
type FontProperties = 'fontFamily' | 'textDecoration' | 'textTransform';
type TextProperties = 'fontSize' | 'fontWeight' | 'lineHeight';
type IconSizeProperties = SpacingProperties;
type BorderProperties = 'borderTop' | 'borderRight' | 'borderBottom' | 'borderLeft' | 'borderWidth' | 'borderTopWidth' | 'borderRightWidth' | 'borderBottomWidth' | 'borderLeftWidth';
type MotionProperties = 'transitionDuration' | 'transitionTimingFunction' | 'animationDuration' | 'animationTimingFunction';
type GetNarrowedDesignTokens<T> = MakeValidSxValue<LooseAutocomplete<NonNullable<(T extends SpacingProperties ? SpacingTokenPaths : undefined) | (T extends ColorProperties ? ColorTokenPaths : undefined) | (T extends GradientProperties ? GradientTokenPaths : undefined) | (T extends ShadowProperties ? ShadowTokenPaths : undefined) | (T extends RadiusProperties ? BorderRadiusTokenPaths : undefined) | (T extends FontProperties ? FontTokenPaths : undefined) | (T extends TextProperties ? TextTokenPaths : undefined) | (T extends IconSizeProperties ? IconTokenPaths : undefined) | (T extends BorderProperties ? BorderTokenPaths : undefined) | (T extends MotionProperties ? MotionTokenPaths : undefined) | (T extends SpacingProperties | ColorProperties | GradientProperties | ShadowProperties | RadiusProperties | FontProperties | TextProperties | IconSizeProperties | BorderProperties | MotionProperties ? undefined : ValidSxValues)>>>;

type BiomeTheme = {
    base: ProcessedBaseTokens;
    components?: {
        Button?: {
            sxOverride?: DeeplyNestedSx;
        };
        ButtCon?: {
            sxOverride?: DeeplyNestedSx;
        };
        Link?: {
            sxOverride?: DeeplyNestedSx;
        };
        Card?: {
            sxOverride?: DeeplyNestedSx;
        };
        Paginaiton?: {
            sxOverride?: DeeplyNestedSx;
        };
    };
};

declare const shortHandCssRuleMapping: {
    readonly c: "color";
    readonly d: "display";
    readonly f: "flex";
    readonly o: "order";
    readonly pos: "position";
    readonly m: "margin";
    readonly mt: "marginTop";
    readonly mb: "marginBottom";
    readonly ml: "marginLeft";
    readonly mr: "marginRight";
    readonly mx: "marginX";
    readonly marginX: "marginX";
    readonly marginY: "marginY";
    readonly my: "marginY";
    readonly p: "padding";
    readonly pt: "paddingTop";
    readonly pb: "paddingBottom";
    readonly pr: "paddingRight";
    readonly pl: "paddingLeft";
    readonly px: "paddingX";
    readonly paddingX: "paddingX";
    readonly py: "paddingY";
    readonly paddingY: "paddingY";
    readonly w: "width";
    readonly maxw: "maxWidth";
    readonly minw: "minWidth";
    readonly h: "height";
    readonly minh: "minHeight";
    readonly maxh: "maxHeight";
    readonly bgc: "backgroundColor";
    readonly bgi: "backgroundImage";
    readonly bg: "background";
    readonly b: "border";
    readonly bl: "borderLeft";
    readonly br: "borderRight";
    readonly bt: "borderTop";
    readonly bb: "borderBottom";
    readonly brad: "borderRadius";
    readonly bradtl: "borderTopLeftRadius";
    readonly bradtr: "borderTopRightRadius";
    readonly bradbl: "borderBottomLeftRadius";
    readonly bradbr: "borderBottomRightRadius";
};
type SxProps = {
    [P in keyof Properties]?: GetNarrowedDesignTokens<P>;
} & {
    [K in keyof typeof shortHandCssRuleMapping]?: GetNarrowedDesignTokens<K>;
};
type DescendantSxProps = Record<string, SxProps> | SxProps;
type DoubleDescendantSxProps = Record<string, DescendantSxProps> | SxProps;
type TripleDescentantSxProps = Record<string, DoubleDescendantSxProps> | SxProps;
type DeeplyNestedSx = SxProps | DescendantSxProps | DoubleDescendantSxProps | TripleDescentantSxProps;
type SxComponentProps = {
    sx?: DeeplyNestedSx;
};
type MakeObjectResponsive<T> = {
    [key in ResponsiveKey]?: T;
} & {
    default: T;
};
type MakeFunctionResponsive<T> = (theme: BiomeTheme) => T;
type MakeValidSxValue<T> = MakeResponsive<T> | MakeFunctionResponsive<T> | MakeObjectResponsive<T>;
type ValidSxValues = string | number;
type Measurement = ValidSxValues | MakeFunctionResponsive<ValidSxValues>;
type MeasurementAndResponsiveMeasurement = Measurement | MakeResponsive<Measurement> | MakeObjectResponsive<Measurement>;

type BoxProps = StandardComponentWithProps<HTMLDivElement, {
    children?: ReactNode;
}>;
type BoxWithRCAndDomProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'div'> & BoxProps : BoxProps & {
    rc: RC;
};
declare function Box<RC extends ReactElement | undefined = undefined>({ testId, sx, children, rc, domRef, className, ...domProps }: BoxWithRCAndDomProps<RC>): react.CElement<any, react.Component<any, any, any>>;
declare namespace Box {
    var displayName: string;
}

type StackProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    direction?: MakeValidSxValue<Property.FlexDirection>;
    gap?: MakeValidSxValue<LooseAutocomplete<NonNullable<SpacingTokenPaths>>>;
    rowGap?: MakeValidSxValue<LooseAutocomplete<NonNullable<SpacingTokenPaths>>>;
    columnGap?: MakeValidSxValue<LooseAutocomplete<NonNullable<SpacingTokenPaths>>>;
    justifyContent?: MakeValidSxValue<Property.JustifyContent>;
    alignItems?: MakeValidSxValue<Property.AlignItems>;
    alignContent?: MakeValidSxValue<Property.AlignContent>;
    flexWrap?: MakeValidSxValue<Property.FlexWrap>;
    flexFlow?: MakeValidSxValue<Property.FlexFlow>;
};
declare function Stack<RC extends ReactElement | undefined = undefined>({ sx, direction, rowGap, columnGap, gap, justifyContent, alignContent, alignItems, flexWrap, flexFlow, className, ...props }: StackProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Stack {
    var displayName: string;
}

type ChevronSide = 'left' | 'right';

type AccordionExpandedContentProps<RC extends ReactElement | undefined = undefined> = StackProps<RC> & {
    chevronSide?: ChevronSide;
};
declare function AccordionExpandedContent<RC extends ReactElement | undefined = undefined>({ children, className, sx, chevronSide, ...props }: AccordionExpandedContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AccordionExpandedContent {
    var displayName: string;
}

type AccordionTargetSlotProps<RC extends ReactElement | undefined = undefined> = StackProps<RC> & {};
declare function AccordionTargetLeftSlot<RC extends ReactElement | undefined = undefined>({ sx, alignItems, className, ...props }: AccordionTargetSlotProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AccordionTargetLeftSlot {
    var displayName: string;
}
declare function AccordionTargetRightSlot<RC extends ReactElement | undefined = undefined>({ alignItems, className, sx, ...props }: AccordionTargetSlotProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AccordionTargetRightSlot {
    var displayName: string;
}

type AccordionProps<RC extends ReactElement | undefined = undefined> = StackProps<RC> & {
    chevronSide?: ChevronSide;
    onExpandChange?: (expanded: boolean) => void;
    emphasized?: boolean;
    targetClickOveride?: MouseEventHandler<HTMLButtonElement>;
} & ({
    expanded: boolean;
    defaultExpanded?: never;
} | {
    defaultExpanded?: boolean;
    expanded?: never;
});
declare function Accordion<RC extends ReactElement | undefined = undefined>(props: AccordionProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Accordion {
    var displayName: string;
    var TargetLeftSlot: typeof AccordionTargetLeftSlot;
    var TargetRightSlot: typeof AccordionTargetRightSlot;
    var ExpandedContent: typeof AccordionExpandedContent;
}

declare const DEFAULT_TEXT_INPUT_SIZE: "medium";
declare const DEFAULT_TEXT_INPUT_ALIGN: "left";
declare const TEXT_INPUT_SIZES: readonly ["medium", "large"];
type TextInputSize = (typeof TEXT_INPUT_SIZES)[number];
declare const INPUT_MIN_WIDTH = "216px";

type IconVariant = 'bold' | 'regular';
type DualVariantIconProps = StandardComponentWithProps<SVGSVGElement, {
    variant?: IconVariant;
    children?: ReactNode;
}>;
type SingleVariantIconProps = Omit<DualVariantIconProps, 'variant'>;
type GenericIconProps = DualVariantIconProps | SingleVariantIconProps;
type IconReactElement = ReactElement<GenericIconProps, typeof Icon>;
type LinkIconProps = Omit<IconProps, 'variant'> & {
    variant?: LinkVariant;
    iconVariant?: IconVariant;
};
type TextInputIconProps = IconProps & {
    iconVariant?: IconVariant;
    size?: MakeResponsive<TextInputSize>;
};

declare const allIcons: {
    Apple: null;
    DevSdk: null;
    Discord: null;
    Email: null;
    Exchange: null;
    GraphPerformance: null;
    Google: null;
    InformationCircle: null;
    JumpTo: null;
    LinkedIn: null;
    Loading: null;
    Pause: null;
    Percentage: null;
    Play: null;
    Preferences: null;
    Reddit: null;
    Refresh: null;
    Sort: null;
    SushiSwap: null;
    Swap: null;
    Flip: null;
    Sword: null;
    Telegram: null;
    ThemeDark: null;
    ThemeLight: null;
    Twitter: null;
    UniSwap: null;
    Unity: null;
    ViewGrid: null;
    WalletConnect: null;
    WalletDisconnect: null;
    YouTube: null;
    Overview: null;
    Add: null;
    Alert: null;
    AirDrop: null;
    ArrowBackward: null;
    ArrowForward: null;
    Authenticated: null;
    Calendar: null;
    Cart: null;
    ChevronBackward: null;
    ChevronCollapse: null;
    ChevronExpand: null;
    ChevronForward: null;
    CircleRightArrow: null;
    CircleDownArrow: null;
    Close: null;
    CloseWithCircle: null;
    Coins: null;
    CopyText: null;
    Countdown: null;
    Dashboard: null;
    DevContracts: null;
    DevExplorer: null;
    Document: null;
    Documents: null;
    Dollar: null;
    Education: null;
    Edit: null;
    EmailAddress: null;
    EmbedCode: null;
    ESports: null;
    EthToken: null;
    Exclamation: null;
    Expand: null;
    Faucet: null;
    Fullscreen: null;
    FullscreenExit: null;
    Home: null;
    HidePassword: null;
    ImageAdd: null;
    Immutable: null;
    ImxRewards: null;
    ImxToken: null;
    Information: null;
    Instagram: null;
    Logout: null;
    Lock: null;
    Menu: null;
    Minting: null;
    Minus: null;
    More: null;
    MoreVertical: null;
    Notification: null;
    PancakeSwap: null;
    People: null;
    ReturnKeyboard: null;
    Search: null;
    Security: null;
    SettingsCog: null;
    Shield: null;
    ShowPassword: null;
    SocialShare: null;
    SoundOn: null;
    SoundOff: null;
    Sparkle: null;
    Swatch: null;
    TickWithCircle: null;
    Tags: null;
    Tick: null;
    Tokens: null;
    TreasureChest: null;
    Trophy: null;
    ViewList: null;
    Wallet: null;
    Profile: null;
    Items: null;
    BankCard: null;
};
type AllIconKeys = keyof typeof allIcons;
type IconBaseProps = DualVariantIconProps & {
    icon: AllIconKeys;
};
type IconProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'svg'> & IconBaseProps : IconBaseProps & {
    rc: RC;
};
declare function Icon<RC extends ReactElement | undefined = undefined>({ icon, variant, sx, testId, className, ...props }: IconProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Icon {
    var displayName: string;
}

type BodyTextProps = {
    size?: MakeResponsive<BodySize>;
    weight?: MakeResponsive<BodyWeight>;
    mono?: boolean;
    shimmer?: number;
    shimmerSx?: DeeplyNestedSx;
};
type BaseBodyProps = StandardComponentWithProps<HTMLSpanElement, {
    children?: ReactNode;
} & BodyTextProps>;
type BodyProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'span'> & BaseBodyProps : BaseBodyProps & {
    rc: RC;
};
type BaseHeadingProps = StandardComponentWithProps<HTMLHeadingElement, {
    children?: ReactNode;
    size?: MakeResponsive<HeadingSize>;
    weight?: MakeResponsive<HeadingWeight>;
    autoGenerateId?: boolean;
    id?: string;
}>;
type HeadingProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'h1'> & BaseHeadingProps : BaseHeadingProps & {
    rc: RC;
};
type CaptionBaseProps = StandardComponentWithProps<HTMLSpanElement, {
    children?: ReactNode;
    size?: MakeResponsive<CaptionSize>;
    weight?: MakeResponsive<CaptionWeight>;
}>;
type CaptionProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'span'> & CaptionBaseProps : CaptionBaseProps & {
    rc: RC;
};
type StringWithoutHash<T> = T extends `#${string}` ? never : T;
type BiomeTextComponent = ReactElement;
declare function isBody({ type }: BiomeTextComponent, props: unknown): props is Partial<BodyProps<undefined>>;
declare function isHeading({ type }: BiomeTextComponent, props: unknown): props is Partial<HeadingProps<undefined>>;
declare function isCaption({ type }: BiomeTextComponent, props: unknown): props is Partial<CaptionProps<undefined>>;
type GetMultiTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined, BaseProps extends {}, FallbackNodeTag extends ElementType = 'span'> = RC extends undefined ? Use extends undefined ? DomPropsWithDomRef<FallbackNodeTag> & BaseProps & BodyTextProps : BaseProps & {
    use: Use;
} : Use extends undefined ? BaseProps & BodyTextProps & {
    rc: RC;
} : BaseProps & {
    rc: RC;
    use: Use;
};

declare const DEFAULT_MENU_ITEM_SIZE = "medium";
declare const MENU_ITEM_SIZES: readonly ["xSmall", "small", "medium"];
type MenuItemSize = (typeof MENU_ITEM_SIZES)[number];

declare const DEFAULT_TEXT_AREA_SIZE = "medium";
declare const DEFAULT_TEXT_AREA_ALIGN = "left";
declare const TEXT_AREA_SIZES: readonly ["medium", "large"];
type TextAreaSize = (typeof TEXT_AREA_SIZES)[number];

type InputValidationStatus = 'error' | 'success' | 'warning';
type StandardInputComponentWithProps<InputType extends 'input' | 'textarea' = 'input', ExtraProps extends {} = {}> = StandardComponentWithProps<HTMLDivElement, ComponentPropsWithoutRef<InputType> & ExtraProps>;
type InputTextAlign = 'left' | 'right';
type TextInputProps = StandardInputComponentWithProps<'input', {
    children?: ReactNode;
    validationStatus?: InputValidationStatus;
    hideClearValueButton?: boolean;
    defaultValue?: string;
    onClearValue?: () => void;
    sizeVariant?: MakeResponsive<TextInputSize>;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
}>;
type TextAreaProps = Omit<StandardInputComponentWithProps<'textarea', {
    validationStatus?: InputValidationStatus;
    defaultValue?: string;
    hideClearValueButton?: boolean;
    onClearValue?: () => void;
    sizeVariant?: MakeResponsive<TextAreaSize>;
    textAlign?: InputTextAlign;
    textAreaRef?: Ref<HTMLTextAreaElement>;
}>, 'onClick'> & {
    onClick?: (ev: MouseEvent<HTMLDivElement>) => void;
};

type BaseClickableProps = StandardComponentWithProps<HTMLButtonElement, {
    children?: ReactNode;
}>;
type BaseClickableWithRCAndDomProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'button'> & BaseClickableProps : BaseClickableProps & {
    rc: RC;
};
declare const BUTTON_SIZES: readonly ["small", "medium", "large"];
type ButtonSize = (typeof BUTTON_SIZES)[number];
type ButtonProps<RC extends ReactElement | undefined = undefined> = BaseClickableWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ButtonSize>;
    variant?: ButtonVariant;
};
type ButtConProps<RC extends ReactElement | undefined = undefined> = BaseClickableWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ButtonSize>;
    variant?: ButtonVariant;
    iconVariant?: DualVariantIconProps['variant'];
    iconSx?: DeeplyNestedSx;
} & ({
    icon: AllIconKeys;
} | {
    children: ReactNode;
});
type ButtonVariant = 'primary' | 'primary/destructive' | 'primary/inverse' | 'secondary' | 'secondary/destructive' | 'tertiary' | 'tertiary/inverse';
type LinkSize = BodySize;
type LinkVariant = 'primary' | 'secondary';
type LinkBaseProps = StandardComponentWithProps<HTMLButtonElement, {
    variant?: LinkVariant;
    children?: ReactNode;
    use?: ReactElement;
    size?: MakeResponsive<LinkSize>;
}>;
type GetClickableMultiTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined, BaseProps extends {}, BaseClickProps extends {}> = RC extends undefined ? Use extends undefined ? DomPropsWithDomRef<'button'> & BaseProps & BaseClickProps & BodyTextProps : BaseProps & BaseClickProps & {
    use: Use;
} : Use extends undefined ? BaseProps & {
    rc: RC;
} : BaseProps & {
    rc: RC;
    use: Use;
};
type LinkProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = GetClickableMultiTextProps<RC, Use, LinkBaseProps, BaseClickableProps>;
type TextInputButtonProps = BaseClickableProps & ComponentPropsWithoutRef<'button'> & {
    disabled?: boolean;
    currentInputValue?: ComponentPropsWithoutRef<'input'>['value'];
};
type TextInputStatefulButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<StatefulButtConProps<RC>, 'size'> & ComponentPropsWithoutRef<'button'> & {
    disabled?: boolean;
    currentInputValue?: ComponentPropsWithoutRef<'input'>['value'];
};
type ClearValueButtonProps<RC extends ReactElement | undefined = undefined> = BaseClickableWithRCAndDomProps<RC>;
type ComponentWithOnClick<Element extends 'button' | 'div'> = {
    onClick: ComponentPropsWithoutRef<Element>['onClick'];
};
declare function isBaseClickable(onClick: unknown, rc: ReactElement | undefined, containsClickables: boolean, props: unknown): props is BaseClickableProps & ComponentWithOnClick<'button'>;
declare function isBox(onClick: unknown, rc: ReactElement | undefined, containsClickables: boolean, props: unknown): props is Partial<BoxProps> & ComponentWithOnClick<'div'>;
declare function isLogo(onClick: unknown, rc: ReactElement | undefined, props: unknown): props is Partial<LogoProps>;
type GetHybridClickableRCandDomProps<RC extends ReactElement | undefined, OnClick extends Function | undefined, FallbackNodeTag extends ElementType = 'div'> = RC extends undefined ? OnClick extends undefined ? DomPropsWithDomRef<FallbackNodeTag> & Omit<BoxProps, 'domRef'> : DomPropsWithDomRef<'button'> & BaseClickableProps & {
    onClick?: OnClick;
} : OnClick extends undefined ? BaseClickableProps & {
    rc?: RC;
} : BaseClickableProps & {
    rc?: RC;
    onClick?: OnClick;
};
type MenuItemProps<RC extends ReactElement | undefined = undefined, OnClick extends Function | undefined = undefined> = GetHybridClickableRCandDomProps<RC, OnClick> & {
    emphasized?: boolean;
    size?: MakeResponsive<MenuItemSize>;
    selected?: boolean;
    shimmer?: boolean;
    shimmerSx?: DeeplyNestedSx;
    controlledHover?: boolean;
    textAlign?: InputTextAlign;
};
type MenuItemContentProps<RC extends ReactElement | undefined, OnClick extends Function | undefined> = Omit<MenuItemProps<RC, OnClick>, 'shimmer'>;
type BaseMenuItemShimmerProps = Omit<StandardComponentWithProps<HTMLDivElement, {
    size?: MakeResponsive<MenuItemSize>;
    emphasized?: boolean;
}>, 'domRef'>;
type MenuItemShimmerProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'button'> & BaseMenuItemShimmerProps : BaseMenuItemShimmerProps & {
    rc: RC;
};

declare const APP_HEADER_BAR_SIZES: readonly ["small", "medium"];
declare const DEFAULT_APP_HEADER_BAR_SIZE: AppHeaderBarSize;
type AppHeaderBarSize = (typeof APP_HEADER_BAR_SIZES)[number];
type AppHeaderBarVariant = 'dim' | 'transparent' | 'bright';
type AppHeaderBarContentAlign = 'left' | 'center';

type AppHeaderBarLeftButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtConProps<RC>, 'size'> & {
    size?: MakeResponsive<AppHeaderBarSize>;
};
declare function AppHeaderBarLeftButtCon<RC extends ReactElement | undefined = undefined>({ size, variant, sx, ...props }: AppHeaderBarLeftButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBarLeftButtCon {
    var displayName: string;
}

declare function DocsHorizontalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace DocsHorizontalLockup {
    var displayName: string;
}

declare function DocsHorizontalLockupCompact({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace DocsHorizontalLockupCompact {
    var displayName: string;
}

declare function DocsVerticalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace DocsVerticalLockup {
    var displayName: string;
}

declare function GameStopSymbol({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace GameStopSymbol {
    var displayName: string;
}

declare function HubHorizontalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HubHorizontalLockup {
    var displayName: string;
}

declare function HubHorizontalLockupCompact({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HubHorizontalLockupCompact {
    var displayName: string;
}

declare function HubVerticalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HubVerticalLockup {
    var displayName: string;
}

declare function ImmutableHorizontalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ImmutableHorizontalLockup {
    var displayName: string;
}

declare function ImmutableSymbol({ sx, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ImmutableSymbol {
    var displayName: string;
}

declare function ImmutableVerticalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ImmutableVerticalLockup {
    var displayName: string;
}

declare function MagicSymbol({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MagicSymbol {
    var displayName: string;
}

declare function MetaMaskSymbol({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MetaMaskSymbol {
    var displayName: string;
}

declare function PassportHorizontalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PassportHorizontalLockup {
    var displayName: string;
}

declare function PassportHorizontalLockupCompact({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PassportHorizontalLockupCompact {
    var displayName: string;
}

declare function PassportSymbol({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PassportSymbol {
    var displayName: string;
}

declare function PassportSymbolOutlined({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PassportSymbolOutlined {
    var displayName: string;
}

declare function PassportVerticalLockup({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PassportVerticalLockup {
    var displayName: string;
}

declare function WalletConnectSymbol({ sx, testId, ...props }: SingleVariantIconProps): _emotion_react_jsx_runtime.JSX.Element;

declare const allLogos: {
    MetaMaskSymbol: typeof MetaMaskSymbol;
    WalletConnectSymbol: typeof WalletConnectSymbol;
    MagicSymbol: typeof MagicSymbol;
    GameStopSymbol: typeof GameStopSymbol;
    ImmutableSymbol: typeof ImmutableSymbol;
    PassportSymbol: typeof PassportSymbol;
    PassportSymbolOutlined: typeof PassportSymbolOutlined;
    ImmutableHorizontalLockup: typeof ImmutableHorizontalLockup;
    ImmutableVerticalLockup: typeof ImmutableVerticalLockup;
    PassportHorizontalLockup: typeof PassportHorizontalLockup;
    PassportHorizontalLockupCompact: typeof PassportHorizontalLockupCompact;
    PassportVerticalLockup: typeof PassportVerticalLockup;
    HubHorizontalLockup: typeof HubHorizontalLockup;
    HubHorizontalLockupCompact: typeof HubHorizontalLockupCompact;
    HubVerticalLockup: typeof HubVerticalLockup;
    DocsHorizontalLockup: typeof DocsHorizontalLockup;
    DocsHorizontalLockupCompact: typeof DocsHorizontalLockupCompact;
    DocsVerticalLockup: typeof DocsVerticalLockup;
};
type AllLogoKeys = keyof typeof allLogos;
type LogoProps = SingleVariantIconProps & {
    logo: AllLogoKeys;
};
declare function Logo<RC extends ReactElement | undefined = undefined>({ logo, ...props }: RC extends undefined ? DomPropsWithDomRef<'svg'> & LogoProps : LogoProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Logo {
    var displayName: string;
}

type AppHeaderBarLeftLogoProps<RC extends ReactElement | undefined, OnClick extends Function | undefined> = GetHybridClickableRCandDomProps<RC, OnClick> & Omit<LogoProps, 'domRef'> & {
    size?: MakeResponsive<AppHeaderBarSize>;
};
declare function AppHeaderBarLeftLogo<RC extends ReactElement | undefined = undefined, OnClick extends Function | undefined = undefined>({ size, logo, sx, rc, ...otherProps }: AppHeaderBarLeftLogoProps<RC, OnClick>): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace AppHeaderBarLeftLogo {
    var displayName: string;
}

declare function BaseClickable<RC extends ReactElement | undefined = undefined>({ rc, testId, sx, children, domRef, ...props }: BaseClickableWithRCAndDomProps<RC>): react.CElement<any, react.Component<any, any, any>>;
declare namespace BaseClickable {
    var displayName: string;
}

type SvgIconProps = StandardComponentWithProps<SVGSVGElement, {
    children: ReactNode;
    viewBox?: string;
}>;
declare function SvgIcon<RC extends ReactElement | undefined = undefined>({ testId, children, domRef, className, viewBox, sx, rc, ...svgDomAttributes }: RC extends undefined ? DomPropsWithDomRef<'svg'> & SvgIconProps : SvgIconProps & {
    rc: RC;
}): react.CElement<any, react.Component<any, any, any>>;
declare namespace SvgIcon {
    var displayName: string;
}

type ButtonIconProps$1 = SvgIconProps & {
    size?: MakeResponsive<ButtonSize>;
    variant?: ButtonVariant;
};
declare function ButtConSvgIcon({ size, variant, domRef, children, sx, ...props }: ButtonIconProps$1): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ButtConSvgIcon {
    var displayName: string;
}

declare function ButtCon<RC extends ReactElement | undefined = undefined>({ size, variant, sx, iconSx, testId, iconVariant, className, ...props }: ButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ButtCon {
    var displayName: string;
    var SvgIcon: typeof ButtConSvgIcon;
}

declare const IMAGE_SIZE_VARIANTS: readonly ["small", "medium", "large", "xLarge"];
declare const DEFAULT_IMAGE_SIZE_VARIANT: "medium";
type ImageSizeVariant = (typeof IMAGE_SIZE_VARIANTS)[number];
type SizeMapping = Record<ImageSizeVariant, number>;
declare const TOLERATED_IMAGE_SIZES: readonly [32, 64, 128, 256, 370, 450, 512, 640, 720, 860, 1024, 1280, 1440, 1600, 1920, 2048];
type ResponsiveSizes = Array<(typeof TOLERATED_IMAGE_SIZES)[number]>;
type ImageComponentKind = 'Avatar' | 'SwapStack' | 'FramedStack';
type SafeSizes = readonly string[];

type AnimationKind = 'fast' | 'gentle';

type PaginationDiscriminatedUnion<T> = (T & {
    currentPage: number;
    onPageChange: (value: number) => void;
}) | (T & {
    defaultPage?: number;
    onPageChange?: (value: number) => void;
    currentPage?: never;
});

declare const TOOLTIP_SIZES: readonly ["small", "medium", "large"];
declare const DEFAULT_TOOLTIP_SIZE: TooltipSize;
type TooltipSize = (typeof TOOLTIP_SIZES)[number];
type TooltipComponentProps = {
    id?: string;
    size?: MakeResponsive<TooltipSize>;
    domRef?: Ref<HTMLButtonElement>;
    children: ReactNode;
};
type TooltipItem = {
    id: string;
    content: ReactNode;
    targetRect: DomReferenceRect;
    size: MakeResponsive<TooltipSize>;
};
type TooltipContext = {
    tooltipList: TooltipItem[];
};

type ButtonIconProps = Omit<IconProps, 'variant'> & {
    size?: MakeResponsive<ButtonSize>;
    variant?: MakeResponsive<ButtonVariant>;
    iconVariant?: 'bold' | 'regular';
};
declare function ButtonIcon({ sx, iconVariant, variant, size, domRef, ...props }: ButtonIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ButtonIcon {
    var displayName: string;
}

type ButtonLogoProps = LogoProps & {
    size?: MakeResponsive<ButtonSize>;
    variant?: MakeResponsive<ButtonVariant>;
};
declare function ButtonLogo({ sx, size, variant, domRef, logo, ...props }: ButtonLogoProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ButtonLogo {
    var displayName: string;
}

declare function Button<RC extends ReactElement | undefined = undefined>({ children, sx, variant, size, testId, className, ...props }: ButtonProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Button {
    var displayName: string;
    var Icon: typeof ButtonIcon;
    var Logo: typeof ButtonLogo;
}

type StatefulButtConState = 'initial' | 'loading' | 'success' | 'fatal';
type StatefulButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtConProps<RC>, 'variant'> & {
    state?: StatefulButtConState;
};
declare function StatefulButtCon<RC extends ReactElement | undefined = undefined>({ state, iconVariant, sx, ...props }: StatefulButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace StatefulButtCon {
    var displayName: string;
}

declare function LinkIcon({ sx, variant, iconVariant, ...props }: LinkIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LinkIcon {
    var displayName: string;
}

declare function Link<RC extends ReactElement | undefined, Use extends ReactElement | undefined = undefined>({ variant, sx, children, testId, rc, ...props }: LinkProps<RC, Use>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Link {
    var displayName: string;
    var Icon: typeof LinkIcon;
}

type DuoConColorVariant = keyof Colors['status'];
type DuoConProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    outerShape?: 'circle' | 'octogon';
    icon: AllIconKeys;
    variant?: IconVariant;
    colorVariant?: DuoConColorVariant;
    iconVariant?: IconVariant;
};
declare function DuoCon<RC extends ReactElement | undefined = undefined>({ icon, variant, iconVariant, colorVariant, outerShape, testId, sx, ...props }: DuoConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;

declare const DARK_ON_LIGHT_DEFAULT_IMAGE = "https://design-system.immutable.com/hosted-for-ds/images/defaultTokenImage--darkOnLight.svg";
declare const LIGHT_ON_DARK_DEFAULT_IMAGE = "https://design-system.immutable.com/hosted-for-ds/images/defaultTokenImage--lightOnDark.svg";
type CloudImageProps = Omit<StandardComponentWithProps<HTMLImageElement, {
    imageUrl?: string | null;
    defaultImageUrl?: string;
    defaultImageClassName?: string;
    responsiveSizes?: ResponsiveSizes;
    relativeImageSizeInLayout?: string;
    imageResizeServiceUrl?: string;
    loading?: 'lazy' | 'eager';
    alt?: string;
}>, 'rc'>;
declare function CloudImage({ testId, className, domRef, defaultImageClassName, imageUrl, defaultImageUrl, responsiveSizes, relativeImageSizeInLayout, loading, imageResizeServiceUrl, sx, alt, ...props }: CloudImageProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CloudImage {
    var displayName: string;
}

declare const ASPECT_RATIOS: readonly ["1:1", "3:4", "4:3", "7:5", "16:9", "21:9", "32:9"];
type AspectRatio = (typeof ASPECT_RATIOS)[number];
type AspectRatioImageProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & Pick<CloudImageProps, 'imageUrl' | 'relativeImageSizeInLayout' | 'imageResizeServiceUrl' | 'responsiveSizes' | 'loading' | 'defaultImageUrl' | 'defaultImageClassName' | 'alt'> & {
    aspectRatio?: MakeResponsive<AspectRatio>;
    objectFit?: MakeValidSxValue<Property.ObjectFit>;
    objectPosition?: MakeValidSxValue<Property.ObjectPosition>;
};
declare function AspectRatioImage<RC extends ReactElement | undefined = undefined>({ imageUrl, relativeImageSizeInLayout, responsiveSizes, imageResizeServiceUrl, defaultImageClassName, defaultImageUrl, loading, sx, aspectRatio, objectFit, objectPosition, testId, rc, className, alt, ...props }: AspectRatioImageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AspectRatioImage {
    var displayName: string;
}

declare function Body<RC extends ReactElement | undefined = undefined>({ size, weight, shimmer, shimmerSx, sx, children, mono, rc, domRef, testId, className, ...props }: BodyProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Body {
    var displayName: string;
}

declare function Caption<RC extends ReactElement | undefined = undefined>({ size, weight, rc, sx, testId, children, domRef, ...spanDomAttributes }: CaptionProps<RC>): react.CElement<any, react.Component<any, any, any>>;
declare namespace Caption {
    var displayName: string;
}

type EllipsizedTextBaseProps = StandardComponentWithProps<HTMLSpanElement, {
    text: string;
    leftSideLength?: number;
    rightSideLength?: number;
    use?: ReactElement;
}>;
type EllipsizedTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = GetMultiTextProps<RC, Use, EllipsizedTextBaseProps>;
declare function EllipsizedText<RC extends ReactElement | undefined = undefined, Use extends ReactElement | undefined = undefined>({ leftSideLength, rightSideLength, text, rc, sx, ...props }: EllipsizedTextProps<RC, Use>): react.CElement<any, react.Component<any, any, any>>;
declare namespace EllipsizedText {
    var displayName: string;
}

declare function Heading<RC extends ReactElement | undefined = undefined>({ size, weight, testId, children, sx, rc, domRef, autoGenerateId, id, ...headingDomAttributes }: HeadingProps<RC>): react.CElement<any, react.Component<any, any, any>>;
declare namespace Heading {
    var displayName: string;
}

type TextMessages = Array<string>;
type LoopingTextBaseProps = {
    text: TextMessages;
    textDuration?: number;
};
type LoopingTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = GetMultiTextProps<RC, Use, LoopingTextBaseProps> & BoxWithRCAndDomProps<RC>;
declare function LoopingText<RC extends ReactElement | undefined = undefined, Use extends ReactElement | undefined = undefined>({ text, textDuration, className, testId, rc, ...props }: LoopingTextProps<RC, Use>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LoopingText {
    var displayName: string;
}

type PriceDisplayBaseProps = Pick<CloudImageProps, 'imageResizeServiceUrl'> & StandardComponentWithProps<HTMLSpanElement, {
    price: string;
    fiatAmount?: string;
    currencyImageUrl?: string | null;
    use?: ReactElement;
}>;
type PriceDisplayProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = GetMultiTextProps<RC, Use, PriceDisplayBaseProps>;
declare function PriceDisplay<RC extends ReactElement | undefined, Use extends ReactElement | undefined = undefined>({ price, fiatAmount, domRef, currencyImageUrl, imageResizeServiceUrl, sx, testId, rc, ...props }: PriceDisplayProps<RC, Use>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PriceDisplay {
    var displayName: string;
}

type RollingTextBaseProps = StandardComponentWithProps<HTMLSpanElement, {
    text: string;
    use?: ReactElement;
}>;
type RollingTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = GetMultiTextProps<RC, Use, RollingTextBaseProps> & BoxWithRCAndDomProps<RC> & {
    animationKind?: AnimationKind;
};
declare function RollingText<RC extends ReactElement | undefined = undefined, Use extends ReactElement | undefined = undefined>({ text, testId, className, domRef, animationKind, ...props }: RollingTextProps<RC, Use>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace RollingText {
    var displayName: string;
}

type ConfirmationDialogContentAnimationBoxProps<RC extends ReactElement | undefined> = BoxWithRCAndDomProps<RC> & {};
declare function ConfirmationDialogContentRiveBox<RC extends ReactElement | undefined>({ sx, rc, ...props }: ConfirmationDialogContentAnimationBoxProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ConfirmationDialogContentRiveBox {
    var displayName: string;
}

type ConfirmationDialogTextAlign = 'left' | 'center';
type ConfirmationDialogContentProps<RC extends ReactElement | undefined> = BoxWithRCAndDomProps<RC> & {
    children?: ReactNode;
    textAlign?: ConfirmationDialogTextAlign;
    id?: string;
};
declare function ConfirmationDialogContent<RC extends ReactElement | undefined = undefined>({ children, sx, testId, textAlign, ...props }: ConfirmationDialogContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ConfirmationDialogContent {
    var displayName: string;
    var RiveBox: typeof ConfirmationDialogContentRiveBox;
    var AspectRatioImage: typeof AspectRatioImage;
    var DuoCon: typeof DuoCon;
    var Title: typeof Heading;
    var Caption: typeof Body;
    var Button: typeof Button;
}

type LoadingOverlayContentLoopingTextProps = LoopingTextProps<undefined, undefined> & {
    size?: MakeResponsive<LoadingOverlaySize>;
};
declare function LoadingOverlayContentLoopingText({ size, ...props }: LoadingOverlayContentLoopingTextProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LoadingOverlayContentLoopingText {
    var displayName: string;
}

type LoadingOverlayContentAnimationBoxProps<RC extends ReactElement | undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<LoadingOverlaySize>;
};
declare function LoadingOverlayContentRiveBox<RC extends ReactElement | undefined>({ sx, size, rc, ...props }: LoadingOverlayContentAnimationBoxProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LoadingOverlayContentRiveBox {
    var displayName: string;
}

declare const LOADING_OVERLAY_SIZES: readonly ["small", "medium"];
type LoadingOverlaySize = (typeof LOADING_OVERLAY_SIZES)[number];
type LoadingOverlayContentProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<LoadingOverlaySize>;
};
declare function LoadingOverlayContent<RC extends ReactElement | undefined = undefined>({ children, sx, testId, size, ...props }: LoadingOverlayContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LoadingOverlayContent {
    var displayName: string;
    var RiveBox: typeof LoadingOverlayContentRiveBox;
    var LoopingText: typeof LoadingOverlayContentLoopingText;
}

type ModalContentProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<BoxWithRCAndDomProps<RC>, 'children'> & {
    children: ((props: {
        closeModal: () => void;
    }) => ReactNode) | ReactNode;
    id?: string;
};
declare function ModalContent<RC extends ReactElement | undefined = undefined>({ children, id, sx, className, ...props }: ModalContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ModalContent {
    var displayName: string;
}

type ModalPosition = {
    y: 'top' | 'center' | 'bottom';
    x: 'left' | 'center' | 'right';
};
type ModalItem = {
    id: string;
    content: ReactNode;
    showBgOverlay: boolean;
    bgOverlaySx: DeeplyNestedSx;
    fullScreenUntilBreakpoint?: keyof Breakpoints;
    isControlled?: boolean;
    onCloseModal?: () => void;
    outsideClicksClose?: boolean;
    position: ModalPosition;
    testId: string;
};
type OverlayStore = {
    modalList: ModalItem[];
    drawerList: DrawerItem[];
    popoverList: PopoverItem[];
    toastList: ToastItem[];
};
type ModalComponentProps = {
    children: ReactNode;
    visible?: boolean;
    id?: string;
    domRef?: Ref<HTMLButtonElement>;
    onCloseModal?: () => void;
    showBgOverlay?: boolean;
    outsideClicksClose?: boolean;
    bgOverlaySx?: DeeplyNestedSx;
    fullScreenUntilBreakpoint?: keyof Breakpoints;
    position?: ModalPosition;
    testId?: string;
    ContentSubcomponent?: ComponentType<ModalContentProps<undefined>> | ComponentType<ConfirmationDialogContentProps<undefined>> | ComponentType<LoadingOverlayContentProps<undefined>>;
};
declare const DRAWER_POSITIONS: readonly ["bottom", "right", "left"];
declare const DRAWER_SIZES: readonly ["quarter", "half", "threeQuarter", "full"];
declare const DEFAULT_DRAWER_SIZE: "threeQuarter";
declare const DEFAULT_DRAWER_POSITION: "bottom";
type DrawerSize = (typeof DRAWER_SIZES)[number];
type DrawerPosition = (typeof DRAWER_POSITIONS)[number];
type WithDrawerDisriminatedProps<Props = {}> = Props & ({
    showHeaderBar: true;
    headerBarTitle: ReactNode;
} | {
    showHeaderBar: false;
    headerBarTitle?: never;
} | {
    showHeaderBar?: undefined;
    headerBarTitle: ReactNode;
});
type DrawerItem = WithDrawerDisriminatedProps<{
    id: string;
    content: ReactNode;
    size: DrawerSize;
    isControlled?: boolean;
    onCloseDrawer?: () => void;
    showBgOverlay: boolean;
    outsideClicksClose?: boolean;
    drawerPosition: DrawerPosition;
    testId: string;
}>;
type DrawerComponentProps = WithDrawerDisriminatedProps<{
    visible?: boolean;
    id?: string;
    size?: DrawerSize;
    domRef?: Ref<HTMLButtonElement>;
    onCloseDrawer?: () => void;
    showBgOverlay?: boolean;
    outsideClicksClose?: boolean;
    children: ReactNode;
    drawerPosition?: DrawerPosition;
    testId?: string;
}>;
type PopoverPosition = {
    y: 'above' | 'below';
    x: 'left' | 'center' | 'right';
};
type PopoverItem = {
    id: string;
    content: ReactNode;
    targetRef: RefObject<HTMLElement>;
    position: PopoverPosition;
    verticalGap?: number;
    isControlled?: boolean;
    onOutsideClick?: () => void;
};
type PopoverComponentProps = {
    visible?: boolean;
    id?: string;
    children?: ReactNode;
    position?: PopoverPosition;
    domRef?: Ref<HTMLButtonElement>;
    onOutsideClick?: () => void;
    verticalGap?: number;
};
type ToastPosition = {
    y: 'top' | 'bottom';
    x: 'left' | 'center' | 'right';
};
type ToastVariant = keyof Colors['status'];
type ToastItem = {
    id: string;
    content: ReactNode;
    position: ToastPosition;
    variant: ToastVariant;
    buttonsPosition: 'right' | 'bottomRight';
    hideDismissButton: boolean;
    autoDismissDuration?: number;
    onCloseToast: () => void;
    testId?: string;
    sx?: DeeplyNestedSx;
};
type ToastComponentProps = {
    visible: boolean;
    domRef?: Ref<HTMLDivElement>;
    children: ReactNode;
} & Partial<Omit<ToastItem, 'content'>>;

type OverflowMenuCommonProps = Omit<ButtConProps<undefined>, 'rc' | 'icon'> & {
    children?: ReactNode;
    testId?: string;
    className?: string;
    icon?: AllIconKeys;
};
type OverflowPopoverMenuProps = OverflowMenuCommonProps;
type OverflowDrawerMenuProps = OverflowMenuCommonProps & Pick<DrawerComponentProps, 'showBgOverlay' | 'showHeaderBar' | 'headerBarTitle' | 'outsideClicksClose' | 'drawerPosition'> & {
    drawerSize?: DrawerSize;
};

declare function OverflowDrawerMenu({ children, domRef, testId, icon, size, variant, onClick, drawerSize, showHeaderBar, headerBarTitle, showBgOverlay, outsideClicksClose, drawerPosition, ...buttConProps }: OverflowDrawerMenuProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace OverflowDrawerMenu {
    var displayName: string;
}

declare function OverflowPopoverMenu({ children, domRef, testId, icon, size, variant, onClick, ...buttConProps }: OverflowPopoverMenuProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace OverflowPopoverMenu {
    var displayName: string;
}

type AppHeaderBarOverflowPopoverMenuProps = OverflowPopoverMenuProps;
declare function AppHeaderBarOverflowPopoverMenu({ children, sx, size, ...props }: AppHeaderBarOverflowPopoverMenuProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBarOverflowPopoverMenu {
    var displayName: string;
}

type AppHeaderBarSlotProps<RC extends ReactElement | undefined = undefined> = StackProps<RC> & {
    size?: MakeResponsive<AppHeaderBarSize>;
};
declare function AppHeaderBarLeftSlot<RC extends ReactElement | undefined = undefined>(props: AppHeaderBarSlotProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBarLeftSlot {
    var displayName: string;
}
declare function AppHeaderBarRightSlot<RC extends ReactElement | undefined = undefined>(props: AppHeaderBarSlotProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBarRightSlot {
    var displayName: string;
}

type AppHeaderBarTitleProps<RC extends ReactElement | undefined, OnClick extends Function | undefined> = GetHybridClickableRCandDomProps<RC, OnClick> & {
    size?: MakeResponsive<AppHeaderBarSize>;
    contentAlign?: AppHeaderBarContentAlign;
};
declare function AppHeaderBarTitle<RC extends ReactElement | undefined = undefined, OnClick extends Function | undefined = undefined>({ size, sx, contentAlign, rc, ...otherProps }: AppHeaderBarTitleProps<RC, OnClick>): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace AppHeaderBarTitle {
    var displayName: string;
}

type AppHeaderBarTitleLogoProps<RC extends ReactElement | undefined, OnClick extends Function | undefined> = GetHybridClickableRCandDomProps<RC, OnClick, 'svg'> & Omit<LogoProps, 'domRef'> & {
    size?: MakeResponsive<AppHeaderBarSize>;
    contentAlign?: AppHeaderBarContentAlign;
};
declare function AppHeaderBarTitleLogo<RC extends ReactElement | undefined = undefined, OnClick extends Function | undefined = undefined>({ size, logo, sx, contentAlign, rc, testId, domRef, ...props }: AppHeaderBarTitleLogoProps<RC, OnClick>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBarTitleLogo {
    var displayName: string;
}

type AppHeaderBarProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<AppHeaderBarSize>;
    emphasized?: boolean;
    contentAlign?: AppHeaderBarContentAlign;
    variant?: AppHeaderBarVariant;
};
declare function AppHeaderBar<RC extends ReactElement | undefined = undefined>({ sx, rc, variant, size, children, emphasized, contentAlign, testId, ...props }: AppHeaderBarProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace AppHeaderBar {
    var displayName: string;
    var LeftButtCon: typeof AppHeaderBarLeftButtCon;
    var LeftLogo: typeof AppHeaderBarLeftLogo;
    var Title: typeof AppHeaderBarTitle;
    var TitleLogo: typeof AppHeaderBarTitleLogo;
    var RightSlot: typeof AppHeaderBarRightSlot;
    var LeftSlot: typeof AppHeaderBarLeftSlot;
    var OverflowPopoverMenu: typeof AppHeaderBarOverflowPopoverMenu;
}

declare function TextInputIcon({ sx, iconVariant, ...props }: TextInputIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInputIcon {
    var displayName: string;
}

type AutocompleteProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<BoxWithRCAndDomProps<RC>, 'onChange'> & Omit<TextInputProps, 'onChange' | 'hideClearValueButton' | 'inputMode' | 'onFocus' | 'onBlur' | 'value'> & {
    options: string[];
    onChange?: (selectedValue: string | null) => void;
    onInputChange?: ComponentPropsWithoutRef<'input'>['onChange'];
    inputValue?: string;
    value?: string | null;
};
declare function Autocomplete<RC extends ReactElement | undefined = undefined>({ children, options, onClearValue, name, sizeVariant, textAlign, domRef, inputRef, defaultValue, value, inputValue, onChange, onInputChange, placeholder, validationStatus, testId, ...props }: AutocompleteProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Autocomplete {
    var displayName: string;
    var Icon: typeof TextInputIcon;
}

type AvatarProps = StandardComponentWithProps<HTMLDivElement, {
    size?: MakeResponsive<ImageSizeVariant>;
    initials?: string;
} & Omit<CloudImageProps, 'responsiveSizes' | 'relativeImageSizeInLayout'>>;
declare function Avatar<RC extends string | undefined>({ initials, imageUrl, size, imageResizeServiceUrl, defaultImageClassName, defaultImageUrl, loading, testId, className, sx, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & AvatarProps : AvatarProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Avatar {
    var displayName: string;
}

type BadgeVariant = keyof Colors['status'];

type BadgeProps = StandardComponentWithProps<HTMLSpanElement, {
    variant?: BadgeVariant;
    isAnimated?: boolean;
    badgeContent?: string | number;
    maxNumber?: number;
    showZero?: boolean;
}>;
declare function Badge<RC extends ReactElement | undefined = undefined>({ rc, domRef, testId, sx, variant, isAnimated, badgeContent, maxNumber, showZero, ...badgeDomAttributes }: RC extends undefined ? DomPropsWithDomRef<'span'> & BadgeProps : BadgeProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Badge {
    var displayName: string;
}

declare const DEFAULT_BANNER_VARIANT = "standard";
type BannerVariant = keyof Colors['status'] | typeof DEFAULT_BANNER_VARIANT;
type BannerProps = BoxProps & {
    variant?: BannerVariant;
    forceMultilineText?: boolean;
};
type BannerTextProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC> & {
    variant?: BannerVariant;
};
type StrippedDownVariants = Exclude<ButtonVariant, 'secondary' | 'secondary/destructive' | 'tertiary/inverse' | 'primary/inverse' | 'primary/destructive'>;
type BannerRightButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtConProps<RC>, 'variant' | 'size'> & {
    bannerVariant?: BannerVariant;
    variant?: StrippedDownVariants;
};
type BannerRightButtonProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtonProps<RC>, 'variant' | 'size'> & {
    bannerVariant?: BannerVariant;
    variant?: StrippedDownVariants;
};

declare function BannerCaption<RC extends ReactElement | undefined = undefined>({ children, size, weight, variant, sx, ...props }: BannerTextProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace BannerCaption {
    var displayName: string;
}

type BannerIconProps = DistributiveOmit<IconProps, 'variant'> & {
    variant?: BannerVariant;
    iconVariant?: IconVariant;
};
declare function BannerIcon({ sx, variant, iconVariant, ...props }: BannerIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace BannerIcon {
    var displayName: string;
}

declare function BannerRightButtCon<RC extends ReactElement | undefined = undefined>({ variant, bannerVariant, ...props }: BannerRightButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace BannerRightButtCon {
    var displayName: string;
}

declare function BannerRightButton<RC extends ReactElement | undefined = undefined>({ variant, bannerVariant, ...props }: BannerRightButtonProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace BannerRightButton {
    var displayName: string;
}

declare function BannerTitle<RC extends ReactElement | undefined = undefined>({ children, size, weight, variant, sx, ...props }: BannerTextProps<RC>): _emotion_react_jsx_runtime.JSX.Element;

declare function Banner<RC extends ReactElement | undefined = undefined>({ children, variant, sx, testId, forceMultilineText, domRef, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & BannerProps : BannerProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Banner {
    var displayName: string;
    var Icon: typeof BannerIcon;
    var Title: typeof BannerTitle;
    var Caption: typeof BannerCaption;
    var RightButton: typeof BannerRightButton;
    var RightButtCon: typeof BannerRightButtCon;
}

type CardAssetImageProps = AspectRatioImageProps<undefined>;
declare function CardAssetImage({ responsiveSizes, sx, className, ...props }: CardAssetImageProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardAssetImage {
    var displayName: string;
}

type CardButtConProps<RC extends ReactElement | undefined = undefined> = ButtConProps<RC>;
declare function CardButtCon<RC extends ReactElement | undefined = undefined>({ variant, size, className, ...props }: CardButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardButtCon {
    var displayName: string;
}

type CardButtonProps<RC extends ReactElement | undefined = undefined> = ButtonProps<RC>;
declare function CardButton<RC extends ReactElement | undefined = undefined>({ sx, variant, className, ...props }: CardButtonProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardButton {
    var displayName: string;
}

type CardCaptionProps<RC extends ReactElement | undefined = undefined> = CaptionProps<RC> & DomPropsWithDomRef<'span'>;
declare function CardCaption<RC extends ReactElement | undefined = undefined>({ size, weight, sx, rc, className, ...props }: CardCaptionProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardCaption {
    var displayName: string;
}

type CardDescriptionProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC> & DomPropsWithDomRef<'span'>;
declare function CardDescription<RC extends ReactElement | undefined = undefined>({ size, weight, sx, rc, className, ...props }: CardDescriptionProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardDescription {
    var displayName: string;
}

type CardFramedLogoProps$1 = CloudImageProps;
declare function CardFramedImage({ sx, testId, responsiveSizes, className, ...props }: CardFramedLogoProps$1): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardFramedImage {
    var displayName: string;
}

type CardFramedLogoProps = BoxProps & Pick<LogoProps, 'logo'>;
declare function CardFramedLogo({ logo, sx, testId, className, ...props }: CardFramedLogoProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardFramedLogo {
    var displayName: string;
}

type CardMenuItemProps = MenuItemProps<undefined, undefined>;
declare function CardMenuItem({ sx, children, size, domRef, className, ...props }: CardMenuItemProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardMenuItem {
    var displayName: string;
}

type BaseCardTitleProps = BoxProps;
type CardTitleProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'span'> & BaseCardTitleProps : BaseCardTitleProps & {
    rc: RC;
};
declare function CardTitle<RC extends ReactElement | undefined = undefined>({ children, sx, rc, className, ...props }: CardTitleProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardTitle {
    var displayName: string;
}

type CardProps<RC extends ReactElement | undefined, OnClick extends Function | undefined> = GetHybridClickableRCandDomProps<RC, OnClick> & {
    elevation?: 1 | 2 | 3 | 4 | 5;
    selected?: boolean;
};
declare function Card<RC extends ReactElement | undefined = undefined, OnClick extends Function | undefined = undefined>({ className, testId, domRef, rc, sx, children, elevation, selected, ...otherProps }: CardProps<RC, OnClick>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Card {
    var displayName: string;
    var Title: typeof CardTitle;
    var Caption: typeof CardCaption;
    var Description: typeof CardDescription;
    var FramedLogo: typeof CardFramedLogo;
    var FramedImage: typeof CardFramedImage;
    var AssetImage: typeof CardAssetImage;
    var MenuItem: typeof CardMenuItem;
    var Button: typeof CardButton;
    var ButtCon: typeof CardButtCon;
}

type CheckboxProps = StandardInputComponentWithProps<'input', {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
}>;
declare function Checkbox<RC extends ReactElement | undefined = undefined>({ sx, testId, name, id, children, domRef, className, onChange, checked, value, disabled, validationStatus, inputRef, rc, textAlign, ...inputHtmlAttrs }: RC extends undefined ? CheckboxProps : CheckboxProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Checkbox {
    var displayName: string;
}

type ModalTargetProps = StandardComponentWithProps<HTMLButtonElement, {
    children: ReactNode;
    id?: string;
}>;
declare function ModalTarget({ children, ...props }: ModalTargetProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ModalTarget {
    var displayName: string;
}

type ConfirmationDialogProps = ModalComponentProps & {};
declare function ConfirmationDialog({ bgOverlaySx, testId, ...props }: ConfirmationDialogProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ConfirmationDialog {
    var displayName: string;
    var Target: typeof ModalTarget;
    var Content: typeof ConfirmationDialogContent;
}

declare const COUNTDOWN_TIMER_SIZES: readonly ["small", "medium", "large", "xLarge"];
declare const DEFAULT_COUNTDOWN_TIMER_SIZE: "medium";
type CountdownTimerSize = (typeof COUNTDOWN_TIMER_SIZES)[number];
declare const COUNTDOWN_TIMER_VARIANTS: readonly ["primary", "inverse"];
declare const DEFAULT_COUNTDOWN_TIMER_VARIANT: "primary";
type CountdownTimerVariant = (typeof COUNTDOWN_TIMER_VARIANTS)[number];

type CountdownTimerProps<RC extends ReactElement | undefined = undefined> = StackProps<RC> & {
    futureTarget: Date;
    size?: MakeResponsive<CountdownTimerSize>;
    variant?: CountdownTimerVariant;
    onCountdownEnd?: () => void;
};
declare function CountdownTimer<RC extends ReactElement | undefined = undefined>({ futureTarget, size, variant, className, testId, onCountdownEnd, direction, justifyContent, sx, ...props }: CountdownTimerProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CountdownTimer {
    var displayName: string;
}

declare const DEFAULT_DIVIDER_SIZE = "medium";
declare const DIVIDER_SIZES: readonly ["xSmall", "small", "medium", "large"];
type DividerSize = (typeof DIVIDER_SIZES)[number];
type DividerProps = StandardComponentWithProps<HTMLDivElement, {
    size?: MakeResponsive<DividerSize>;
    children?: string | number | boolean;
    textAlign?: 'left' | 'center';
}>;

declare function Divider<RC extends ReactElement | undefined = undefined>({ size, sx, children, textAlign, className, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & DividerProps : DividerProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Divider {
    var displayName: string;
}

type DrawerContentProps<RC extends ReactElement | undefined = undefined> = ModalContentProps<RC> & {};
declare function DrawerContent<RC extends ReactElement | undefined = undefined>({ className, sx, ...props }: DrawerContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace DrawerContent {
    var displayName: string;
}

type DrawerTargetProps = ModalTargetProps & {};
declare function DrawerTarget({ ...props }: DrawerTargetProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace DrawerTarget {
    var displayName: string;
}

declare function Drawer({ visible, id: idProp, children, size, domRef, showHeaderBar, onCloseDrawer, showBgOverlay, headerBarTitle, outsideClicksClose, drawerPosition, testId, }: DrawerComponentProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Drawer {
    var displayName: string;
    var Content: typeof DrawerContent;
    var Target: typeof DrawerTarget;
}

type MenuItemBadgeProps = BadgeProps;
declare function MenuItemBadge({ ...props }: MenuItemBadgeProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemBadge {
    var displayName: string;
}

type MenuItemCaptionProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<MenuItemSize>;
};
declare function MenuItemCaption<RC extends ReactElement | undefined = undefined>({ size, sx, rc, ...props }: MenuItemCaptionProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemCaption {
    var displayName: string;
}

type FramedImageProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<AspectRatioImageProps<RC>, 'aspectRatio'> & {
    circularFrame?: boolean;
};
declare function FramedImage<RC extends ReactElement | undefined = undefined>({ sx, testId, circularFrame, responsiveSizes, className, ...props }: FramedImageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FramedImage {
    var displayName: string;
}

type MenuItemFramedIconProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & Pick<IconProps, 'icon'> & Pick<DualVariantIconProps, 'variant'> & Pick<FramedImageProps<RC>, 'circularFrame'> & Pick<MenuItemProps, 'size'>;
declare function MenuItemFramedIcon<RC extends ReactElement | undefined = undefined>({ icon, sx, testId, variant, circularFrame, size, rc, ...props }: MenuItemFramedIconProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemFramedIcon {
    var displayName: string;
}

type MenuItemFramedImageProps<RC extends ReactElement | undefined = undefined> = FramedImageProps<RC> & Pick<MenuItemProps, 'size'>;
declare function MenuItemFramedImage<RC extends ReactElement | undefined = undefined>({ sx, rc, size, ...props }: MenuItemFramedImageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemFramedImage {
    var displayName: string;
}

type MenuItemFramedLogoProps = BoxProps & Pick<LogoProps, 'logo'> & Pick<MenuItemProps, 'size'> & {
    circularFrame?: boolean;
};
declare function MenuItemFramedLogo({ logo, sx, testId, circularFrame, size, rc, ...props }: MenuItemFramedLogoProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemFramedLogo {
    var displayName: string;
}

type MenuItemIconProps = IconProps;
declare function MenuItemIcon({ icon, sx, ...props }: MenuItemIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemIcon {
    var displayName: string;
}

type MenuItemLabelProps = BoxProps & {
    size?: MakeResponsive<MenuItemSize>;
};
declare function MenuItemLabel({ size, children, testId, sx, rc, ...props }: MenuItemLabelProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemLabel {
    var displayName: string;
}

type ExpandableMenuItemProps = StandardComponentWithProps<HTMLDivElement, {
    emphasized?: boolean;
    children: ReactNode;
    size?: MakeResponsive<MenuItemSize>;
    textAlign?: InputTextAlign;
    onExpandChange?: (expanded: boolean) => void;
    shimmer?: boolean;
    shimmerSx?: DeeplyNestedSx;
} & ({
    expanded: boolean;
    defaultExpanded?: never;
} | {
    defaultExpanded?: boolean;
    expanded?: never;
})>;
declare function ExpandableMenuItem<RC extends ReactElement | undefined = undefined>(props: RC extends undefined ? DomPropsWithDomRef<'div'> & ExpandableMenuItemProps : ExpandableMenuItemProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ExpandableMenuItem {
    var displayName: string;
    var Icon: typeof MenuItemIcon;
    var FramedIcon: typeof MenuItemFramedIcon;
    var FramedImage: typeof MenuItemFramedImage;
    var FramedLogo: typeof MenuItemFramedLogo;
    var Label: typeof MenuItemLabel;
    var Caption: typeof MenuItemCaption;
    var Badge: typeof MenuItemBadge;
}

type FormControlCaptionProps = Omit<BaseBodyProps & DomPropsWithDomRef<'span'>, 'rc'> & {
    textAlign?: InputTextAlign;
};
declare function FormControlCaption({ size, children, testId, sx, textAlign, ...props }: FormControlCaptionProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FormControlCaption {
    var displayName: string;
}

type FormControlLabelProps = Omit<BaseBodyProps & DomPropsWithDomRef<'label'>, 'rc'> & {
    textAlign?: InputTextAlign;
};
declare function FormControlLabel({ size, children, testId, sx, textAlign, ...props }: FormControlLabelProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FormControlLabel {
    var displayName: string;
}

type FormControlValidationProps = Omit<BaseBodyProps & DomPropsWithDomRef<'span'>, 'rc'> & {
    textAlign?: InputTextAlign;
    validationStatus?: InputValidationStatus;
};
declare function FormControlValidation({ size, children, validationStatus, testId, sx, textAlign, ...props }: FormControlValidationProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FormControlValidation {
    var displayName: string;
}

type FormControlProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    children?: ReactNode;
    id?: string;
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
};
declare function FormControl<RC extends ReactElement | undefined = undefined>({ domRef, sx, id: idProp, testId, children, validationStatus, textAlign, ...domAttributes }: FormControlProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FormControl {
    var displayName: string;
    var Label: typeof FormControlLabel;
    var Validation: typeof FormControlValidation;
    var Caption: typeof FormControlCaption;
}

type FramedStackProps = StandardComponentWithProps<HTMLDivElement, {
    circularFrame?: boolean;
    primaryImageUrl: string;
    secondaryImageUrl?: string;
    tertiaryImageUrl?: string;
    direction?: 'spiral' | 'rightDiagonal' | 'leftDiagonal' | 'left' | 'right';
    size?: MakeResponsive<ImageSizeVariant>;
}>;
declare function FramedStack<RC extends ReactElement | undefined = undefined>({ primaryImageUrl, secondaryImageUrl, tertiaryImageUrl, direction, testId, circularFrame, className, size, sx, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & FramedStackProps : FramedStackProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace FramedStack {
    var displayName: string;
}

type GridBoxProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    minColumnWidth?: string;
    gap?: MakeValidSxValue<LooseAutocomplete<NonNullable<SpacingTokenPaths>>>;
};
declare function GridBox<RC extends ReactElement | undefined = undefined>({ sx, minColumnWidth, gap, ...props }: GridBoxProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace GridBox {
    var displayName: string;
}

type HorizontalMenuButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtConProps<RC>, 'variant'> & {
    selected?: boolean;
};
declare function HorizontalMenuButtCon<RC extends ReactElement | undefined = undefined>({ sx, size, selected, ...props }: HorizontalMenuButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HorizontalMenuButtCon {
    var displayName: string;
}

type HorizontalMenuButtonProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtonProps<RC>, 'variant'> & {
    selected?: boolean;
};
declare function HorizontalMenuButton<RC extends ReactElement | undefined = undefined>({ children, sx, size, selected, ...props }: HorizontalMenuButtonProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HorizontalMenuButton {
    var displayName: string;
    var Icon: typeof ButtonIcon;
    var Logo: typeof ButtonLogo;
}

type HorizontalMenuProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ButtonSize>;
};
declare function HorizontalMenu<RC extends ReactElement | undefined = undefined>({ children, sx, size, ...props }: HorizontalMenuProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace HorizontalMenu {
    var displayName: string;
    var Button: typeof HorizontalMenuButton;
    var ButtCon: typeof HorizontalMenuButtCon;
}

type InputBarProps = Omit<StandardInputComponentWithProps<'input', {
    inputRef?: Ref<HTMLInputElement>;
    emphasized?: boolean;
    children: ReactNode;
    inputType?: 'checkbox' | 'radio' | 'toggle';
    textAlign?: InputTextAlign;
}>, 'size' | 'type'> & {
    size?: MakeResponsive<MenuItemSize>;
};
declare function InputBar<RC extends ReactElement | undefined = undefined>({ children, checked, size, emphasized, disabled, id: idProp, inputType, domRef, inputRef, onChange, testId, defaultChecked, sx, textAlign, rc, ...inputProps }: RC extends undefined ? InputBarProps : InputBarProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace InputBar {
    var displayName: string;
    var Icon: typeof MenuItemIcon;
    var FramedIcon: typeof MenuItemFramedIcon;
    var FramedImage: typeof MenuItemFramedImage;
    var FramedLogo: typeof MenuItemFramedLogo;
    var Label: typeof MenuItemLabel;
    var Caption: typeof MenuItemCaption;
}

type LoadingOverlayProps = ModalComponentProps & {};
declare function LoadingOverlay({ bgOverlaySx, testId, ...props }: LoadingOverlayProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace LoadingOverlay {
    var displayName: string;
    var Target: typeof ModalTarget;
    var Content: typeof LoadingOverlayContent;
}

type MenuItemIntentIconProps = Partial<IconProps>;
declare function MenuItemIntentIcon({ icon, sx, ...props }: MenuItemIntentIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemIntentIcon {
    var displayName: string;
}

type MenuItemOverflowDrawerMenuProps = DistributiveOmit<OverflowDrawerMenuProps, 'icon' | 'iconVariant'>;
declare function MenuItemOverflowDrawerMenu({ children, sx, ...props }: MenuItemOverflowDrawerMenuProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemOverflowDrawerMenu {
    var displayName: string;
}

type MenuItemOverflowPopoverMenuProps = DistributiveOmit<OverflowPopoverMenuProps, 'icon' | 'iconVariant'>;
declare function MenuItemOverflowPopoverMenu({ children, sx, ...props }: MenuItemOverflowPopoverMenuProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemOverflowPopoverMenu {
    var displayName: string;
}

type MenuItemPriceDisplayProps = Omit<PriceDisplayProps<undefined, undefined>, 'size'> & {
    size?: MakeResponsive<MenuItemSize>;
};
declare function MenuItemPriceDisplay({ sx, size, price, ...props }: MenuItemPriceDisplayProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemPriceDisplay {
    var displayName: string;
}

type MenuItemStatefulButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<StatefulButtConProps<RC>, 'size'>;
declare function MenuItemStatefulButtCon<RC extends ReactElement | undefined = undefined>({ sx, ...props }: MenuItemStatefulButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItemStatefulButtCon {
    var displayName: string;
}

declare function MenuItem<RC extends ReactElement | undefined, OnClick extends Function | undefined>({ shimmer, size, rc, testId, className, children, emphasized, selected, domRef, sx, shimmerSx, controlledHover, textAlign, ...otherProps }: MenuItemProps<RC, OnClick>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace MenuItem {
    var displayName: string;
    var Icon: typeof MenuItemIcon;
    var FramedIcon: typeof MenuItemFramedIcon;
    var FramedImage: typeof MenuItemFramedImage;
    var FramedLogo: typeof MenuItemFramedLogo;
    var Label: typeof MenuItemLabel;
    var IntentIcon: typeof MenuItemIntentIcon;
    var PriceDisplay: typeof MenuItemPriceDisplay;
    var Caption: typeof MenuItemCaption;
    var Badge: typeof MenuItemBadge;
    var OverflowPopoverMenu: typeof MenuItemOverflowPopoverMenu;
    var OverflowDrawerMenu: typeof MenuItemOverflowDrawerMenu;
    var StatefulButtCon: typeof MenuItemStatefulButtCon;
}

declare function Modal({ visible, id: idProp, children, domRef, onCloseModal, showBgOverlay, bgOverlaySx, fullScreenUntilBreakpoint, outsideClicksClose, position, testId, ContentSubcomponent, }: ModalComponentProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Modal {
    var displayName: string;
    var Content: typeof ModalContent;
    var Target: typeof ModalTarget;
}

declare const DEFAULT_NUMBER_STEPPER_SIZE: "medium";
declare const NUMBER_STEPPER_SIZES: readonly ["medium", "large"];
type NumberStepperSize = (typeof NUMBER_STEPPER_SIZES)[number];
type NumericalString = `${number}`;
type NumberStepperProps = StandardComponentWithProps<HTMLDivElement, {
    id?: string;
    name?: string;
    defaultValue?: NumericalString;
    value?: NumericalString;
    onChange?: (newValue: NumericalString) => void;
    step?: NumericalString;
    size?: MakeResponsive<NumberStepperSize>;
    min?: NumericalString;
    max?: NumericalString;
    minErrorText?: string;
    maxErrorText?: string;
    textAlign?: InputTextAlign;
    validationStatus?: InputValidationStatus;
}>;
declare function NumberStepper<RC extends ReactElement | undefined = undefined>({ value, defaultValue, step, size, onChange, min, max, name, id, minErrorText, maxErrorText, testId, textAlign, validationStatus, className, ...props }: RC extends undefined ? Omit<DomPropsWithDomRef<'div'>, 'onChange'> & NumberStepperProps : NumberStepperProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace NumberStepper {
    var displayName: string;
}

declare const ONBOARDING_PAGINATION_SIZES: readonly ["small", "medium"];
type OnboardingPaginationSize = (typeof ONBOARDING_PAGINATION_SIZES)[number];
type OnboardingPaginationProps = PaginationDiscriminatedUnion<StandardComponentWithProps<HTMLDivElement, {
    totalPages?: number;
    size?: MakeResponsive<OnboardingPaginationSize>;
}>>;

declare function OnboardingPagination<RC extends ReactElement | undefined = undefined>(props: RC extends undefined ? DomPropsWithDomRef<'div'> & OnboardingPaginationProps : OnboardingPaginationProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace OnboardingPagination {
    var displayName: string;
}

type BasePaginationProps = StandardComponentWithProps<HTMLDivElement, PaginationDiscriminatedUnion<{
    totalPages?: number;
    siblingPages?: number;
    boundaryPages?: number;
    showArrows?: boolean;
    size?: MakeResponsive<ButtonSize>;
    buttonSx?: DeeplyNestedSx;
}>>;
type PaginationProps<RC extends ReactElement | undefined = undefined> = RC extends undefined ? DomPropsWithDomRef<'div'> & BasePaginationProps : BasePaginationProps & {
    rc: RC;
};
declare function Pagination<RC extends ReactElement | undefined = undefined>(props: PaginationProps<RC>): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Pagination {
    var displayName: string;
}

type PasscodeInputDiscriminatedUnion<T> = (T & {
    currentPasscode: string;
    onPasscodeChange: (value: string) => void;
}) | (T & {
    defaultPasscode?: string;
    onPasscodeChange?: (value: string) => void;
    currentPasscode?: never;
});
type PasscodeInputProps = PasscodeInputDiscriminatedUnion<StandardComponentWithProps<HTMLDivElement, {
    passcodeLength?: number;
    validationStatus?: InputValidationStatus;
}>>;
declare function PasscodeInput<RC extends ReactElement | undefined = undefined>(props: RC extends undefined ? DomPropsWithDomRef<'div'> & PasscodeInputProps : PasscodeInputProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PasscodeInput {
    var displayName: string;
}

type PopoverContentProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    id?: string;
};
declare function PopoverContent<RC extends ReactElement | undefined = undefined>({ children, domRef, ...props }: PopoverContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PopoverContent {
    var displayName: string;
}

type PopoverTargetProps = StandardComponentWithProps<HTMLButtonElement, {
    children: ReactNode;
    id?: string;
}>;
declare function PopoverTarget({ children, ...props }: PopoverTargetProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace PopoverTarget {
    var displayName: string;
}

declare function Popover({ visible, id: idProp, children, position, domRef, onOutsideClick, verticalGap, }: PopoverComponentProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Popover {
    var displayName: string;
    var Target: typeof PopoverTarget;
    var Content: typeof PopoverContent;
}

type ProgressBarLeftRollingTextProps<RC extends ReactElement | undefined, Use extends ReactElement | undefined> = RollingTextProps<RC, Use> & {};
declare function ProgressBarLeftRollingText<RC extends ReactElement | undefined = undefined, Use extends ReactElement | undefined = undefined>({ className, text, rc, use, ...props }: ProgressBarLeftRollingTextProps<RC, Use>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ProgressBarLeftRollingText {
    var displayName: string;
}

declare const PROGRESS_BAR_VARIANTS: readonly ["determinate", "indeterminate"];
declare const PROGRESS_BAR_SIZES: readonly ["small", "medium"];
declare const DEFAULT_PROGRESS_BAR_SIZE: "medium";
declare const PROGRESS_BAR_COLOR_VARIANTS: readonly ["guidance", "brand", "inverted", "gradient"];
declare const DEFAULT_PROGRESS_BAR_COLOR_VARIANT: "guidance";
type ProgressBarVariant = (typeof PROGRESS_BAR_VARIANTS)[number];
type ProgressBarSize = (typeof PROGRESS_BAR_SIZES)[number];
type ProgressBarColorVariant = (typeof PROGRESS_BAR_COLOR_VARIANTS)[number];
type ProgressBarProps = StandardComponentWithProps<HTMLDivElement, {
    children?: ReactNode;
    colorVariant?: ProgressBarColorVariant;
    size?: MakeResponsive<ProgressBarSize>;
    value?: number;
    animationKind?: AnimationKind;
} & ({
    variant: 'determinate';
    value: number;
} | {
    variant: 'indeterminate';
    value?: never;
})>;

type ProgressBarRightTextProps<RC extends ReactElement | undefined> = BodyProps<RC> & {
    variant?: ProgressBarVariant;
    value?: number;
};
declare function ProgressBarRightText<RC extends ReactElement | undefined = undefined>({ size, className, children, ...props }: ProgressBarRightTextProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ProgressBarRightText {
    var displayName: string;
}

declare function ProgressBar<RC extends ReactElement | undefined = undefined>({ children, size, variant, colorVariant, sx, className, testId, animationKind, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & ProgressBarProps : ProgressBarProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ProgressBar {
    var displayName: string;
    var LeftRollingText: typeof ProgressBarLeftRollingText;
    var RightText: typeof ProgressBarRightText;
}

type RadioProps = StandardInputComponentWithProps<'input', {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
}>;
declare function Radio<RC extends ReactElement | undefined = undefined>({ sx, testId, name, id, children, domRef, className, onChange, checked, value, disabled, validationStatus, textAlign, inputRef, rc, ...inputHtmlAttrs }: RC extends undefined ? RadioProps : RadioProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Radio {
    var displayName: string;
}

type RecycleViewListItem = {
    id: number | string;
};
type GridColumnWidthRange = {
    min: '100%';
} | {
    min: number;
    max: number;
};
type RecycleViewProps<T extends RecycleViewListItem, RC extends ReactElement | undefined> = BoxWithRCAndDomProps<RC> & typeof RecycleView.defaultProps & {
    initialData: T[];
    renderItem: (item: T, itemKey?: string) => ReactNode;
    loadMoreItems?: (concattedItemsSize: number) => Promise<T[]>;
    gridColumnWidthRange?: GridColumnWidthRange;
    atEndOfData: boolean;
    gridGap?: number;
    padForCardItems?: boolean;
};
type State<T> = {
    currentItems: T[];
};
declare class RecycleView<T extends RecycleViewListItem, RC extends ReactElement | undefined> extends Component<RecycleViewProps<T, RC>, State<T>> {
    static displayName: string;
    static defaultProps: {
        padForCardItems: boolean;
        gridGap: number;
        gridColumnWidthRange: GridColumnWidthRange;
        sx: {};
    };
    constructor(props: RecycleViewProps<T, RC>);
    private dimensions;
    private shortCircuitPagingFunctionality;
    private lastScroll;
    private loadingMoreItems;
    private concattedItems;
    private currentColumnWidth;
    private paddingTop;
    private topSentinelPreviousY;
    private bottomSentinelPreviousY;
    private bottomSentinalIsIntersecting;
    private currentColumnCount;
    private currentGridSize;
    private currentFirstIndex;
    private topIntersectionObserver;
    private bottomIntersectionObserver;
    private containerRef;
    private testItemRef;
    private topSentinelRef;
    private bottomSentinelRef;
    private gridRef;
    private overflowRef;
    private scrollTicking;
    private rAF;
    private rIC;
    private debouncedResize;
    private containerResizeObserver;
    private get currentConcattedItemsDataSize();
    private rowIncrementAmount;
    private get gridIndexIncrement();
    private resetPadding;
    private checkToLoadMoreItems;
    private fetchMoreItems;
    private calculateNewFirstIndex;
    private changePaging;
    private updatePadding;
    private topSentinelCallback;
    private bottomSentinelCallback;
    private debouncedOnScroll;
    private initListeners;
    private unloadListeners;
    private handleResize;
    private chooseCurrentItems;
    private reset;
    private initRecycleView;
    private calculateAppropriateListSize;
    private calculateGridColumns;
    private initPerfCallbacks;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: RecycleViewProps<T, RC>): void;
    render(): _emotion_react_jsx_runtime.JSX.Element;
}

declare const DEFAULT_SELECT_SIZE: "medium";
declare const selectSizes: readonly ["medium", "large"];
type SelectSize = (typeof selectSizes)[number];
type OptionKey = string | number | null;
type OnOptionClick = (children: ReactNode, optionKey: OptionKey) => void;
type OptionProps = Omit<MenuItemProps<undefined, Function>, 'rc'> & {
    onOptionClick?: OnOptionClick;
    optionKey: number | string;
};
type SelectDescriminatedUnion = {
    defaultOption?: never;
    selectedOption: OptionKey;
    onSelectChange: (value: OptionKey) => void;
} | {
    selectedOption?: never;
    defaultOption?: OptionKey;
    onSelectChange?: (value: OptionKey) => void;
};
type SelectProps = Omit<StandardComponentWithProps<HTMLButtonElement, SelectDescriminatedUnion & {
    defaultLabel?: string;
    validationStatus?: InputValidationStatus;
    children?: ReactNode;
    id?: string;
    popoverContainerSx?: SxComponentProps['sx'];
    size?: MakeResponsive<SelectSize>;
    textAlign?: InputTextAlign;
    targetClickOveride?: (event: MouseEvent<HTMLButtonElement>) => void;
    disabled?: boolean;
}>, 'rc'>;

declare function Option({ size, onOptionClick, children, optionKey, selected, sx, testId, ...props }: OptionProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Option {
    var displayName: string;
    var Label: typeof MenuItemLabel;
    var Caption: typeof MenuItemCaption;
    var Icon: typeof MenuItemIcon;
    var FramedImage: typeof MenuItemFramedImage;
}

type SelectDefaultFramedImageProps<RC extends ReactElement | undefined = undefined> = FramedImageProps<RC>;
declare function SelectDefaultFramedImage<RC extends ReactElement | undefined = undefined>({ sx, ...props }: SelectDefaultFramedImageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace SelectDefaultFramedImage {
    var displayName: string;
}

type SelectDefaultIconProps = IconProps & {
    iconVariant?: IconVariant;
};
declare function SelectDefaultIcon({ sx, iconVariant, ...props }: SelectDefaultIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace SelectDefaultIcon {
    var displayName: string;
}

declare function Select({ children, validationStatus, defaultLabel, sx, popoverContainerSx, onSelectChange, domRef, testId, id: idProp, size, textAlign, targetClickOveride, disabled, ...props }: SelectProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Select {
    var displayName: string;
    var DefaultFramedImage: typeof SelectDefaultFramedImage;
    var DefaultIcon: typeof SelectDefaultIcon;
}

declare function ShimmerBox<RC extends ReactElement | undefined = undefined>({ sx, ...props }: BoxWithRCAndDomProps<RC>): _emotion_react_jsx_runtime.JSX.Element;

declare function ShimmerCircle<RC extends ReactElement | undefined = undefined>({ sx, radius, ...props }: BoxWithRCAndDomProps<RC> & {
    radius?: string;
}): _emotion_react_jsx_runtime.JSX.Element;

declare function SmartClone({ testId, children, fallBackDomNode, onClick, sx, domRef, rc, ...props }: SmartCloneProps): react.CElement<any, react.Component<any, any, any>> | react.DOMElement<{
    css: {
        filter: csstype.Property.Filter | undefined;
        fill: string | undefined;
        color: csstype.Property.Color | undefined;
        font: csstype.Property.Font | undefined;
        fontWeight: csstype.Property.FontWeight | undefined;
        fontSize: csstype.Property.FontSize<string | number> | undefined;
        lineHeight: csstype.Property.LineHeight<string | number> | undefined;
        letterSpacing: csstype.Property.LetterSpacing<string | number> | undefined;
        borderRadius: csstype.Property.BorderRadius<string | number> | undefined;
        border: csstype.Property.Border<string | number> | undefined;
        motion: csstype.Property.Offset<string | number> | undefined;
        margin: csstype.Property.Margin<string | number> | undefined;
        marginTop: csstype.Property.MarginTop<string | number> | undefined;
        marginRight: csstype.Property.MarginRight<string | number> | undefined;
        marginBottom: csstype.Property.MarginBottom<string | number> | undefined;
        marginLeft: csstype.Property.MarginLeft<string | number> | undefined;
        padding: csstype.Property.Padding<string | number> | undefined;
        paddingTop: csstype.Property.PaddingTop<string | number> | undefined;
        paddingRight: csstype.Property.PaddingRight<string | number> | undefined;
        paddingBottom: csstype.Property.PaddingBottom<string | number> | undefined;
        paddingLeft: csstype.Property.PaddingLeft<string | number> | undefined;
        scrollMargin: csstype.Property.ScrollMargin<string | number> | undefined;
        scrollMarginTop: csstype.Property.ScrollMarginTop<string | number> | undefined;
        scrollMarginRight: csstype.Property.ScrollMarginRight<string | number> | undefined;
        scrollMarginBottom: csstype.Property.ScrollMarginBottom<string | number> | undefined;
        scrollMarginLeft: csstype.Property.ScrollMarginLeft<string | number> | undefined;
        scrollPadding: csstype.Property.ScrollPadding<string | number> | undefined;
        scrollPaddingTop: csstype.Property.ScrollPaddingTop<string | number> | undefined;
        scrollPaddingRight: csstype.Property.ScrollPaddingRight<string | number> | undefined;
        scrollPaddingBottom: csstype.Property.ScrollPaddingBottom<string | number> | undefined;
        scrollPaddingLeft: csstype.Property.ScrollPaddingLeft<string | number> | undefined;
        top: csstype.Property.Top<string | number> | undefined;
        right: csstype.Property.Right<string | number> | undefined;
        bottom: csstype.Property.Bottom<string | number> | undefined;
        left: csstype.Property.Left<string | number> | undefined;
        gridGap: csstype.Property.GridGap<string | number> | undefined;
        gridColumnGap: csstype.Property.GridColumnGap<string | number> | undefined;
        gridRowGap: csstype.Property.GridRowGap<string | number> | undefined;
        gap: csstype.Property.Gap<string | number> | undefined;
        columnGap: csstype.Property.ColumnGap<string | number> | undefined;
        rowGap: csstype.Property.RowGap<string | number> | undefined;
        width: csstype.Property.Width<string | number> | undefined;
        minWidth: csstype.Property.MinWidth<string | number> | undefined;
        maxWidth: csstype.Property.MaxWidth<string | number> | undefined;
        columnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
        height: csstype.Property.Height<string | number> | undefined;
        minHeight: csstype.Property.MinHeight<string | number> | undefined;
        maxHeight: csstype.Property.MaxHeight<string | number> | undefined;
        flexBasis: csstype.Property.FlexBasis<string | number> | undefined;
        background: csstype.Property.Background<string | number> | undefined;
        backgroundColor: csstype.Property.BackgroundColor | undefined;
        borderColor: csstype.Property.BorderColor | undefined;
        caretColor: csstype.Property.CaretColor | undefined;
        outlineColor: csstype.Property.OutlineColor | undefined;
        textDecorationColor: csstype.Property.TextDecorationColor | undefined;
        stroke: csstype.Property.Stroke | undefined;
        borderTopColor: csstype.Property.BorderTopColor | undefined;
        borderRightColor: csstype.Property.BorderRightColor | undefined;
        borderBottomColor: csstype.Property.BorderBottomColor | undefined;
        borderLeftColor: csstype.Property.BorderLeftColor | undefined;
        columnRuleColor: csstype.Property.ColumnRuleColor | undefined;
        backgroundImage: csstype.Property.BackgroundImage | undefined;
        boxShadow: csstype.Property.BoxShadow | undefined;
        textShadow: csstype.Property.TextShadow | undefined;
        borderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
        borderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number> | undefined;
        borderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
        borderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
        fontFamily: csstype.Property.FontFamily | undefined;
        textDecoration: csstype.Property.TextDecoration<string | number> | undefined;
        textTransform: csstype.Property.TextTransform | undefined;
        borderTop: csstype.Property.BorderTop<string | number> | undefined;
        borderRight: csstype.Property.BorderRight<string | number> | undefined;
        borderBottom: csstype.Property.BorderBottom<string | number> | undefined;
        borderLeft: csstype.Property.BorderLeft<string | number> | undefined;
        borderWidth: csstype.Property.BorderWidth<string | number> | undefined;
        borderTopWidth: csstype.Property.BorderTopWidth<string | number> | undefined;
        borderRightWidth: csstype.Property.BorderRightWidth<string | number> | undefined;
        borderBottomWidth: csstype.Property.BorderBottomWidth<string | number> | undefined;
        borderLeftWidth: csstype.Property.BorderLeftWidth<string | number> | undefined;
        transitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
        transitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
        animationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
        animationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
        textFillColor: string | undefined;
        accentColor: csstype.Property.AccentColor | undefined;
        alignContent: csstype.Property.AlignContent | undefined;
        alignItems: csstype.Property.AlignItems | undefined;
        alignSelf: csstype.Property.AlignSelf | undefined;
        alignTracks: csstype.Property.AlignTracks | undefined;
        animationComposition: csstype.Property.AnimationComposition | undefined;
        animationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
        animationDirection: csstype.Property.AnimationDirection | undefined;
        animationFillMode: csstype.Property.AnimationFillMode | undefined;
        animationIterationCount: csstype.Property.AnimationIterationCount | undefined;
        animationName: csstype.Property.AnimationName | undefined;
        animationPlayState: csstype.Property.AnimationPlayState | undefined;
        animationTimeline: csstype.Property.AnimationTimeline | undefined;
        appearance: csstype.Property.Appearance | undefined;
        aspectRatio: csstype.Property.AspectRatio | undefined;
        backdropFilter: csstype.Property.BackdropFilter | undefined;
        backfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
        backgroundAttachment: csstype.Property.BackgroundAttachment | undefined;
        backgroundBlendMode: csstype.Property.BackgroundBlendMode | undefined;
        backgroundClip: csstype.Property.BackgroundClip | undefined;
        backgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
        backgroundPositionX: csstype.Property.BackgroundPositionX<string | number> | undefined;
        backgroundPositionY: csstype.Property.BackgroundPositionY<string | number> | undefined;
        backgroundRepeat: csstype.Property.BackgroundRepeat | undefined;
        backgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
        blockOverflow: csstype.Property.BlockOverflow | undefined;
        blockSize: csstype.Property.BlockSize<string | number> | undefined;
        borderBlockColor: csstype.Property.BorderBlockColor | undefined;
        borderBlockEndColor: csstype.Property.BorderBlockEndColor | undefined;
        borderBlockEndStyle: csstype.Property.BorderBlockEndStyle | undefined;
        borderBlockEndWidth: csstype.Property.BorderBlockEndWidth<string | number> | undefined;
        borderBlockStartColor: csstype.Property.BorderBlockStartColor | undefined;
        borderBlockStartStyle: csstype.Property.BorderBlockStartStyle | undefined;
        borderBlockStartWidth: csstype.Property.BorderBlockStartWidth<string | number> | undefined;
        borderBlockStyle: csstype.Property.BorderBlockStyle | undefined;
        borderBlockWidth: csstype.Property.BorderBlockWidth<string | number> | undefined;
        borderBottomStyle: csstype.Property.BorderBottomStyle | undefined;
        borderCollapse: csstype.Property.BorderCollapse | undefined;
        borderEndEndRadius: csstype.Property.BorderEndEndRadius<string | number> | undefined;
        borderEndStartRadius: csstype.Property.BorderEndStartRadius<string | number> | undefined;
        borderImageOutset: csstype.Property.BorderImageOutset<string | number> | undefined;
        borderImageRepeat: csstype.Property.BorderImageRepeat | undefined;
        borderImageSlice: csstype.Property.BorderImageSlice | undefined;
        borderImageSource: csstype.Property.BorderImageSource | undefined;
        borderImageWidth: csstype.Property.BorderImageWidth<string | number> | undefined;
        borderInlineColor: csstype.Property.BorderInlineColor | undefined;
        borderInlineEndColor: csstype.Property.BorderInlineEndColor | undefined;
        borderInlineEndStyle: csstype.Property.BorderInlineEndStyle | undefined;
        borderInlineEndWidth: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
        borderInlineStartColor: csstype.Property.BorderInlineStartColor | undefined;
        borderInlineStartStyle: csstype.Property.BorderInlineStartStyle | undefined;
        borderInlineStartWidth: csstype.Property.BorderInlineStartWidth<string | number> | undefined;
        borderInlineStyle: csstype.Property.BorderInlineStyle | undefined;
        borderInlineWidth: csstype.Property.BorderInlineWidth<string | number> | undefined;
        borderLeftStyle: csstype.Property.BorderLeftStyle | undefined;
        borderRightStyle: csstype.Property.BorderRightStyle | undefined;
        borderSpacing: csstype.Property.BorderSpacing<string | number> | undefined;
        borderStartEndRadius: csstype.Property.BorderStartEndRadius<string | number> | undefined;
        borderStartStartRadius: csstype.Property.BorderStartStartRadius<string | number> | undefined;
        borderTopStyle: csstype.Property.BorderTopStyle | undefined;
        boxDecorationBreak: csstype.Property.BoxDecorationBreak | undefined;
        boxSizing: csstype.Property.BoxSizing | undefined;
        breakAfter: csstype.Property.BreakAfter | undefined;
        breakBefore: csstype.Property.BreakBefore | undefined;
        breakInside: csstype.Property.BreakInside | undefined;
        captionSide: csstype.Property.CaptionSide | undefined;
        caretShape: csstype.Property.CaretShape | undefined;
        clear: csstype.Property.Clear | undefined;
        clipPath: csstype.Property.ClipPath | undefined;
        colorAdjust: csstype.Property.PrintColorAdjust | undefined;
        colorScheme: csstype.Property.ColorScheme | undefined;
        columnCount: csstype.Property.ColumnCount | undefined;
        columnFill: csstype.Property.ColumnFill | undefined;
        columnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
        columnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
        columnSpan: csstype.Property.ColumnSpan | undefined;
        contain: csstype.Property.Contain | undefined;
        containIntrinsicBlockSize: csstype.Property.ContainIntrinsicBlockSize<string | number> | undefined;
        containIntrinsicHeight: csstype.Property.ContainIntrinsicHeight<string | number> | undefined;
        containIntrinsicInlineSize: csstype.Property.ContainIntrinsicInlineSize<string | number> | undefined;
        containIntrinsicWidth: csstype.Property.ContainIntrinsicWidth<string | number> | undefined;
        containerName: csstype.Property.ContainerName | undefined;
        containerType: csstype.Property.ContainerType | undefined;
        content: csstype.Property.Content | undefined;
        contentVisibility: csstype.Property.ContentVisibility | undefined;
        counterIncrement: csstype.Property.CounterIncrement | undefined;
        counterReset: csstype.Property.CounterReset | undefined;
        counterSet: csstype.Property.CounterSet | undefined;
        cursor: csstype.Property.Cursor | undefined;
        direction: csstype.Property.Direction | undefined;
        display: csstype.Property.Display | undefined;
        emptyCells: csstype.Property.EmptyCells | undefined;
        flexDirection: csstype.Property.FlexDirection | undefined;
        flexGrow: csstype.Property.FlexGrow | undefined;
        flexShrink: csstype.Property.FlexShrink | undefined;
        flexWrap: csstype.Property.FlexWrap | undefined;
        float: csstype.Property.Float | undefined;
        fontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
        fontKerning: csstype.Property.FontKerning | undefined;
        fontLanguageOverride: csstype.Property.FontLanguageOverride | undefined;
        fontOpticalSizing: csstype.Property.FontOpticalSizing | undefined;
        fontPalette: csstype.Property.FontPalette | undefined;
        fontSizeAdjust: csstype.Property.FontSizeAdjust | undefined;
        fontSmooth: csstype.Property.FontSmooth<string | number> | undefined;
        fontStretch: csstype.Property.FontStretch | undefined;
        fontStyle: csstype.Property.FontStyle | undefined;
        fontSynthesis: csstype.Property.FontSynthesis | undefined;
        fontVariant: csstype.Property.FontVariant | undefined;
        fontVariantAlternates: csstype.Property.FontVariantAlternates | undefined;
        fontVariantCaps: csstype.Property.FontVariantCaps | undefined;
        fontVariantEastAsian: csstype.Property.FontVariantEastAsian | undefined;
        fontVariantEmoji: csstype.Property.FontVariantEmoji | undefined;
        fontVariantLigatures: csstype.Property.FontVariantLigatures | undefined;
        fontVariantNumeric: csstype.Property.FontVariantNumeric | undefined;
        fontVariantPosition: csstype.Property.FontVariantPosition | undefined;
        fontVariationSettings: csstype.Property.FontVariationSettings | undefined;
        forcedColorAdjust: csstype.Property.ForcedColorAdjust | undefined;
        gridAutoColumns: csstype.Property.GridAutoColumns<string | number> | undefined;
        gridAutoFlow: csstype.Property.GridAutoFlow | undefined;
        gridAutoRows: csstype.Property.GridAutoRows<string | number> | undefined;
        gridColumnEnd: csstype.Property.GridColumnEnd | undefined;
        gridColumnStart: csstype.Property.GridColumnStart | undefined;
        gridRowEnd: csstype.Property.GridRowEnd | undefined;
        gridRowStart: csstype.Property.GridRowStart | undefined;
        gridTemplateAreas: csstype.Property.GridTemplateAreas | undefined;
        gridTemplateColumns: csstype.Property.GridTemplateColumns<string | number> | undefined;
        gridTemplateRows: csstype.Property.GridTemplateRows<string | number> | undefined;
        hangingPunctuation: csstype.Property.HangingPunctuation | undefined;
        hyphenateCharacter: csstype.Property.HyphenateCharacter | undefined;
        hyphenateLimitChars: csstype.Property.HyphenateLimitChars | undefined;
        hyphens: csstype.Property.Hyphens | undefined;
        imageOrientation: csstype.Property.ImageOrientation | undefined;
        imageRendering: csstype.Property.ImageRendering | undefined;
        imageResolution: csstype.Property.ImageResolution | undefined;
        initialLetter: csstype.Property.InitialLetter | undefined;
        inlineSize: csstype.Property.InlineSize<string | number> | undefined;
        inputSecurity: csstype.Property.InputSecurity | undefined;
        insetBlockEnd: csstype.Property.InsetBlockEnd<string | number> | undefined;
        insetBlockStart: csstype.Property.InsetBlockStart<string | number> | undefined;
        insetInlineEnd: csstype.Property.InsetInlineEnd<string | number> | undefined;
        insetInlineStart: csstype.Property.InsetInlineStart<string | number> | undefined;
        isolation: csstype.Property.Isolation | undefined;
        justifyContent: csstype.Property.JustifyContent | undefined;
        justifyItems: csstype.Property.JustifyItems | undefined;
        justifySelf: csstype.Property.JustifySelf | undefined;
        justifyTracks: csstype.Property.JustifyTracks | undefined;
        lineBreak: csstype.Property.LineBreak | undefined;
        lineHeightStep: csstype.Property.LineHeightStep<string | number> | undefined;
        listStyleImage: csstype.Property.ListStyleImage | undefined;
        listStylePosition: csstype.Property.ListStylePosition | undefined;
        listStyleType: csstype.Property.ListStyleType | undefined;
        marginBlockEnd: csstype.Property.MarginBlockEnd<string | number> | undefined;
        marginBlockStart: csstype.Property.MarginBlockStart<string | number> | undefined;
        marginInlineEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
        marginInlineStart: csstype.Property.MarginInlineStart<string | number> | undefined;
        marginTrim: csstype.Property.MarginTrim | undefined;
        maskBorderMode: csstype.Property.MaskBorderMode | undefined;
        maskBorderOutset: csstype.Property.MaskBorderOutset<string | number> | undefined;
        maskBorderRepeat: csstype.Property.MaskBorderRepeat | undefined;
        maskBorderSlice: csstype.Property.MaskBorderSlice | undefined;
        maskBorderSource: csstype.Property.MaskBorderSource | undefined;
        maskBorderWidth: csstype.Property.MaskBorderWidth<string | number> | undefined;
        maskClip: csstype.Property.MaskClip | undefined;
        maskComposite: csstype.Property.MaskComposite | undefined;
        maskImage: csstype.Property.MaskImage | undefined;
        maskMode: csstype.Property.MaskMode | undefined;
        maskOrigin: csstype.Property.MaskOrigin | undefined;
        maskPosition: csstype.Property.MaskPosition<string | number> | undefined;
        maskRepeat: csstype.Property.MaskRepeat | undefined;
        maskSize: csstype.Property.MaskSize<string | number> | undefined;
        maskType: csstype.Property.MaskType | undefined;
        mathDepth: csstype.Property.MathDepth | undefined;
        mathShift: csstype.Property.MathShift | undefined;
        mathStyle: csstype.Property.MathStyle | undefined;
        maxBlockSize: csstype.Property.MaxBlockSize<string | number> | undefined;
        maxInlineSize: csstype.Property.MaxInlineSize<string | number> | undefined;
        maxLines: csstype.Property.MaxLines | undefined;
        minBlockSize: csstype.Property.MinBlockSize<string | number> | undefined;
        minInlineSize: csstype.Property.MinInlineSize<string | number> | undefined;
        mixBlendMode: csstype.Property.MixBlendMode | undefined;
        motionDistance: csstype.Property.OffsetDistance<string | number> | undefined;
        motionPath: csstype.Property.OffsetPath | undefined;
        motionRotation: csstype.Property.OffsetRotate | undefined;
        objectFit: csstype.Property.ObjectFit | undefined;
        objectPosition: csstype.Property.ObjectPosition<string | number> | undefined;
        offsetAnchor: csstype.Property.OffsetAnchor<string | number> | undefined;
        offsetDistance: csstype.Property.OffsetDistance<string | number> | undefined;
        offsetPath: csstype.Property.OffsetPath | undefined;
        offsetPosition: csstype.Property.OffsetPosition<string | number> | undefined;
        offsetRotate: csstype.Property.OffsetRotate | undefined;
        offsetRotation: csstype.Property.OffsetRotate | undefined;
        opacity: csstype.Property.Opacity | undefined;
        order: csstype.Property.Order | undefined;
        orphans: csstype.Property.Orphans | undefined;
        outlineOffset: csstype.Property.OutlineOffset<string | number> | undefined;
        outlineStyle: csstype.Property.OutlineStyle | undefined;
        outlineWidth: csstype.Property.OutlineWidth<string | number> | undefined;
        overflowAnchor: csstype.Property.OverflowAnchor | undefined;
        overflowBlock: csstype.Property.OverflowBlock | undefined;
        overflowClipBox: csstype.Property.OverflowClipBox | undefined;
        overflowClipMargin: csstype.Property.OverflowClipMargin<string | number> | undefined;
        overflowInline: csstype.Property.OverflowInline | undefined;
        overflowWrap: csstype.Property.OverflowWrap | undefined;
        overflowX: csstype.Property.OverflowX | undefined;
        overflowY: csstype.Property.OverflowY | undefined;
        overscrollBehaviorBlock: csstype.Property.OverscrollBehaviorBlock | undefined;
        overscrollBehaviorInline: csstype.Property.OverscrollBehaviorInline | undefined;
        overscrollBehaviorX: csstype.Property.OverscrollBehaviorX | undefined;
        overscrollBehaviorY: csstype.Property.OverscrollBehaviorY | undefined;
        paddingBlockEnd: csstype.Property.PaddingBlockEnd<string | number> | undefined;
        paddingBlockStart: csstype.Property.PaddingBlockStart<string | number> | undefined;
        paddingInlineEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
        paddingInlineStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
        page: csstype.Property.Page | undefined;
        pageBreakAfter: csstype.Property.PageBreakAfter | undefined;
        pageBreakBefore: csstype.Property.PageBreakBefore | undefined;
        pageBreakInside: csstype.Property.PageBreakInside | undefined;
        paintOrder: csstype.Property.PaintOrder | undefined;
        perspective: csstype.Property.Perspective<string | number> | undefined;
        perspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
        pointerEvents: csstype.Property.PointerEvents | undefined;
        position: csstype.Property.Position | undefined;
        printColorAdjust: csstype.Property.PrintColorAdjust | undefined;
        quotes: csstype.Property.Quotes | undefined;
        resize: csstype.Property.Resize | undefined;
        rotate: csstype.Property.Rotate | undefined;
        rubyAlign: csstype.Property.RubyAlign | undefined;
        rubyMerge: csstype.Property.RubyMerge | undefined;
        rubyPosition: csstype.Property.RubyPosition | undefined;
        scale: csstype.Property.Scale | undefined;
        scrollBehavior: csstype.Property.ScrollBehavior | undefined;
        scrollMarginBlockEnd: csstype.Property.ScrollMarginBlockEnd<string | number> | undefined;
        scrollMarginBlockStart: csstype.Property.ScrollMarginBlockStart<string | number> | undefined;
        scrollMarginInlineEnd: csstype.Property.ScrollMarginInlineEnd<string | number> | undefined;
        scrollMarginInlineStart: csstype.Property.ScrollMarginInlineStart<string | number> | undefined;
        scrollPaddingBlockEnd: csstype.Property.ScrollPaddingBlockEnd<string | number> | undefined;
        scrollPaddingBlockStart: csstype.Property.ScrollPaddingBlockStart<string | number> | undefined;
        scrollPaddingInlineEnd: csstype.Property.ScrollPaddingInlineEnd<string | number> | undefined;
        scrollPaddingInlineStart: csstype.Property.ScrollPaddingInlineStart<string | number> | undefined;
        scrollSnapAlign: csstype.Property.ScrollSnapAlign | undefined;
        scrollSnapMarginBottom: csstype.Property.ScrollMarginBottom<string | number> | undefined;
        scrollSnapMarginLeft: csstype.Property.ScrollMarginLeft<string | number> | undefined;
        scrollSnapMarginRight: csstype.Property.ScrollMarginRight<string | number> | undefined;
        scrollSnapMarginTop: csstype.Property.ScrollMarginTop<string | number> | undefined;
        scrollSnapStop: csstype.Property.ScrollSnapStop | undefined;
        scrollSnapType: csstype.Property.ScrollSnapType | undefined;
        scrollTimelineAxis: csstype.Property.ScrollTimelineAxis | undefined;
        scrollTimelineName: csstype.Property.ScrollTimelineName | undefined;
        scrollbarColor: csstype.Property.ScrollbarColor | undefined;
        scrollbarGutter: csstype.Property.ScrollbarGutter | undefined;
        scrollbarWidth: csstype.Property.ScrollbarWidth | undefined;
        shapeImageThreshold: csstype.Property.ShapeImageThreshold | undefined;
        shapeMargin: csstype.Property.ShapeMargin<string | number> | undefined;
        shapeOutside: csstype.Property.ShapeOutside | undefined;
        tabSize: csstype.Property.TabSize<string | number> | undefined;
        tableLayout: csstype.Property.TableLayout | undefined;
        textAlign: csstype.Property.TextAlign | undefined;
        textAlignLast: csstype.Property.TextAlignLast | undefined;
        textCombineUpright: csstype.Property.TextCombineUpright | undefined;
        textDecorationLine: csstype.Property.TextDecorationLine | undefined;
        textDecorationSkip: csstype.Property.TextDecorationSkip | undefined;
        textDecorationSkipInk: csstype.Property.TextDecorationSkipInk | undefined;
        textDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
        textDecorationThickness: csstype.Property.TextDecorationThickness<string | number> | undefined;
        textEmphasisColor: csstype.Property.TextEmphasisColor | undefined;
        textEmphasisPosition: csstype.Property.TextEmphasisPosition | undefined;
        textEmphasisStyle: csstype.Property.TextEmphasisStyle | undefined;
        textIndent: csstype.Property.TextIndent<string | number> | undefined;
        textJustify: csstype.Property.TextJustify | undefined;
        textOrientation: csstype.Property.TextOrientation | undefined;
        textOverflow: csstype.Property.TextOverflow | undefined;
        textRendering: csstype.Property.TextRendering | undefined;
        textSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
        textUnderlineOffset: csstype.Property.TextUnderlineOffset<string | number> | undefined;
        textUnderlinePosition: csstype.Property.TextUnderlinePosition | undefined;
        touchAction: csstype.Property.TouchAction | undefined;
        transform: csstype.Property.Transform | undefined;
        transformBox: csstype.Property.TransformBox | undefined;
        transformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
        transformStyle: csstype.Property.TransformStyle | undefined;
        transitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
        transitionProperty: csstype.Property.TransitionProperty | undefined;
        translate: csstype.Property.Translate<string | number> | undefined;
        unicodeBidi: csstype.Property.UnicodeBidi | undefined;
        userSelect: csstype.Property.UserSelect | undefined;
        verticalAlign: csstype.Property.VerticalAlign<string | number> | undefined;
        viewTransitionName: csstype.Property.ViewTransitionName | undefined;
        visibility: csstype.Property.Visibility | undefined;
        whiteSpace: csstype.Property.WhiteSpace | undefined;
        widows: csstype.Property.Widows | undefined;
        willChange: csstype.Property.WillChange | undefined;
        wordBreak: csstype.Property.WordBreak | undefined;
        wordSpacing: csstype.Property.WordSpacing<string | number> | undefined;
        wordWrap: csstype.Property.WordWrap | undefined;
        writingMode: csstype.Property.WritingMode | undefined;
        zIndex: csstype.Property.ZIndex | undefined;
        zoom: csstype.Property.Zoom | undefined;
        all: csstype.Globals | undefined;
        animation: csstype.Property.Animation<string & {}> | undefined;
        backgroundPosition: csstype.Property.BackgroundPosition<string | number> | undefined;
        borderBlock: csstype.Property.BorderBlock<string | number> | undefined;
        borderBlockEnd: csstype.Property.BorderBlockEnd<string | number> | undefined;
        borderBlockStart: csstype.Property.BorderBlockStart<string | number> | undefined;
        borderImage: csstype.Property.BorderImage | undefined;
        borderInline: csstype.Property.BorderInline<string | number> | undefined;
        borderInlineEnd: csstype.Property.BorderInlineEnd<string | number> | undefined;
        borderInlineStart: csstype.Property.BorderInlineStart<string | number> | undefined;
        borderStyle: csstype.Property.BorderStyle | undefined;
        caret: csstype.Property.Caret | undefined;
        columnRule: csstype.Property.ColumnRule<string | number> | undefined;
        columns: csstype.Property.Columns<string | number> | undefined;
        containIntrinsicSize: csstype.Property.ContainIntrinsicSize<string | number> | undefined;
        container: csstype.Property.Container | undefined;
        flex: csstype.Property.Flex<string | number> | undefined;
        flexFlow: csstype.Property.FlexFlow | undefined;
        grid: csstype.Property.Grid | undefined;
        gridArea: csstype.Property.GridArea | undefined;
        gridColumn: csstype.Property.GridColumn | undefined;
        gridRow: csstype.Property.GridRow | undefined;
        gridTemplate: csstype.Property.GridTemplate | undefined;
        inset: csstype.Property.Inset<string | number> | undefined;
        insetBlock: csstype.Property.InsetBlock<string | number> | undefined;
        insetInline: csstype.Property.InsetInline<string | number> | undefined;
        lineClamp: csstype.Property.LineClamp | undefined;
        listStyle: csstype.Property.ListStyle | undefined;
        marginBlock: csstype.Property.MarginBlock<string | number> | undefined;
        marginInline: csstype.Property.MarginInline<string | number> | undefined;
        mask: csstype.Property.Mask<string | number> | undefined;
        maskBorder: csstype.Property.MaskBorder | undefined;
        offset: csstype.Property.Offset<string | number> | undefined;
        outline: csstype.Property.Outline<string | number> | undefined;
        overflow: csstype.Property.Overflow | undefined;
        overscrollBehavior: csstype.Property.OverscrollBehavior | undefined;
        paddingBlock: csstype.Property.PaddingBlock<string | number> | undefined;
        paddingInline: csstype.Property.PaddingInline<string | number> | undefined;
        placeContent: csstype.Property.PlaceContent | undefined;
        placeItems: csstype.Property.PlaceItems | undefined;
        placeSelf: csstype.Property.PlaceSelf | undefined;
        scrollMarginBlock: csstype.Property.ScrollMarginBlock<string | number> | undefined;
        scrollMarginInline: csstype.Property.ScrollMarginInline<string | number> | undefined;
        scrollPaddingBlock: csstype.Property.ScrollPaddingBlock<string | number> | undefined;
        scrollPaddingInline: csstype.Property.ScrollPaddingInline<string | number> | undefined;
        scrollSnapMargin: csstype.Property.ScrollMargin<string | number> | undefined;
        scrollTimeline: csstype.Property.ScrollTimeline | undefined;
        textEmphasis: csstype.Property.TextEmphasis | undefined;
        transition: csstype.Property.Transition<string & {}> | undefined;
        MozAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
        MozAnimationDirection: csstype.Property.AnimationDirection | undefined;
        MozAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
        MozAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
        MozAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
        MozAnimationName: csstype.Property.AnimationName | undefined;
        MozAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
        MozAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
        MozAppearance: csstype.Property.MozAppearance | undefined;
        MozBackfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
        MozBinding: csstype.Property.MozBinding | undefined;
        MozBorderBottomColors: csstype.Property.MozBorderBottomColors | undefined;
        MozBorderEndColor: csstype.Property.BorderInlineEndColor | undefined;
        MozBorderEndStyle: csstype.Property.BorderInlineEndStyle | undefined;
        MozBorderEndWidth: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
        MozBorderLeftColors: csstype.Property.MozBorderLeftColors | undefined;
        MozBorderRightColors: csstype.Property.MozBorderRightColors | undefined;
        MozBorderStartColor: csstype.Property.BorderInlineStartColor | undefined;
        MozBorderStartStyle: csstype.Property.BorderInlineStartStyle | undefined;
        MozBorderTopColors: csstype.Property.MozBorderTopColors | undefined;
        MozBoxSizing: csstype.Property.BoxSizing | undefined;
        MozColumnCount: csstype.Property.ColumnCount | undefined;
        MozColumnFill: csstype.Property.ColumnFill | undefined;
        MozColumnRuleColor: csstype.Property.ColumnRuleColor | undefined;
        MozColumnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
        MozColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
        MozColumnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
        MozContextProperties: csstype.Property.MozContextProperties | undefined;
        MozFontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
        MozFontLanguageOverride: csstype.Property.FontLanguageOverride | undefined;
        MozHyphens: csstype.Property.Hyphens | undefined;
        MozImageRegion: csstype.Property.MozImageRegion | undefined;
        MozMarginEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
        MozMarginStart: csstype.Property.MarginInlineStart<string | number> | undefined;
        MozOrient: csstype.Property.MozOrient | undefined;
        MozOsxFontSmoothing: csstype.Property.FontSmooth<string | number> | undefined;
        MozPaddingEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
        MozPaddingStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
        MozPerspective: csstype.Property.Perspective<string | number> | undefined;
        MozPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
        MozStackSizing: csstype.Property.MozStackSizing | undefined;
        MozTabSize: csstype.Property.TabSize<string | number> | undefined;
        MozTextBlink: csstype.Property.MozTextBlink | undefined;
        MozTextSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
        MozTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
        MozTransformStyle: csstype.Property.TransformStyle | undefined;
        MozTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
        MozTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
        MozTransitionProperty: csstype.Property.TransitionProperty | undefined;
        MozTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
        MozUserFocus: csstype.Property.MozUserFocus | undefined;
        MozUserModify: csstype.Property.MozUserModify | undefined;
        MozUserSelect: csstype.Property.UserSelect | undefined;
        MozWindowDragging: csstype.Property.MozWindowDragging | undefined;
        MozWindowShadow: csstype.Property.MozWindowShadow | undefined;
        msAccelerator: csstype.Property.MsAccelerator | undefined;
        msBlockProgression: csstype.Property.MsBlockProgression | undefined;
        msContentZoomChaining: csstype.Property.MsContentZoomChaining | undefined;
        msContentZoomLimitMax: csstype.Property.MsContentZoomLimitMax | undefined;
        msContentZoomLimitMin: csstype.Property.MsContentZoomLimitMin | undefined;
        msContentZoomSnapPoints: csstype.Property.MsContentZoomSnapPoints | undefined;
        msContentZoomSnapType: csstype.Property.MsContentZoomSnapType | undefined;
        msContentZooming: csstype.Property.MsContentZooming | undefined;
        msFilter: csstype.Property.MsFilter | undefined;
        msFlexDirection: csstype.Property.FlexDirection | undefined;
        msFlexPositive: csstype.Property.FlexGrow | undefined;
        msFlowFrom: csstype.Property.MsFlowFrom | undefined;
        msFlowInto: csstype.Property.MsFlowInto | undefined;
        msGridColumns: csstype.Property.MsGridColumns<string | number> | undefined;
        msGridRows: csstype.Property.MsGridRows<string | number> | undefined;
        msHighContrastAdjust: csstype.Property.MsHighContrastAdjust | undefined;
        msHyphenateLimitChars: csstype.Property.MsHyphenateLimitChars | undefined;
        msHyphenateLimitLines: csstype.Property.MsHyphenateLimitLines | undefined;
        msHyphenateLimitZone: csstype.Property.MsHyphenateLimitZone<string | number> | undefined;
        msHyphens: csstype.Property.Hyphens | undefined;
        msImeAlign: csstype.Property.MsImeAlign | undefined;
        msLineBreak: csstype.Property.LineBreak | undefined;
        msOrder: csstype.Property.Order | undefined;
        msOverflowStyle: csstype.Property.MsOverflowStyle | undefined;
        msOverflowX: csstype.Property.OverflowX | undefined;
        msOverflowY: csstype.Property.OverflowY | undefined;
        msScrollChaining: csstype.Property.MsScrollChaining | undefined;
        msScrollLimitXMax: csstype.Property.MsScrollLimitXMax<string | number> | undefined;
        msScrollLimitXMin: csstype.Property.MsScrollLimitXMin<string | number> | undefined;
        msScrollLimitYMax: csstype.Property.MsScrollLimitYMax<string | number> | undefined;
        msScrollLimitYMin: csstype.Property.MsScrollLimitYMin<string | number> | undefined;
        msScrollRails: csstype.Property.MsScrollRails | undefined;
        msScrollSnapPointsX: csstype.Property.MsScrollSnapPointsX | undefined;
        msScrollSnapPointsY: csstype.Property.MsScrollSnapPointsY | undefined;
        msScrollSnapType: csstype.Property.MsScrollSnapType | undefined;
        msScrollTranslation: csstype.Property.MsScrollTranslation | undefined;
        msScrollbar3dlightColor: csstype.Property.MsScrollbar3dlightColor | undefined;
        msScrollbarArrowColor: csstype.Property.MsScrollbarArrowColor | undefined;
        msScrollbarBaseColor: csstype.Property.MsScrollbarBaseColor | undefined;
        msScrollbarDarkshadowColor: csstype.Property.MsScrollbarDarkshadowColor | undefined;
        msScrollbarFaceColor: csstype.Property.MsScrollbarFaceColor | undefined;
        msScrollbarHighlightColor: csstype.Property.MsScrollbarHighlightColor | undefined;
        msScrollbarShadowColor: csstype.Property.MsScrollbarShadowColor | undefined;
        msScrollbarTrackColor: csstype.Property.MsScrollbarTrackColor | undefined;
        msTextAutospace: csstype.Property.MsTextAutospace | undefined;
        msTextCombineHorizontal: csstype.Property.TextCombineUpright | undefined;
        msTextOverflow: csstype.Property.TextOverflow | undefined;
        msTouchAction: csstype.Property.TouchAction | undefined;
        msTouchSelect: csstype.Property.MsTouchSelect | undefined;
        msTransform: csstype.Property.Transform | undefined;
        msTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
        msTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
        msTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
        msTransitionProperty: csstype.Property.TransitionProperty | undefined;
        msTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
        msUserSelect: csstype.Property.MsUserSelect | undefined;
        msWordBreak: csstype.Property.WordBreak | undefined;
        msWrapFlow: csstype.Property.MsWrapFlow | undefined;
        msWrapMargin: csstype.Property.MsWrapMargin<string | number> | undefined;
        msWrapThrough: csstype.Property.MsWrapThrough | undefined;
        msWritingMode: csstype.Property.WritingMode | undefined;
        WebkitAlignContent: csstype.Property.AlignContent | undefined;
        WebkitAlignItems: csstype.Property.AlignItems | undefined;
        WebkitAlignSelf: csstype.Property.AlignSelf | undefined;
        WebkitAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
        WebkitAnimationDirection: csstype.Property.AnimationDirection | undefined;
        WebkitAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
        WebkitAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
        WebkitAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
        WebkitAnimationName: csstype.Property.AnimationName | undefined;
        WebkitAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
        WebkitAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
        WebkitAppearance: csstype.Property.WebkitAppearance | undefined;
        WebkitBackdropFilter: csstype.Property.BackdropFilter | undefined;
        WebkitBackfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
        WebkitBackgroundClip: csstype.Property.BackgroundClip | undefined;
        WebkitBackgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
        WebkitBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
        WebkitBorderBeforeColor: csstype.Property.WebkitBorderBeforeColor | undefined;
        WebkitBorderBeforeStyle: csstype.Property.WebkitBorderBeforeStyle | undefined;
        WebkitBorderBeforeWidth: csstype.Property.WebkitBorderBeforeWidth<string | number> | undefined;
        WebkitBorderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
        WebkitBorderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
        WebkitBorderImageSlice: csstype.Property.BorderImageSlice | undefined;
        WebkitBorderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
        WebkitBorderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number> | undefined;
        WebkitBoxDecorationBreak: csstype.Property.BoxDecorationBreak | undefined;
        WebkitBoxReflect: csstype.Property.WebkitBoxReflect<string | number> | undefined;
        WebkitBoxShadow: csstype.Property.BoxShadow | undefined;
        WebkitBoxSizing: csstype.Property.BoxSizing | undefined;
        WebkitClipPath: csstype.Property.ClipPath | undefined;
        WebkitColumnCount: csstype.Property.ColumnCount | undefined;
        WebkitColumnFill: csstype.Property.ColumnFill | undefined;
        WebkitColumnRuleColor: csstype.Property.ColumnRuleColor | undefined;
        WebkitColumnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
        WebkitColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
        WebkitColumnSpan: csstype.Property.ColumnSpan | undefined;
        WebkitColumnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
        WebkitFilter: csstype.Property.Filter | undefined;
        WebkitFlexBasis: csstype.Property.FlexBasis<string | number> | undefined;
        WebkitFlexDirection: csstype.Property.FlexDirection | undefined;
        WebkitFlexGrow: csstype.Property.FlexGrow | undefined;
        WebkitFlexShrink: csstype.Property.FlexShrink | undefined;
        WebkitFlexWrap: csstype.Property.FlexWrap | undefined;
        WebkitFontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
        WebkitFontKerning: csstype.Property.FontKerning | undefined;
        WebkitFontSmoothing: csstype.Property.FontSmooth<string | number> | undefined;
        WebkitFontVariantLigatures: csstype.Property.FontVariantLigatures | undefined;
        WebkitHyphenateCharacter: csstype.Property.HyphenateCharacter | undefined;
        WebkitHyphens: csstype.Property.Hyphens | undefined;
        WebkitInitialLetter: csstype.Property.InitialLetter | undefined;
        WebkitJustifyContent: csstype.Property.JustifyContent | undefined;
        WebkitLineBreak: csstype.Property.LineBreak | undefined;
        WebkitLineClamp: csstype.Property.WebkitLineClamp | undefined;
        WebkitMarginEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
        WebkitMarginStart: csstype.Property.MarginInlineStart<string | number> | undefined;
        WebkitMaskAttachment: csstype.Property.WebkitMaskAttachment | undefined;
        WebkitMaskBoxImageOutset: csstype.Property.MaskBorderOutset<string | number> | undefined;
        WebkitMaskBoxImageRepeat: csstype.Property.MaskBorderRepeat | undefined;
        WebkitMaskBoxImageSlice: csstype.Property.MaskBorderSlice | undefined;
        WebkitMaskBoxImageSource: csstype.Property.MaskBorderSource | undefined;
        WebkitMaskBoxImageWidth: csstype.Property.MaskBorderWidth<string | number> | undefined;
        WebkitMaskClip: csstype.Property.WebkitMaskClip | undefined;
        WebkitMaskComposite: csstype.Property.WebkitMaskComposite | undefined;
        WebkitMaskImage: csstype.Property.WebkitMaskImage | undefined;
        WebkitMaskOrigin: csstype.Property.WebkitMaskOrigin | undefined;
        WebkitMaskPosition: csstype.Property.WebkitMaskPosition<string | number> | undefined;
        WebkitMaskPositionX: csstype.Property.WebkitMaskPositionX<string | number> | undefined;
        WebkitMaskPositionY: csstype.Property.WebkitMaskPositionY<string | number> | undefined;
        WebkitMaskRepeat: csstype.Property.WebkitMaskRepeat | undefined;
        WebkitMaskRepeatX: csstype.Property.WebkitMaskRepeatX | undefined;
        WebkitMaskRepeatY: csstype.Property.WebkitMaskRepeatY | undefined;
        WebkitMaskSize: csstype.Property.WebkitMaskSize<string | number> | undefined;
        WebkitMaxInlineSize: csstype.Property.MaxInlineSize<string | number> | undefined;
        WebkitOrder: csstype.Property.Order | undefined;
        WebkitOverflowScrolling: csstype.Property.WebkitOverflowScrolling | undefined;
        WebkitPaddingEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
        WebkitPaddingStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
        WebkitPerspective: csstype.Property.Perspective<string | number> | undefined;
        WebkitPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
        WebkitPrintColorAdjust: csstype.Property.PrintColorAdjust | undefined;
        WebkitRubyPosition: csstype.Property.RubyPosition | undefined;
        WebkitScrollSnapType: csstype.Property.ScrollSnapType | undefined;
        WebkitShapeMargin: csstype.Property.ShapeMargin<string | number> | undefined;
        WebkitTapHighlightColor: csstype.Property.WebkitTapHighlightColor | undefined;
        WebkitTextCombine: csstype.Property.TextCombineUpright | undefined;
        WebkitTextDecorationColor: csstype.Property.TextDecorationColor | undefined;
        WebkitTextDecorationLine: csstype.Property.TextDecorationLine | undefined;
        WebkitTextDecorationSkip: csstype.Property.TextDecorationSkip | undefined;
        WebkitTextDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
        WebkitTextEmphasisColor: csstype.Property.TextEmphasisColor | undefined;
        WebkitTextEmphasisPosition: csstype.Property.TextEmphasisPosition | undefined;
        WebkitTextEmphasisStyle: csstype.Property.TextEmphasisStyle | undefined;
        WebkitTextFillColor: csstype.Property.WebkitTextFillColor | undefined;
        WebkitTextOrientation: csstype.Property.TextOrientation | undefined;
        WebkitTextSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
        WebkitTextStrokeColor: csstype.Property.WebkitTextStrokeColor | undefined;
        WebkitTextStrokeWidth: csstype.Property.WebkitTextStrokeWidth<string | number> | undefined;
        WebkitTextUnderlinePosition: csstype.Property.TextUnderlinePosition | undefined;
        WebkitTouchCallout: csstype.Property.WebkitTouchCallout | undefined;
        WebkitTransform: csstype.Property.Transform | undefined;
        WebkitTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
        WebkitTransformStyle: csstype.Property.TransformStyle | undefined;
        WebkitTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
        WebkitTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
        WebkitTransitionProperty: csstype.Property.TransitionProperty | undefined;
        WebkitTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
        WebkitUserModify: csstype.Property.WebkitUserModify | undefined;
        WebkitUserSelect: csstype.Property.UserSelect | undefined;
        WebkitWritingMode: csstype.Property.WritingMode | undefined;
        MozAnimation: csstype.Property.Animation<string & {}> | undefined;
        MozBorderImage: csstype.Property.BorderImage | undefined;
        MozColumnRule: csstype.Property.ColumnRule<string | number> | undefined;
        MozColumns: csstype.Property.Columns<string | number> | undefined;
        MozTransition: csstype.Property.Transition<string & {}> | undefined;
        msContentZoomLimit: csstype.Property.MsContentZoomLimit | undefined;
        msContentZoomSnap: csstype.Property.MsContentZoomSnap | undefined;
        msFlex: csstype.Property.Flex<string | number> | undefined;
        msScrollLimit: csstype.Property.MsScrollLimit | undefined;
        msScrollSnapX: csstype.Property.MsScrollSnapX | undefined;
        msScrollSnapY: csstype.Property.MsScrollSnapY | undefined;
        msTransition: csstype.Property.Transition<string & {}> | undefined;
        WebkitAnimation: csstype.Property.Animation<string & {}> | undefined;
        WebkitBorderBefore: csstype.Property.WebkitBorderBefore<string | number> | undefined;
        WebkitBorderImage: csstype.Property.BorderImage | undefined;
        WebkitBorderRadius: csstype.Property.BorderRadius<string | number> | undefined;
        WebkitColumnRule: csstype.Property.ColumnRule<string | number> | undefined;
        WebkitColumns: csstype.Property.Columns<string | number> | undefined;
        WebkitFlex: csstype.Property.Flex<string | number> | undefined;
        WebkitFlexFlow: csstype.Property.FlexFlow | undefined;
        WebkitMask: csstype.Property.WebkitMask<string | number> | undefined;
        WebkitMaskBoxImage: csstype.Property.MaskBorder | undefined;
        WebkitTextEmphasis: csstype.Property.TextEmphasis | undefined;
        WebkitTextStroke: csstype.Property.WebkitTextStroke<string | number> | undefined;
        WebkitTransition: csstype.Property.Transition<string & {}> | undefined;
        azimuth: csstype.Property.Azimuth | undefined;
        boxAlign: csstype.Property.BoxAlign | undefined;
        boxDirection: csstype.Property.BoxDirection | undefined;
        boxFlex: csstype.Property.BoxFlex | undefined;
        boxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
        boxLines: csstype.Property.BoxLines | undefined;
        boxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
        boxOrient: csstype.Property.BoxOrient | undefined;
        boxPack: csstype.Property.BoxPack | undefined;
        clip: csstype.Property.Clip | undefined;
        imeMode: csstype.Property.ImeMode | undefined;
        offsetBlock: csstype.Property.InsetBlock<string | number> | undefined;
        offsetBlockEnd: csstype.Property.InsetBlockEnd<string | number> | undefined;
        offsetBlockStart: csstype.Property.InsetBlockStart<string | number> | undefined;
        offsetInline: csstype.Property.InsetInline<string | number> | undefined;
        offsetInlineEnd: csstype.Property.InsetInlineEnd<string | number> | undefined;
        offsetInlineStart: csstype.Property.InsetInlineStart<string | number> | undefined;
        scrollSnapCoordinate: csstype.Property.ScrollSnapCoordinate<string | number> | undefined;
        scrollSnapDestination: csstype.Property.ScrollSnapDestination<string | number> | undefined;
        scrollSnapPointsX: csstype.Property.ScrollSnapPointsX | undefined;
        scrollSnapPointsY: csstype.Property.ScrollSnapPointsY | undefined;
        scrollSnapTypeX: csstype.Property.ScrollSnapTypeX | undefined;
        scrollSnapTypeY: csstype.Property.ScrollSnapTypeY | undefined;
        KhtmlBoxAlign: csstype.Property.BoxAlign | undefined;
        KhtmlBoxDirection: csstype.Property.BoxDirection | undefined;
        KhtmlBoxFlex: csstype.Property.BoxFlex | undefined;
        KhtmlBoxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
        KhtmlBoxLines: csstype.Property.BoxLines | undefined;
        KhtmlBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
        KhtmlBoxOrient: csstype.Property.BoxOrient | undefined;
        KhtmlBoxPack: csstype.Property.BoxPack | undefined;
        KhtmlLineBreak: csstype.Property.LineBreak | undefined;
        KhtmlOpacity: csstype.Property.Opacity | undefined;
        KhtmlUserSelect: csstype.Property.UserSelect | undefined;
        MozBackgroundClip: csstype.Property.BackgroundClip | undefined;
        MozBackgroundInlinePolicy: csstype.Property.BoxDecorationBreak | undefined;
        MozBackgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
        MozBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
        MozBorderRadius: csstype.Property.BorderRadius<string | number> | undefined;
        MozBorderRadiusBottomleft: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
        MozBorderRadiusBottomright: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
        MozBorderRadiusTopleft: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
        MozBorderRadiusTopright: csstype.Property.BorderTopRightRadius<string | number> | undefined;
        MozBoxAlign: csstype.Property.BoxAlign | undefined;
        MozBoxDirection: csstype.Property.BoxDirection | undefined;
        MozBoxFlex: csstype.Property.BoxFlex | undefined;
        MozBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
        MozBoxOrient: csstype.Property.BoxOrient | undefined;
        MozBoxPack: csstype.Property.BoxPack | undefined;
        MozBoxShadow: csstype.Property.BoxShadow | undefined;
        MozFloatEdge: csstype.Property.MozFloatEdge | undefined;
        MozForceBrokenImageIcon: csstype.Property.MozForceBrokenImageIcon | undefined;
        MozOpacity: csstype.Property.Opacity | undefined;
        MozOutline: csstype.Property.Outline<string | number> | undefined;
        MozOutlineColor: csstype.Property.OutlineColor | undefined;
        MozOutlineRadius: csstype.Property.MozOutlineRadius<string | number> | undefined;
        MozOutlineRadiusBottomleft: csstype.Property.MozOutlineRadiusBottomleft<string | number> | undefined;
        MozOutlineRadiusBottomright: csstype.Property.MozOutlineRadiusBottomright<string | number> | undefined;
        MozOutlineRadiusTopleft: csstype.Property.MozOutlineRadiusTopleft<string | number> | undefined;
        MozOutlineRadiusTopright: csstype.Property.MozOutlineRadiusTopright<string | number> | undefined;
        MozOutlineStyle: csstype.Property.OutlineStyle | undefined;
        MozOutlineWidth: csstype.Property.OutlineWidth<string | number> | undefined;
        MozTextAlignLast: csstype.Property.TextAlignLast | undefined;
        MozTextDecorationColor: csstype.Property.TextDecorationColor | undefined;
        MozTextDecorationLine: csstype.Property.TextDecorationLine | undefined;
        MozTextDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
        MozUserInput: csstype.Property.MozUserInput | undefined;
        msImeMode: csstype.Property.ImeMode | undefined;
        OAnimation: csstype.Property.Animation<string & {}> | undefined;
        OAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
        OAnimationDirection: csstype.Property.AnimationDirection | undefined;
        OAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
        OAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
        OAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
        OAnimationName: csstype.Property.AnimationName | undefined;
        OAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
        OAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
        OBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
        OBorderImage: csstype.Property.BorderImage | undefined;
        OObjectFit: csstype.Property.ObjectFit | undefined;
        OObjectPosition: csstype.Property.ObjectPosition<string | number> | undefined;
        OTabSize: csstype.Property.TabSize<string | number> | undefined;
        OTextOverflow: csstype.Property.TextOverflow | undefined;
        OTransform: csstype.Property.Transform | undefined;
        OTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
        OTransition: csstype.Property.Transition<string & {}> | undefined;
        OTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
        OTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
        OTransitionProperty: csstype.Property.TransitionProperty | undefined;
        OTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
        WebkitBoxAlign: csstype.Property.BoxAlign | undefined;
        WebkitBoxDirection: csstype.Property.BoxDirection | undefined;
        WebkitBoxFlex: csstype.Property.BoxFlex | undefined;
        WebkitBoxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
        WebkitBoxLines: csstype.Property.BoxLines | undefined;
        WebkitBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
        WebkitBoxOrient: csstype.Property.BoxOrient | undefined;
        WebkitBoxPack: csstype.Property.BoxPack | undefined;
        WebkitScrollSnapPointsX: csstype.Property.ScrollSnapPointsX | undefined;
        WebkitScrollSnapPointsY: csstype.Property.ScrollSnapPointsY | undefined;
        alignmentBaseline: csstype.Property.AlignmentBaseline | undefined;
        baselineShift: csstype.Property.BaselineShift<string | number> | undefined;
        clipRule: csstype.Property.ClipRule | undefined;
        colorInterpolation: csstype.Property.ColorInterpolation | undefined;
        colorRendering: csstype.Property.ColorRendering | undefined;
        dominantBaseline: csstype.Property.DominantBaseline | undefined;
        fillOpacity: csstype.Property.FillOpacity | undefined;
        fillRule: csstype.Property.FillRule | undefined;
        floodColor: csstype.Property.FloodColor | undefined;
        floodOpacity: csstype.Property.FloodOpacity | undefined;
        glyphOrientationVertical: csstype.Property.GlyphOrientationVertical | undefined;
        lightingColor: csstype.Property.LightingColor | undefined;
        marker: csstype.Property.Marker | undefined;
        markerEnd: csstype.Property.MarkerEnd | undefined;
        markerMid: csstype.Property.MarkerMid | undefined;
        markerStart: csstype.Property.MarkerStart | undefined;
        shapeRendering: csstype.Property.ShapeRendering | undefined;
        stopColor: csstype.Property.StopColor | undefined;
        stopOpacity: csstype.Property.StopOpacity | undefined;
        strokeDasharray: csstype.Property.StrokeDasharray<string | number> | undefined;
        strokeDashoffset: csstype.Property.StrokeDashoffset<string | number> | undefined;
        strokeLinecap: csstype.Property.StrokeLinecap | undefined;
        strokeLinejoin: csstype.Property.StrokeLinejoin | undefined;
        strokeMiterlimit: csstype.Property.StrokeMiterlimit | undefined;
        strokeOpacity: csstype.Property.StrokeOpacity | undefined;
        strokeWidth: csstype.Property.StrokeWidth<string | number> | undefined;
        textAnchor: csstype.Property.TextAnchor | undefined;
        vectorEffect: csstype.Property.VectorEffect | undefined;
    };
    children: react.ReactNode;
    onClick?: ((ev: MouseEvent<unknown, globalThis.MouseEvent>) => void) | undefined;
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | undefined;
    'data-testid'?: string | undefined;
    className?: string | undefined;
}, HTMLElement>;
declare namespace SmartClone {
    var displayName: string;
}

type SpineMenuItemProps<RC extends ReactElement | undefined = undefined> = BaseClickableWithRCAndDomProps<RC> & {
    selected?: boolean;
};
declare function SpineMenuItem<RC extends ReactElement | undefined = undefined>({ sx, children, testId, selected, className, ...props }: SpineMenuItemProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace SpineMenuItem {
    var displayName: string;
    var Label: typeof Body;
    var Icon: typeof Icon;
    var Badge: typeof Badge;
}

type SpineMenuBaseProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    spinePosition?: 'left' | 'right';
};
declare function SpineMenu<RC extends ReactElement | undefined = undefined>({ sx, children, rc, spinePosition, ...props }: SpineMenuBaseProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace SpineMenu {
    var displayName: string;
    var Item: typeof SpineMenuItem;
}

declare const STEPPER_SIZES: readonly ["small", "medium"];
declare const DEFAULT_STEPPER_SIZE: "medium";
type StepperSize = (typeof STEPPER_SIZES)[number];
declare const STEPPER_VARIANTS: readonly ["horizontal", "vertical"];
declare const DEFAULT_STEPPER_VARIANT: "horizontal";
type StepperVariant = (typeof STEPPER_VARIANTS)[number];

type StepperStepProps = Omit<BaseClickableWithRCAndDomProps<undefined>, 'size' | 'rc'> & {
    size?: MakeResponsive<StepperSize>;
    stepIndex?: number;
    activeStepIndex?: number;
    handleStepClick?: any;
    totalSteps?: number;
    variant?: StepperVariant;
    disableFutureStepSelect?: boolean;
};
declare function StepperStep({ children, className, size, stepIndex, activeStepIndex, sx, handleStepClick, variant, totalSteps, testId, disableFutureStepSelect, ...props }: StepperStepProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace StepperStep {
    var displayName: string;
}

type StepperDiscriminatedUnion<T> = (T & {
    currentStep: number;
    onStepChange: (value: number) => void;
}) | (T & {
    defaultStep?: number;
    onStepChange?: (value: number) => void;
    currentStep?: never;
});
type StepperProps = StandardComponentWithProps<HTMLDivElement, StepperDiscriminatedUnion<{
    variant?: MakeResponsive<StepperVariant>;
    size?: MakeResponsive<StepperSize>;
    children?: ReactNode;
    disableFutureStepSelect?: boolean;
}>>;
declare function Stepper<RC extends ReactElement | undefined = undefined>(props: RC extends undefined ? DomPropsWithDomRef<'div'> & StepperProps : StepperProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Stepper {
    var displayName: string;
    var Step: typeof StepperStep;
}

type SwapStackProps = StandardComponentWithProps<HTMLDivElement, {
    circularFrame?: boolean;
    primaryImageUrl: string;
    secondaryImageUrl?: string;
    direction?: 'left' | 'right';
    size?: MakeResponsive<ImageSizeVariant>;
}>;
declare function SwapStack<RC extends ReactElement | undefined = undefined>({ circularFrame, primaryImageUrl, secondaryImageUrl, direction, testId, className, size, sx, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & SwapStackProps : SwapStackProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace SwapStack {
    var displayName: string;
}

declare const TABLE_SPACING_SIZES: readonly ["xxSmall", "xSmall", "small", "medium", "xLarge", "xxLarge"];
type TableSpacing = (typeof TABLE_SPACING_SIZES)[number];
type TableSettings = {
    verticalSpacing: MakeResponsive<TableSpacing>;
    horizontalSpacing: MakeResponsive<TableSpacing>;
    rowHoverFx: boolean;
    stripedBg: boolean;
    tableBorder: boolean;
    rowBorder: boolean;
    columnBorder: boolean;
    stickyHeaders: boolean;
    testId: string;
    setThWidths: Dispatch<SetStateAction<number[]>>;
};
type TableChildParentNode = 'thead' | 'tbody' | 'tfoot';

type TableBodyProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC>;
declare function TableBody<RC extends ReactElement | undefined = undefined>({ children, rc, className, testId: testIdProp, ...props }: TableBodyProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableBody {
    var displayName: string;
}

type TableCaptionProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC> & {
    captionSide?: 'top' | 'bottom';
};
declare function TableCaption<RC extends ReactElement | undefined = undefined>({ children, rc, size, weight, sx, captionSide, className, testId: testIdProp, ...props }: TableCaptionProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableCaption {
    var displayName: string;
}

type TableCellProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC> & {
    parentNode?: TableChildParentNode;
    colSpan?: number;
};
declare function TableCell<RC extends ReactElement | undefined = undefined>({ children, size, sx, className, testId: testIdProp, parentNode, colSpan, weight, rc, ...props }: TableCellProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableCell {
    var displayName: string;
}

type TableFootProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC>;
declare function TableFoot<RC extends ReactElement | undefined = undefined>({ children, rc, className, testId: testIdProp, ...props }: TableFootProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableFoot {
    var displayName: string;
}

type TableHeadProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC>;
declare function TableHead<RC extends ReactElement | undefined = undefined>({ children, sx, rc, className, testId: testIdProp, domRef, ...props }: TableHeadProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableHead {
    var displayName: string;
}

type TablePageSizeProps = DistributiveOmit<SelectProps, 'size'> & {};
declare function TablePageSize({ children, defaultLabel, ...props }: TablePageSizeProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TablePageSize {
    var displayName: string;
    var DefaultIcon: typeof SelectDefaultIcon;
}

declare function TablePagination<RC extends ReactElement | undefined = undefined>({ sx, ...props }: DistributiveOmit<PaginationProps<RC>, 'size'>): _emotion_react_jsx_runtime.JSX.Element;

type TableRowProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    parentNode?: TableChildParentNode;
};
declare function TableRow<RC extends ReactElement | undefined = undefined>({ children, rc, className, testId: testIdProp, parentNode, ...props }: TableRowProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableRow {
    var displayName: string;
}

type TableProps = StandardComponentWithProps<HTMLTableElement, Partial<Omit<TableSettings, 'setThWidths'>> & {
    children: ReactNode;
    tableBorder?: boolean;
}>;
declare function Table<RC extends ReactElement | undefined = undefined>({ children, verticalSpacing, horizontalSpacing, rowHoverFx, stripedBg, tableBorder, rowBorder, columnBorder, stickyHeaders, testId, sx, ...props }: RC extends undefined ? DomPropsWithDomRef<'div'> & TableProps : TableProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Table {
    var displayName: string;
    var Cell: typeof TableCell;
    var Row: typeof TableRow;
    var Body: typeof TableBody;
    var Head: typeof TableHead;
    var Foot: typeof TableFoot;
    var Caption: typeof TableCaption;
    var Pagination: typeof TablePagination;
    var PageSize: typeof TablePageSize;
}

type TabProps = BaseClickableWithRCAndDomProps<undefined> & {
    icon?: IconReactElement;
    value: string;
};
declare function Tab({ testId, value, disabled, children, icon, sx, ...props }: TabProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Tab {
    var displayName: string;
}

type StringOrNull = string | null;
type TabsProviderProps = {
    onTabChange?: (value: string) => void;
    currentTabValue?: StringOrNull;
    defaultTabValue?: StringOrNull;
};
type TabsContextType = {
    currentTabValue: string;
    onTabChange: (value: string) => void;
};
type TabsProps<RC extends ReactElement | undefined = undefined> = ({
    currentTabValue: StringOrNull;
} | {
    defaultTabValue: StringOrNull;
}) & {
    onTabChange?: (value: string) => void;
} & BoxWithRCAndDomProps<RC>;
type TabsListProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    contentOrientation?: 'vertical' | 'horizontal';
};
type TabsPanelProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    value: string;
    children?: ReactNode;
};

declare function TabsList<RC extends ReactElement | undefined = undefined>({ testId, domRef, children, contentOrientation, sx, ...props }: TabsListProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TabsList {
    var displayName: string;
}

declare function TabsPanel<RC extends ReactElement | undefined = undefined>({ testId, children, value, sx, ...props }: TabsPanelProps<RC>): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace TabsPanel {
    var displayName: string;
}

declare function Tabs<RC extends ReactElement | undefined = undefined>(props: TabsProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Tabs {
    var displayName: string;
    var List: typeof TabsList;
    var Tab: typeof Tab;
    var Panel: typeof TabsPanel;
}

declare function TextArea<RC extends ReactElement | undefined = undefined>({ onClick, domRef, textAreaRef, placeholder, testId, name, id, children, className, validationStatus, onChange, onClearValue, value, hideClearValueButton, rc, defaultValue, disabled, rows, sizeVariant, textAlign, sx, ...inputDomAttributes }: RC extends undefined ? TextAreaProps : TextAreaProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextArea {
    var displayName: string;
}

type TextInputAdornmentProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC> & {};
declare function TextInputAdornment<RC extends ReactElement | undefined = undefined>({ children, sx, ...props }: TextInputAdornmentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInputAdornment {
    var displayName: string;
}

declare function TextInputButton({ children, currentInputValue, sx, ...props }: TextInputButtonProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInputButton {
    var displayName: string;
}

type TextInputFramedImageProps<RC extends ReactElement | undefined = undefined> = FramedImageProps<RC>;
declare function TextInputFramedImage<RC extends ReactElement | undefined = undefined>({ sx, ...props }: TextInputFramedImageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInputFramedImage {
    var displayName: string;
}

declare function TextInputStatefulButtCon<RC extends ReactElement | undefined = undefined>({ children, currentInputValue, sx, ...props }: TextInputStatefulButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInputStatefulButtCon {
    var displayName: string;
}

declare function TextInput<RC extends ReactElement | undefined = undefined>({ domRef, inputRef, rc, placeholder, sx, testId, name, id, children, className, validationStatus, onChange, onClearValue, value, hideClearValueButton, textAlign, defaultValue, sizeVariant, disabled, ...inputDomAttributes }: RC extends undefined ? TextInputProps : TextInputProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TextInput {
    var displayName: string;
    var Button: typeof TextInputButton;
    var Icon: typeof TextInputIcon;
    var FramedImage: typeof TextInputFramedImage;
    var StatefulButtCon: typeof TextInputStatefulButtCon;
    var Adornment: typeof TextInputAdornment;
}

type ToastButtConProps<RC extends ReactElement | undefined = undefined> = ButtConProps<RC>;
declare function ToastButtCon<RC extends ReactElement | undefined = undefined>({ size, variant, ...props }: ToastButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToastButtCon {
    var displayName: string;
}

type ToastButtonProps<RC extends ReactElement | undefined = undefined> = ButtonProps<RC>;
declare function ToastButton<RC extends ReactElement | undefined = undefined>({ size, variant, ...props }: ToastButtonProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToastButton {
    var displayName: string;
}

type ToastMessageProps<RC extends ReactElement | undefined = undefined> = BodyProps<RC>;
declare function ToastMessage<RC extends ReactElement | undefined = undefined>({ size, sx, children, ...props }: ToastMessageProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToastMessage {
    var displayName: string;
}

declare function Toast({ visible, onCloseToast, id: idProp, children, position, hideDismissButton, variant, autoDismissDuration, buttonsPosition, testId, sx, }: ToastComponentProps): null;
declare namespace Toast {
    var displayName: string;
    var Button: typeof ToastButton;
    var ButtCon: typeof ToastButtCon;
    var Message: typeof ToastMessage;
}

type ToggleProps = StandardInputComponentWithProps<'input', {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
}>;
declare function Toggle<RC extends ReactElement | undefined = undefined>({ sx, testId, name, id, children, domRef, className, onChange, checked, value, disabled, textAlign, validationStatus, inputRef, rc, ...inputHtmlAttrs }: RC extends undefined ? ToggleProps : ToggleProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Toggle {
    var displayName: string;
}

declare const TOOLBAR_SIZES: readonly ["small", "medium"];
type ToolbarSize = (typeof TOOLBAR_SIZES)[number];

type ToolbarCaptionProps = Omit<BoxProps, 'rc'> & {
    size?: MakeResponsive<ToolbarSize>;
};
declare function ToolbarCaption({ size, sx, ...props }: ToolbarCaptionProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToolbarCaption {
    var displayName: string;
}

type ToolbarLeftButtConProps<RC extends ReactElement | undefined = undefined> = DistributiveOmit<ButtConProps<RC>, 'size'> & {
    size?: MakeResponsive<ToolbarSize>;
};
declare function ToolbarLeftButtCon<RC extends ReactElement | undefined = undefined>({ size, variant, sx, ...props }: ToolbarLeftButtConProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToolbarLeftButtCon {
    var displayName: string;
}

type ToolbarRightSlotProps = BoxProps & {
    size?: MakeResponsive<ToolbarSize>;
};
declare function ToolbarRightSlot({ size, children, sx, testId, ...props }: ToolbarRightSlotProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToolbarRightSlot {
    var displayName: string;
}

type ToolbarTitleProps = StandardComponentWithProps<HTMLHeadingElement, {
    size?: MakeResponsive<ToolbarSize>;
    children?: ReactNode;
}>;
declare function ToolbarTitle<RC extends ReactElement | undefined = undefined>({ size, sx, rc, ...props }: RC extends undefined ? DomPropsWithDomRef<'h3'> & ToolbarTitleProps : ToolbarTitleProps & {
    rc: RC;
}): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ToolbarTitle {
    var displayName: string;
}

type ToolbarProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ToolbarSize>;
    children?: ReactNode;
};
declare function Toolbar<RC extends ReactElement | undefined = undefined>({ sx, size, children, rc, testId, ...props }: ToolbarProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Toolbar {
    var displayName: string;
    var LeftButtCon: typeof ToolbarLeftButtCon;
    var Title: typeof ToolbarTitle;
    var Caption: typeof ToolbarCaption;
    var RightSlot: typeof ToolbarRightSlot;
}

type TooltipContentProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    id?: string;
};
declare function TooltipContent<RC extends ReactElement | undefined = undefined>({ children, ...props }: TooltipContentProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TooltipContent {
    var displayName: string;
}

type TooltipTargetProps = StandardComponentWithProps<HTMLButtonElement, {
    children: ReactNode;
    id?: string;
}>;
declare function TooltipTarget({ children, ...props }: TooltipTargetProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TooltipTarget {
    var displayName: string;
}

declare function Tooltip({ id: idProp, children, size, domRef, ...props }: TooltipComponentProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Tooltip {
    var displayName: string;
    var Target: typeof TooltipTarget;
    var Content: typeof TooltipContent;
}

type VerticalMenuProps<RC extends ReactElement | undefined = undefined> = BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<MenuItemSize>;
    emphasized?: boolean;
    textAlign?: InputTextAlign;
};
declare function VerticalMenu<RC extends ReactElement | undefined = undefined>({ children, sx, size, emphasized, textAlign, className, ...props }: VerticalMenuProps<RC>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace VerticalMenu {
    var displayName: string;
    var Divider: typeof Divider;
    var Item: typeof MenuItem;
}

declare function useGetResponsiveImageSizes(size: MakeResponsive<ImageSizeVariant>, componentKind: ImageComponentKind): ResponsiveSizes;
declare function useGetRelativeImageSizeInLayout(size: MakeResponsive<ImageSizeVariant>, componentKind: ImageComponentKind): string;

declare const useBrowserEffect: typeof useEffect;

declare const useBrowserLayoutEffect: typeof useLayoutEffect;

/**
 * This function adds an event listener to the window object that triggers a callback function when
 * there are unsaved changes.
 * @param {boolean} unsavedChanges - A boolean value indicating whether there are unsaved changes in
 * the current state of the application.
 * @param callback - The `callback` parameter is a function that will be executed when the user tries
 * to leave the current page or close the browser window/tab, but only if there are unsaved changes.
 * The purpose of this function is to give the user a chance to save their changes before leaving the
 * page.
 */
declare const useCallbackWhenDirty: (unsavedChanges: boolean, callback: () => boolean) => void;

declare function getInvalidPropWarningMsg(component: 'Pagination' | 'OnboardingPagination', propKind: 'totalPages' | 'currentPage' | 'defaultPage', badProp: number): string;
declare function getInvalidCurrentPageWarningMsg(component: 'Pagination' | 'OnboardingPagination', currentPage: number, totalPages: number): string;
declare function useCheckForInvalidPaginationProps(component: 'Pagination' | 'OnboardingPagination', props: {
    totalPages: number;
    currentPage?: number;
    defaultPage: number;
}): boolean;

/**
 * This function returns a boolean value indicating whether the code is running on the client side or
 * not.
 * @returns An object with a single property `isClientSide`, which is a boolean value indicating
 * whether the code is currently running on the client side or not.
 */
declare const useClientSide: () => {
    isClientSide: boolean;
};

/**
 * This function converts SxProps to Emotion styles using a given theme or the default theme.
 * @param {SxProps} sx - SxProps is a type definition for the theme-ui style object. It is an object
 * that contains CSS properties and values that can be applied to a component.
 * @param {BiomeTheme} [themeInput] - `themeInput` is an optional parameter of type `BiomeTheme` that
 * allows the user to pass in a custom theme object to be used instead of the default theme provided by
 * the `useTheme` hook. If `themeInput` is not provided, the default theme will be used.
 * @returns The `useConvertSxToEmotionStyles` function returns a memoized version of the
 * `convertSxToEmotionStyles` function with the provided `sx` and `themeInput` props. The `themeInput`
 * prop is optional and if provided, it will override the default theme provided by the `useTheme`
 * hook.
 */
declare function useConvertSxToEmotionStyles(sx: DeeplyNestedSx, themeInput?: BiomeTheme): {
    filter: csstype.Property.Filter | undefined;
    fill: string | undefined;
    color: csstype.Property.Color | undefined;
    font: csstype.Property.Font | undefined;
    fontWeight: csstype.Property.FontWeight | undefined;
    fontSize: csstype.Property.FontSize<string | number> | undefined;
    lineHeight: csstype.Property.LineHeight<string | number> | undefined;
    letterSpacing: csstype.Property.LetterSpacing<string | number> | undefined;
    borderRadius: csstype.Property.BorderRadius<string | number> | undefined;
    border: csstype.Property.Border<string | number> | undefined;
    motion: csstype.Property.Offset<string | number> | undefined;
    margin: csstype.Property.Margin<string | number> | undefined;
    marginTop: csstype.Property.MarginTop<string | number> | undefined;
    marginRight: csstype.Property.MarginRight<string | number> | undefined;
    marginBottom: csstype.Property.MarginBottom<string | number> | undefined;
    marginLeft: csstype.Property.MarginLeft<string | number> | undefined;
    padding: csstype.Property.Padding<string | number> | undefined;
    paddingTop: csstype.Property.PaddingTop<string | number> | undefined;
    paddingRight: csstype.Property.PaddingRight<string | number> | undefined;
    paddingBottom: csstype.Property.PaddingBottom<string | number> | undefined;
    paddingLeft: csstype.Property.PaddingLeft<string | number> | undefined;
    scrollMargin: csstype.Property.ScrollMargin<string | number> | undefined;
    scrollMarginTop: csstype.Property.ScrollMarginTop<string | number> | undefined;
    scrollMarginRight: csstype.Property.ScrollMarginRight<string | number> | undefined;
    scrollMarginBottom: csstype.Property.ScrollMarginBottom<string | number> | undefined;
    scrollMarginLeft: csstype.Property.ScrollMarginLeft<string | number> | undefined;
    scrollPadding: csstype.Property.ScrollPadding<string | number> | undefined;
    scrollPaddingTop: csstype.Property.ScrollPaddingTop<string | number> | undefined;
    scrollPaddingRight: csstype.Property.ScrollPaddingRight<string | number> | undefined;
    scrollPaddingBottom: csstype.Property.ScrollPaddingBottom<string | number> | undefined;
    scrollPaddingLeft: csstype.Property.ScrollPaddingLeft<string | number> | undefined;
    top: csstype.Property.Top<string | number> | undefined;
    right: csstype.Property.Right<string | number> | undefined;
    bottom: csstype.Property.Bottom<string | number> | undefined;
    left: csstype.Property.Left<string | number> | undefined;
    gridGap: csstype.Property.GridGap<string | number> | undefined;
    gridColumnGap: csstype.Property.GridColumnGap<string | number> | undefined;
    gridRowGap: csstype.Property.GridRowGap<string | number> | undefined;
    gap: csstype.Property.Gap<string | number> | undefined;
    columnGap: csstype.Property.ColumnGap<string | number> | undefined;
    rowGap: csstype.Property.RowGap<string | number> | undefined;
    width: csstype.Property.Width<string | number> | undefined;
    minWidth: csstype.Property.MinWidth<string | number> | undefined;
    maxWidth: csstype.Property.MaxWidth<string | number> | undefined;
    columnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
    height: csstype.Property.Height<string | number> | undefined;
    minHeight: csstype.Property.MinHeight<string | number> | undefined;
    maxHeight: csstype.Property.MaxHeight<string | number> | undefined;
    flexBasis: csstype.Property.FlexBasis<string | number> | undefined;
    background: csstype.Property.Background<string | number> | undefined;
    backgroundColor: csstype.Property.BackgroundColor | undefined;
    borderColor: csstype.Property.BorderColor | undefined;
    caretColor: csstype.Property.CaretColor | undefined;
    outlineColor: csstype.Property.OutlineColor | undefined;
    textDecorationColor: csstype.Property.TextDecorationColor | undefined;
    stroke: csstype.Property.Stroke | undefined;
    borderTopColor: csstype.Property.BorderTopColor | undefined;
    borderRightColor: csstype.Property.BorderRightColor | undefined;
    borderBottomColor: csstype.Property.BorderBottomColor | undefined;
    borderLeftColor: csstype.Property.BorderLeftColor | undefined;
    columnRuleColor: csstype.Property.ColumnRuleColor | undefined;
    backgroundImage: csstype.Property.BackgroundImage | undefined;
    boxShadow: csstype.Property.BoxShadow | undefined;
    textShadow: csstype.Property.TextShadow | undefined;
    borderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
    borderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number> | undefined;
    borderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
    borderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
    fontFamily: csstype.Property.FontFamily | undefined;
    textDecoration: csstype.Property.TextDecoration<string | number> | undefined;
    textTransform: csstype.Property.TextTransform | undefined;
    borderTop: csstype.Property.BorderTop<string | number> | undefined;
    borderRight: csstype.Property.BorderRight<string | number> | undefined;
    borderBottom: csstype.Property.BorderBottom<string | number> | undefined;
    borderLeft: csstype.Property.BorderLeft<string | number> | undefined;
    borderWidth: csstype.Property.BorderWidth<string | number> | undefined;
    borderTopWidth: csstype.Property.BorderTopWidth<string | number> | undefined;
    borderRightWidth: csstype.Property.BorderRightWidth<string | number> | undefined;
    borderBottomWidth: csstype.Property.BorderBottomWidth<string | number> | undefined;
    borderLeftWidth: csstype.Property.BorderLeftWidth<string | number> | undefined;
    transitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
    transitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
    animationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
    animationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
    textFillColor: string | undefined;
    accentColor: csstype.Property.AccentColor | undefined;
    alignContent: csstype.Property.AlignContent | undefined;
    alignItems: csstype.Property.AlignItems | undefined;
    alignSelf: csstype.Property.AlignSelf | undefined;
    alignTracks: csstype.Property.AlignTracks | undefined;
    animationComposition: csstype.Property.AnimationComposition | undefined;
    animationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
    animationDirection: csstype.Property.AnimationDirection | undefined;
    animationFillMode: csstype.Property.AnimationFillMode | undefined;
    animationIterationCount: csstype.Property.AnimationIterationCount | undefined;
    animationName: csstype.Property.AnimationName | undefined;
    animationPlayState: csstype.Property.AnimationPlayState | undefined;
    animationTimeline: csstype.Property.AnimationTimeline | undefined;
    appearance: csstype.Property.Appearance | undefined;
    aspectRatio: csstype.Property.AspectRatio | undefined;
    backdropFilter: csstype.Property.BackdropFilter | undefined;
    backfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
    backgroundAttachment: csstype.Property.BackgroundAttachment | undefined;
    backgroundBlendMode: csstype.Property.BackgroundBlendMode | undefined;
    backgroundClip: csstype.Property.BackgroundClip | undefined;
    backgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
    backgroundPositionX: csstype.Property.BackgroundPositionX<string | number> | undefined;
    backgroundPositionY: csstype.Property.BackgroundPositionY<string | number> | undefined;
    backgroundRepeat: csstype.Property.BackgroundRepeat | undefined;
    backgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
    blockOverflow: csstype.Property.BlockOverflow | undefined;
    blockSize: csstype.Property.BlockSize<string | number> | undefined;
    borderBlockColor: csstype.Property.BorderBlockColor | undefined;
    borderBlockEndColor: csstype.Property.BorderBlockEndColor | undefined;
    borderBlockEndStyle: csstype.Property.BorderBlockEndStyle | undefined;
    borderBlockEndWidth: csstype.Property.BorderBlockEndWidth<string | number> | undefined;
    borderBlockStartColor: csstype.Property.BorderBlockStartColor | undefined;
    borderBlockStartStyle: csstype.Property.BorderBlockStartStyle | undefined;
    borderBlockStartWidth: csstype.Property.BorderBlockStartWidth<string | number> | undefined;
    borderBlockStyle: csstype.Property.BorderBlockStyle | undefined;
    borderBlockWidth: csstype.Property.BorderBlockWidth<string | number> | undefined;
    borderBottomStyle: csstype.Property.BorderBottomStyle | undefined;
    borderCollapse: csstype.Property.BorderCollapse | undefined;
    borderEndEndRadius: csstype.Property.BorderEndEndRadius<string | number> | undefined;
    borderEndStartRadius: csstype.Property.BorderEndStartRadius<string | number> | undefined;
    borderImageOutset: csstype.Property.BorderImageOutset<string | number> | undefined;
    borderImageRepeat: csstype.Property.BorderImageRepeat | undefined;
    borderImageSlice: csstype.Property.BorderImageSlice | undefined;
    borderImageSource: csstype.Property.BorderImageSource | undefined;
    borderImageWidth: csstype.Property.BorderImageWidth<string | number> | undefined;
    borderInlineColor: csstype.Property.BorderInlineColor | undefined;
    borderInlineEndColor: csstype.Property.BorderInlineEndColor | undefined;
    borderInlineEndStyle: csstype.Property.BorderInlineEndStyle | undefined;
    borderInlineEndWidth: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
    borderInlineStartColor: csstype.Property.BorderInlineStartColor | undefined;
    borderInlineStartStyle: csstype.Property.BorderInlineStartStyle | undefined;
    borderInlineStartWidth: csstype.Property.BorderInlineStartWidth<string | number> | undefined;
    borderInlineStyle: csstype.Property.BorderInlineStyle | undefined;
    borderInlineWidth: csstype.Property.BorderInlineWidth<string | number> | undefined;
    borderLeftStyle: csstype.Property.BorderLeftStyle | undefined;
    borderRightStyle: csstype.Property.BorderRightStyle | undefined;
    borderSpacing: csstype.Property.BorderSpacing<string | number> | undefined;
    borderStartEndRadius: csstype.Property.BorderStartEndRadius<string | number> | undefined;
    borderStartStartRadius: csstype.Property.BorderStartStartRadius<string | number> | undefined;
    borderTopStyle: csstype.Property.BorderTopStyle | undefined;
    boxDecorationBreak: csstype.Property.BoxDecorationBreak | undefined;
    boxSizing: csstype.Property.BoxSizing | undefined;
    breakAfter: csstype.Property.BreakAfter | undefined;
    breakBefore: csstype.Property.BreakBefore | undefined;
    breakInside: csstype.Property.BreakInside | undefined;
    captionSide: csstype.Property.CaptionSide | undefined;
    caretShape: csstype.Property.CaretShape | undefined;
    clear: csstype.Property.Clear | undefined;
    clipPath: csstype.Property.ClipPath | undefined;
    colorAdjust: csstype.Property.PrintColorAdjust | undefined;
    colorScheme: csstype.Property.ColorScheme | undefined;
    columnCount: csstype.Property.ColumnCount | undefined;
    columnFill: csstype.Property.ColumnFill | undefined;
    columnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
    columnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
    columnSpan: csstype.Property.ColumnSpan | undefined;
    contain: csstype.Property.Contain | undefined;
    containIntrinsicBlockSize: csstype.Property.ContainIntrinsicBlockSize<string | number> | undefined;
    containIntrinsicHeight: csstype.Property.ContainIntrinsicHeight<string | number> | undefined;
    containIntrinsicInlineSize: csstype.Property.ContainIntrinsicInlineSize<string | number> | undefined;
    containIntrinsicWidth: csstype.Property.ContainIntrinsicWidth<string | number> | undefined;
    containerName: csstype.Property.ContainerName | undefined;
    containerType: csstype.Property.ContainerType | undefined;
    content: csstype.Property.Content | undefined;
    contentVisibility: csstype.Property.ContentVisibility | undefined;
    counterIncrement: csstype.Property.CounterIncrement | undefined;
    counterReset: csstype.Property.CounterReset | undefined;
    counterSet: csstype.Property.CounterSet | undefined;
    cursor: csstype.Property.Cursor | undefined;
    direction: csstype.Property.Direction | undefined;
    display: csstype.Property.Display | undefined;
    emptyCells: csstype.Property.EmptyCells | undefined;
    flexDirection: csstype.Property.FlexDirection | undefined;
    flexGrow: csstype.Property.FlexGrow | undefined;
    flexShrink: csstype.Property.FlexShrink | undefined;
    flexWrap: csstype.Property.FlexWrap | undefined;
    float: csstype.Property.Float | undefined;
    fontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
    fontKerning: csstype.Property.FontKerning | undefined;
    fontLanguageOverride: csstype.Property.FontLanguageOverride | undefined;
    fontOpticalSizing: csstype.Property.FontOpticalSizing | undefined;
    fontPalette: csstype.Property.FontPalette | undefined;
    fontSizeAdjust: csstype.Property.FontSizeAdjust | undefined;
    fontSmooth: csstype.Property.FontSmooth<string | number> | undefined;
    fontStretch: csstype.Property.FontStretch | undefined;
    fontStyle: csstype.Property.FontStyle | undefined;
    fontSynthesis: csstype.Property.FontSynthesis | undefined;
    fontVariant: csstype.Property.FontVariant | undefined;
    fontVariantAlternates: csstype.Property.FontVariantAlternates | undefined;
    fontVariantCaps: csstype.Property.FontVariantCaps | undefined;
    fontVariantEastAsian: csstype.Property.FontVariantEastAsian | undefined;
    fontVariantEmoji: csstype.Property.FontVariantEmoji | undefined;
    fontVariantLigatures: csstype.Property.FontVariantLigatures | undefined;
    fontVariantNumeric: csstype.Property.FontVariantNumeric | undefined;
    fontVariantPosition: csstype.Property.FontVariantPosition | undefined;
    fontVariationSettings: csstype.Property.FontVariationSettings | undefined;
    forcedColorAdjust: csstype.Property.ForcedColorAdjust | undefined;
    gridAutoColumns: csstype.Property.GridAutoColumns<string | number> | undefined;
    gridAutoFlow: csstype.Property.GridAutoFlow | undefined;
    gridAutoRows: csstype.Property.GridAutoRows<string | number> | undefined;
    gridColumnEnd: csstype.Property.GridColumnEnd | undefined;
    gridColumnStart: csstype.Property.GridColumnStart | undefined;
    gridRowEnd: csstype.Property.GridRowEnd | undefined;
    gridRowStart: csstype.Property.GridRowStart | undefined;
    gridTemplateAreas: csstype.Property.GridTemplateAreas | undefined;
    gridTemplateColumns: csstype.Property.GridTemplateColumns<string | number> | undefined;
    gridTemplateRows: csstype.Property.GridTemplateRows<string | number> | undefined;
    hangingPunctuation: csstype.Property.HangingPunctuation | undefined;
    hyphenateCharacter: csstype.Property.HyphenateCharacter | undefined;
    hyphenateLimitChars: csstype.Property.HyphenateLimitChars | undefined;
    hyphens: csstype.Property.Hyphens | undefined;
    imageOrientation: csstype.Property.ImageOrientation | undefined;
    imageRendering: csstype.Property.ImageRendering | undefined;
    imageResolution: csstype.Property.ImageResolution | undefined;
    initialLetter: csstype.Property.InitialLetter | undefined;
    inlineSize: csstype.Property.InlineSize<string | number> | undefined;
    inputSecurity: csstype.Property.InputSecurity | undefined;
    insetBlockEnd: csstype.Property.InsetBlockEnd<string | number> | undefined;
    insetBlockStart: csstype.Property.InsetBlockStart<string | number> | undefined;
    insetInlineEnd: csstype.Property.InsetInlineEnd<string | number> | undefined;
    insetInlineStart: csstype.Property.InsetInlineStart<string | number> | undefined;
    isolation: csstype.Property.Isolation | undefined;
    justifyContent: csstype.Property.JustifyContent | undefined;
    justifyItems: csstype.Property.JustifyItems | undefined;
    justifySelf: csstype.Property.JustifySelf | undefined;
    justifyTracks: csstype.Property.JustifyTracks | undefined;
    lineBreak: csstype.Property.LineBreak | undefined;
    lineHeightStep: csstype.Property.LineHeightStep<string | number> | undefined;
    listStyleImage: csstype.Property.ListStyleImage | undefined;
    listStylePosition: csstype.Property.ListStylePosition | undefined;
    listStyleType: csstype.Property.ListStyleType | undefined;
    marginBlockEnd: csstype.Property.MarginBlockEnd<string | number> | undefined;
    marginBlockStart: csstype.Property.MarginBlockStart<string | number> | undefined;
    marginInlineEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
    marginInlineStart: csstype.Property.MarginInlineStart<string | number> | undefined;
    marginTrim: csstype.Property.MarginTrim | undefined;
    maskBorderMode: csstype.Property.MaskBorderMode | undefined;
    maskBorderOutset: csstype.Property.MaskBorderOutset<string | number> | undefined;
    maskBorderRepeat: csstype.Property.MaskBorderRepeat | undefined;
    maskBorderSlice: csstype.Property.MaskBorderSlice | undefined;
    maskBorderSource: csstype.Property.MaskBorderSource | undefined;
    maskBorderWidth: csstype.Property.MaskBorderWidth<string | number> | undefined;
    maskClip: csstype.Property.MaskClip | undefined;
    maskComposite: csstype.Property.MaskComposite | undefined;
    maskImage: csstype.Property.MaskImage | undefined;
    maskMode: csstype.Property.MaskMode | undefined;
    maskOrigin: csstype.Property.MaskOrigin | undefined;
    maskPosition: csstype.Property.MaskPosition<string | number> | undefined;
    maskRepeat: csstype.Property.MaskRepeat | undefined;
    maskSize: csstype.Property.MaskSize<string | number> | undefined;
    maskType: csstype.Property.MaskType | undefined;
    mathDepth: csstype.Property.MathDepth | undefined;
    mathShift: csstype.Property.MathShift | undefined;
    mathStyle: csstype.Property.MathStyle | undefined;
    maxBlockSize: csstype.Property.MaxBlockSize<string | number> | undefined;
    maxInlineSize: csstype.Property.MaxInlineSize<string | number> | undefined;
    maxLines: csstype.Property.MaxLines | undefined;
    minBlockSize: csstype.Property.MinBlockSize<string | number> | undefined;
    minInlineSize: csstype.Property.MinInlineSize<string | number> | undefined;
    mixBlendMode: csstype.Property.MixBlendMode | undefined;
    motionDistance: csstype.Property.OffsetDistance<string | number> | undefined;
    motionPath: csstype.Property.OffsetPath | undefined;
    motionRotation: csstype.Property.OffsetRotate | undefined;
    objectFit: csstype.Property.ObjectFit | undefined;
    objectPosition: csstype.Property.ObjectPosition<string | number> | undefined;
    offsetAnchor: csstype.Property.OffsetAnchor<string | number> | undefined;
    offsetDistance: csstype.Property.OffsetDistance<string | number> | undefined;
    offsetPath: csstype.Property.OffsetPath | undefined;
    offsetPosition: csstype.Property.OffsetPosition<string | number> | undefined;
    offsetRotate: csstype.Property.OffsetRotate | undefined;
    offsetRotation: csstype.Property.OffsetRotate | undefined;
    opacity: csstype.Property.Opacity | undefined;
    order: csstype.Property.Order | undefined;
    orphans: csstype.Property.Orphans | undefined;
    outlineOffset: csstype.Property.OutlineOffset<string | number> | undefined;
    outlineStyle: csstype.Property.OutlineStyle | undefined;
    outlineWidth: csstype.Property.OutlineWidth<string | number> | undefined;
    overflowAnchor: csstype.Property.OverflowAnchor | undefined;
    overflowBlock: csstype.Property.OverflowBlock | undefined;
    overflowClipBox: csstype.Property.OverflowClipBox | undefined;
    overflowClipMargin: csstype.Property.OverflowClipMargin<string | number> | undefined;
    overflowInline: csstype.Property.OverflowInline | undefined;
    overflowWrap: csstype.Property.OverflowWrap | undefined;
    overflowX: csstype.Property.OverflowX | undefined;
    overflowY: csstype.Property.OverflowY | undefined;
    overscrollBehaviorBlock: csstype.Property.OverscrollBehaviorBlock | undefined;
    overscrollBehaviorInline: csstype.Property.OverscrollBehaviorInline | undefined;
    overscrollBehaviorX: csstype.Property.OverscrollBehaviorX | undefined;
    overscrollBehaviorY: csstype.Property.OverscrollBehaviorY | undefined;
    paddingBlockEnd: csstype.Property.PaddingBlockEnd<string | number> | undefined;
    paddingBlockStart: csstype.Property.PaddingBlockStart<string | number> | undefined;
    paddingInlineEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
    paddingInlineStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
    page: csstype.Property.Page | undefined;
    pageBreakAfter: csstype.Property.PageBreakAfter | undefined;
    pageBreakBefore: csstype.Property.PageBreakBefore | undefined;
    pageBreakInside: csstype.Property.PageBreakInside | undefined;
    paintOrder: csstype.Property.PaintOrder | undefined;
    perspective: csstype.Property.Perspective<string | number> | undefined;
    perspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
    pointerEvents: csstype.Property.PointerEvents | undefined;
    position: csstype.Property.Position | undefined;
    printColorAdjust: csstype.Property.PrintColorAdjust | undefined;
    quotes: csstype.Property.Quotes | undefined;
    resize: csstype.Property.Resize | undefined;
    rotate: csstype.Property.Rotate | undefined;
    rubyAlign: csstype.Property.RubyAlign | undefined;
    rubyMerge: csstype.Property.RubyMerge | undefined;
    rubyPosition: csstype.Property.RubyPosition | undefined;
    scale: csstype.Property.Scale | undefined;
    scrollBehavior: csstype.Property.ScrollBehavior | undefined;
    scrollMarginBlockEnd: csstype.Property.ScrollMarginBlockEnd<string | number> | undefined;
    scrollMarginBlockStart: csstype.Property.ScrollMarginBlockStart<string | number> | undefined;
    scrollMarginInlineEnd: csstype.Property.ScrollMarginInlineEnd<string | number> | undefined;
    scrollMarginInlineStart: csstype.Property.ScrollMarginInlineStart<string | number> | undefined;
    scrollPaddingBlockEnd: csstype.Property.ScrollPaddingBlockEnd<string | number> | undefined;
    scrollPaddingBlockStart: csstype.Property.ScrollPaddingBlockStart<string | number> | undefined;
    scrollPaddingInlineEnd: csstype.Property.ScrollPaddingInlineEnd<string | number> | undefined;
    scrollPaddingInlineStart: csstype.Property.ScrollPaddingInlineStart<string | number> | undefined;
    scrollSnapAlign: csstype.Property.ScrollSnapAlign | undefined;
    scrollSnapMarginBottom: csstype.Property.ScrollMarginBottom<string | number> | undefined;
    scrollSnapMarginLeft: csstype.Property.ScrollMarginLeft<string | number> | undefined;
    scrollSnapMarginRight: csstype.Property.ScrollMarginRight<string | number> | undefined;
    scrollSnapMarginTop: csstype.Property.ScrollMarginTop<string | number> | undefined;
    scrollSnapStop: csstype.Property.ScrollSnapStop | undefined;
    scrollSnapType: csstype.Property.ScrollSnapType | undefined;
    scrollTimelineAxis: csstype.Property.ScrollTimelineAxis | undefined;
    scrollTimelineName: csstype.Property.ScrollTimelineName | undefined;
    scrollbarColor: csstype.Property.ScrollbarColor | undefined;
    scrollbarGutter: csstype.Property.ScrollbarGutter | undefined;
    scrollbarWidth: csstype.Property.ScrollbarWidth | undefined;
    shapeImageThreshold: csstype.Property.ShapeImageThreshold | undefined;
    shapeMargin: csstype.Property.ShapeMargin<string | number> | undefined;
    shapeOutside: csstype.Property.ShapeOutside | undefined;
    tabSize: csstype.Property.TabSize<string | number> | undefined;
    tableLayout: csstype.Property.TableLayout | undefined;
    textAlign: csstype.Property.TextAlign | undefined;
    textAlignLast: csstype.Property.TextAlignLast | undefined;
    textCombineUpright: csstype.Property.TextCombineUpright | undefined;
    textDecorationLine: csstype.Property.TextDecorationLine | undefined;
    textDecorationSkip: csstype.Property.TextDecorationSkip | undefined;
    textDecorationSkipInk: csstype.Property.TextDecorationSkipInk | undefined;
    textDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
    textDecorationThickness: csstype.Property.TextDecorationThickness<string | number> | undefined;
    textEmphasisColor: csstype.Property.TextEmphasisColor | undefined;
    textEmphasisPosition: csstype.Property.TextEmphasisPosition | undefined;
    textEmphasisStyle: csstype.Property.TextEmphasisStyle | undefined;
    textIndent: csstype.Property.TextIndent<string | number> | undefined;
    textJustify: csstype.Property.TextJustify | undefined;
    textOrientation: csstype.Property.TextOrientation | undefined;
    textOverflow: csstype.Property.TextOverflow | undefined;
    textRendering: csstype.Property.TextRendering | undefined;
    textSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
    textUnderlineOffset: csstype.Property.TextUnderlineOffset<string | number> | undefined;
    textUnderlinePosition: csstype.Property.TextUnderlinePosition | undefined;
    touchAction: csstype.Property.TouchAction | undefined;
    transform: csstype.Property.Transform | undefined;
    transformBox: csstype.Property.TransformBox | undefined;
    transformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
    transformStyle: csstype.Property.TransformStyle | undefined;
    transitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
    transitionProperty: csstype.Property.TransitionProperty | undefined;
    translate: csstype.Property.Translate<string | number> | undefined;
    unicodeBidi: csstype.Property.UnicodeBidi | undefined;
    userSelect: csstype.Property.UserSelect | undefined;
    verticalAlign: csstype.Property.VerticalAlign<string | number> | undefined;
    viewTransitionName: csstype.Property.ViewTransitionName | undefined;
    visibility: csstype.Property.Visibility | undefined;
    whiteSpace: csstype.Property.WhiteSpace | undefined;
    widows: csstype.Property.Widows | undefined;
    willChange: csstype.Property.WillChange | undefined;
    wordBreak: csstype.Property.WordBreak | undefined;
    wordSpacing: csstype.Property.WordSpacing<string | number> | undefined;
    wordWrap: csstype.Property.WordWrap | undefined;
    writingMode: csstype.Property.WritingMode | undefined;
    zIndex: csstype.Property.ZIndex | undefined;
    zoom: csstype.Property.Zoom | undefined;
    all: csstype.Globals | undefined;
    animation: csstype.Property.Animation<string & {}> | undefined;
    backgroundPosition: csstype.Property.BackgroundPosition<string | number> | undefined;
    borderBlock: csstype.Property.BorderBlock<string | number> | undefined;
    borderBlockEnd: csstype.Property.BorderBlockEnd<string | number> | undefined;
    borderBlockStart: csstype.Property.BorderBlockStart<string | number> | undefined;
    borderImage: csstype.Property.BorderImage | undefined;
    borderInline: csstype.Property.BorderInline<string | number> | undefined;
    borderInlineEnd: csstype.Property.BorderInlineEnd<string | number> | undefined;
    borderInlineStart: csstype.Property.BorderInlineStart<string | number> | undefined;
    borderStyle: csstype.Property.BorderStyle | undefined;
    caret: csstype.Property.Caret | undefined;
    columnRule: csstype.Property.ColumnRule<string | number> | undefined;
    columns: csstype.Property.Columns<string | number> | undefined;
    containIntrinsicSize: csstype.Property.ContainIntrinsicSize<string | number> | undefined;
    container: csstype.Property.Container | undefined;
    flex: csstype.Property.Flex<string | number> | undefined;
    flexFlow: csstype.Property.FlexFlow | undefined;
    grid: csstype.Property.Grid | undefined;
    gridArea: csstype.Property.GridArea | undefined;
    gridColumn: csstype.Property.GridColumn | undefined;
    gridRow: csstype.Property.GridRow | undefined;
    gridTemplate: csstype.Property.GridTemplate | undefined;
    inset: csstype.Property.Inset<string | number> | undefined;
    insetBlock: csstype.Property.InsetBlock<string | number> | undefined;
    insetInline: csstype.Property.InsetInline<string | number> | undefined;
    lineClamp: csstype.Property.LineClamp | undefined;
    listStyle: csstype.Property.ListStyle | undefined;
    marginBlock: csstype.Property.MarginBlock<string | number> | undefined;
    marginInline: csstype.Property.MarginInline<string | number> | undefined;
    mask: csstype.Property.Mask<string | number> | undefined;
    maskBorder: csstype.Property.MaskBorder | undefined;
    offset: csstype.Property.Offset<string | number> | undefined;
    outline: csstype.Property.Outline<string | number> | undefined;
    overflow: csstype.Property.Overflow | undefined;
    overscrollBehavior: csstype.Property.OverscrollBehavior | undefined;
    paddingBlock: csstype.Property.PaddingBlock<string | number> | undefined;
    paddingInline: csstype.Property.PaddingInline<string | number> | undefined;
    placeContent: csstype.Property.PlaceContent | undefined;
    placeItems: csstype.Property.PlaceItems | undefined;
    placeSelf: csstype.Property.PlaceSelf | undefined;
    scrollMarginBlock: csstype.Property.ScrollMarginBlock<string | number> | undefined;
    scrollMarginInline: csstype.Property.ScrollMarginInline<string | number> | undefined;
    scrollPaddingBlock: csstype.Property.ScrollPaddingBlock<string | number> | undefined;
    scrollPaddingInline: csstype.Property.ScrollPaddingInline<string | number> | undefined;
    scrollSnapMargin: csstype.Property.ScrollMargin<string | number> | undefined;
    scrollTimeline: csstype.Property.ScrollTimeline | undefined;
    textEmphasis: csstype.Property.TextEmphasis | undefined;
    transition: csstype.Property.Transition<string & {}> | undefined;
    MozAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
    MozAnimationDirection: csstype.Property.AnimationDirection | undefined;
    MozAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
    MozAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
    MozAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
    MozAnimationName: csstype.Property.AnimationName | undefined;
    MozAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
    MozAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
    MozAppearance: csstype.Property.MozAppearance | undefined;
    MozBackfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
    MozBinding: csstype.Property.MozBinding | undefined;
    MozBorderBottomColors: csstype.Property.MozBorderBottomColors | undefined;
    MozBorderEndColor: csstype.Property.BorderInlineEndColor | undefined;
    MozBorderEndStyle: csstype.Property.BorderInlineEndStyle | undefined;
    MozBorderEndWidth: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
    MozBorderLeftColors: csstype.Property.MozBorderLeftColors | undefined;
    MozBorderRightColors: csstype.Property.MozBorderRightColors | undefined;
    MozBorderStartColor: csstype.Property.BorderInlineStartColor | undefined;
    MozBorderStartStyle: csstype.Property.BorderInlineStartStyle | undefined;
    MozBorderTopColors: csstype.Property.MozBorderTopColors | undefined;
    MozBoxSizing: csstype.Property.BoxSizing | undefined;
    MozColumnCount: csstype.Property.ColumnCount | undefined;
    MozColumnFill: csstype.Property.ColumnFill | undefined;
    MozColumnRuleColor: csstype.Property.ColumnRuleColor | undefined;
    MozColumnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
    MozColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
    MozColumnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
    MozContextProperties: csstype.Property.MozContextProperties | undefined;
    MozFontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
    MozFontLanguageOverride: csstype.Property.FontLanguageOverride | undefined;
    MozHyphens: csstype.Property.Hyphens | undefined;
    MozImageRegion: csstype.Property.MozImageRegion | undefined;
    MozMarginEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
    MozMarginStart: csstype.Property.MarginInlineStart<string | number> | undefined;
    MozOrient: csstype.Property.MozOrient | undefined;
    MozOsxFontSmoothing: csstype.Property.FontSmooth<string | number> | undefined;
    MozPaddingEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
    MozPaddingStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
    MozPerspective: csstype.Property.Perspective<string | number> | undefined;
    MozPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
    MozStackSizing: csstype.Property.MozStackSizing | undefined;
    MozTabSize: csstype.Property.TabSize<string | number> | undefined;
    MozTextBlink: csstype.Property.MozTextBlink | undefined;
    MozTextSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
    MozTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
    MozTransformStyle: csstype.Property.TransformStyle | undefined;
    MozTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
    MozTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
    MozTransitionProperty: csstype.Property.TransitionProperty | undefined;
    MozTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
    MozUserFocus: csstype.Property.MozUserFocus | undefined;
    MozUserModify: csstype.Property.MozUserModify | undefined;
    MozUserSelect: csstype.Property.UserSelect | undefined;
    MozWindowDragging: csstype.Property.MozWindowDragging | undefined;
    MozWindowShadow: csstype.Property.MozWindowShadow | undefined;
    msAccelerator: csstype.Property.MsAccelerator | undefined;
    msBlockProgression: csstype.Property.MsBlockProgression | undefined;
    msContentZoomChaining: csstype.Property.MsContentZoomChaining | undefined;
    msContentZoomLimitMax: csstype.Property.MsContentZoomLimitMax | undefined;
    msContentZoomLimitMin: csstype.Property.MsContentZoomLimitMin | undefined;
    msContentZoomSnapPoints: csstype.Property.MsContentZoomSnapPoints | undefined;
    msContentZoomSnapType: csstype.Property.MsContentZoomSnapType | undefined;
    msContentZooming: csstype.Property.MsContentZooming | undefined;
    msFilter: csstype.Property.MsFilter | undefined;
    msFlexDirection: csstype.Property.FlexDirection | undefined;
    msFlexPositive: csstype.Property.FlexGrow | undefined;
    msFlowFrom: csstype.Property.MsFlowFrom | undefined;
    msFlowInto: csstype.Property.MsFlowInto | undefined;
    msGridColumns: csstype.Property.MsGridColumns<string | number> | undefined;
    msGridRows: csstype.Property.MsGridRows<string | number> | undefined;
    msHighContrastAdjust: csstype.Property.MsHighContrastAdjust | undefined;
    msHyphenateLimitChars: csstype.Property.MsHyphenateLimitChars | undefined;
    msHyphenateLimitLines: csstype.Property.MsHyphenateLimitLines | undefined;
    msHyphenateLimitZone: csstype.Property.MsHyphenateLimitZone<string | number> | undefined;
    msHyphens: csstype.Property.Hyphens | undefined;
    msImeAlign: csstype.Property.MsImeAlign | undefined;
    msLineBreak: csstype.Property.LineBreak | undefined;
    msOrder: csstype.Property.Order | undefined;
    msOverflowStyle: csstype.Property.MsOverflowStyle | undefined;
    msOverflowX: csstype.Property.OverflowX | undefined;
    msOverflowY: csstype.Property.OverflowY | undefined;
    msScrollChaining: csstype.Property.MsScrollChaining | undefined;
    msScrollLimitXMax: csstype.Property.MsScrollLimitXMax<string | number> | undefined;
    msScrollLimitXMin: csstype.Property.MsScrollLimitXMin<string | number> | undefined;
    msScrollLimitYMax: csstype.Property.MsScrollLimitYMax<string | number> | undefined;
    msScrollLimitYMin: csstype.Property.MsScrollLimitYMin<string | number> | undefined;
    msScrollRails: csstype.Property.MsScrollRails | undefined;
    msScrollSnapPointsX: csstype.Property.MsScrollSnapPointsX | undefined;
    msScrollSnapPointsY: csstype.Property.MsScrollSnapPointsY | undefined;
    msScrollSnapType: csstype.Property.MsScrollSnapType | undefined;
    msScrollTranslation: csstype.Property.MsScrollTranslation | undefined;
    msScrollbar3dlightColor: csstype.Property.MsScrollbar3dlightColor | undefined;
    msScrollbarArrowColor: csstype.Property.MsScrollbarArrowColor | undefined;
    msScrollbarBaseColor: csstype.Property.MsScrollbarBaseColor | undefined;
    msScrollbarDarkshadowColor: csstype.Property.MsScrollbarDarkshadowColor | undefined;
    msScrollbarFaceColor: csstype.Property.MsScrollbarFaceColor | undefined;
    msScrollbarHighlightColor: csstype.Property.MsScrollbarHighlightColor | undefined;
    msScrollbarShadowColor: csstype.Property.MsScrollbarShadowColor | undefined;
    msScrollbarTrackColor: csstype.Property.MsScrollbarTrackColor | undefined;
    msTextAutospace: csstype.Property.MsTextAutospace | undefined;
    msTextCombineHorizontal: csstype.Property.TextCombineUpright | undefined;
    msTextOverflow: csstype.Property.TextOverflow | undefined;
    msTouchAction: csstype.Property.TouchAction | undefined;
    msTouchSelect: csstype.Property.MsTouchSelect | undefined;
    msTransform: csstype.Property.Transform | undefined;
    msTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
    msTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
    msTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
    msTransitionProperty: csstype.Property.TransitionProperty | undefined;
    msTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
    msUserSelect: csstype.Property.MsUserSelect | undefined;
    msWordBreak: csstype.Property.WordBreak | undefined;
    msWrapFlow: csstype.Property.MsWrapFlow | undefined;
    msWrapMargin: csstype.Property.MsWrapMargin<string | number> | undefined;
    msWrapThrough: csstype.Property.MsWrapThrough | undefined;
    msWritingMode: csstype.Property.WritingMode | undefined;
    WebkitAlignContent: csstype.Property.AlignContent | undefined;
    WebkitAlignItems: csstype.Property.AlignItems | undefined;
    WebkitAlignSelf: csstype.Property.AlignSelf | undefined;
    WebkitAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
    WebkitAnimationDirection: csstype.Property.AnimationDirection | undefined;
    WebkitAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
    WebkitAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
    WebkitAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
    WebkitAnimationName: csstype.Property.AnimationName | undefined;
    WebkitAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
    WebkitAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
    WebkitAppearance: csstype.Property.WebkitAppearance | undefined;
    WebkitBackdropFilter: csstype.Property.BackdropFilter | undefined;
    WebkitBackfaceVisibility: csstype.Property.BackfaceVisibility | undefined;
    WebkitBackgroundClip: csstype.Property.BackgroundClip | undefined;
    WebkitBackgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
    WebkitBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
    WebkitBorderBeforeColor: csstype.Property.WebkitBorderBeforeColor | undefined;
    WebkitBorderBeforeStyle: csstype.Property.WebkitBorderBeforeStyle | undefined;
    WebkitBorderBeforeWidth: csstype.Property.WebkitBorderBeforeWidth<string | number> | undefined;
    WebkitBorderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
    WebkitBorderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
    WebkitBorderImageSlice: csstype.Property.BorderImageSlice | undefined;
    WebkitBorderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
    WebkitBorderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number> | undefined;
    WebkitBoxDecorationBreak: csstype.Property.BoxDecorationBreak | undefined;
    WebkitBoxReflect: csstype.Property.WebkitBoxReflect<string | number> | undefined;
    WebkitBoxShadow: csstype.Property.BoxShadow | undefined;
    WebkitBoxSizing: csstype.Property.BoxSizing | undefined;
    WebkitClipPath: csstype.Property.ClipPath | undefined;
    WebkitColumnCount: csstype.Property.ColumnCount | undefined;
    WebkitColumnFill: csstype.Property.ColumnFill | undefined;
    WebkitColumnRuleColor: csstype.Property.ColumnRuleColor | undefined;
    WebkitColumnRuleStyle: csstype.Property.ColumnRuleStyle | undefined;
    WebkitColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number> | undefined;
    WebkitColumnSpan: csstype.Property.ColumnSpan | undefined;
    WebkitColumnWidth: csstype.Property.ColumnWidth<string | number> | undefined;
    WebkitFilter: csstype.Property.Filter | undefined;
    WebkitFlexBasis: csstype.Property.FlexBasis<string | number> | undefined;
    WebkitFlexDirection: csstype.Property.FlexDirection | undefined;
    WebkitFlexGrow: csstype.Property.FlexGrow | undefined;
    WebkitFlexShrink: csstype.Property.FlexShrink | undefined;
    WebkitFlexWrap: csstype.Property.FlexWrap | undefined;
    WebkitFontFeatureSettings: csstype.Property.FontFeatureSettings | undefined;
    WebkitFontKerning: csstype.Property.FontKerning | undefined;
    WebkitFontSmoothing: csstype.Property.FontSmooth<string | number> | undefined;
    WebkitFontVariantLigatures: csstype.Property.FontVariantLigatures | undefined;
    WebkitHyphenateCharacter: csstype.Property.HyphenateCharacter | undefined;
    WebkitHyphens: csstype.Property.Hyphens | undefined;
    WebkitInitialLetter: csstype.Property.InitialLetter | undefined;
    WebkitJustifyContent: csstype.Property.JustifyContent | undefined;
    WebkitLineBreak: csstype.Property.LineBreak | undefined;
    WebkitLineClamp: csstype.Property.WebkitLineClamp | undefined;
    WebkitMarginEnd: csstype.Property.MarginInlineEnd<string | number> | undefined;
    WebkitMarginStart: csstype.Property.MarginInlineStart<string | number> | undefined;
    WebkitMaskAttachment: csstype.Property.WebkitMaskAttachment | undefined;
    WebkitMaskBoxImageOutset: csstype.Property.MaskBorderOutset<string | number> | undefined;
    WebkitMaskBoxImageRepeat: csstype.Property.MaskBorderRepeat | undefined;
    WebkitMaskBoxImageSlice: csstype.Property.MaskBorderSlice | undefined;
    WebkitMaskBoxImageSource: csstype.Property.MaskBorderSource | undefined;
    WebkitMaskBoxImageWidth: csstype.Property.MaskBorderWidth<string | number> | undefined;
    WebkitMaskClip: csstype.Property.WebkitMaskClip | undefined;
    WebkitMaskComposite: csstype.Property.WebkitMaskComposite | undefined;
    WebkitMaskImage: csstype.Property.WebkitMaskImage | undefined;
    WebkitMaskOrigin: csstype.Property.WebkitMaskOrigin | undefined;
    WebkitMaskPosition: csstype.Property.WebkitMaskPosition<string | number> | undefined;
    WebkitMaskPositionX: csstype.Property.WebkitMaskPositionX<string | number> | undefined;
    WebkitMaskPositionY: csstype.Property.WebkitMaskPositionY<string | number> | undefined;
    WebkitMaskRepeat: csstype.Property.WebkitMaskRepeat | undefined;
    WebkitMaskRepeatX: csstype.Property.WebkitMaskRepeatX | undefined;
    WebkitMaskRepeatY: csstype.Property.WebkitMaskRepeatY | undefined;
    WebkitMaskSize: csstype.Property.WebkitMaskSize<string | number> | undefined;
    WebkitMaxInlineSize: csstype.Property.MaxInlineSize<string | number> | undefined;
    WebkitOrder: csstype.Property.Order | undefined;
    WebkitOverflowScrolling: csstype.Property.WebkitOverflowScrolling | undefined;
    WebkitPaddingEnd: csstype.Property.PaddingInlineEnd<string | number> | undefined;
    WebkitPaddingStart: csstype.Property.PaddingInlineStart<string | number> | undefined;
    WebkitPerspective: csstype.Property.Perspective<string | number> | undefined;
    WebkitPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number> | undefined;
    WebkitPrintColorAdjust: csstype.Property.PrintColorAdjust | undefined;
    WebkitRubyPosition: csstype.Property.RubyPosition | undefined;
    WebkitScrollSnapType: csstype.Property.ScrollSnapType | undefined;
    WebkitShapeMargin: csstype.Property.ShapeMargin<string | number> | undefined;
    WebkitTapHighlightColor: csstype.Property.WebkitTapHighlightColor | undefined;
    WebkitTextCombine: csstype.Property.TextCombineUpright | undefined;
    WebkitTextDecorationColor: csstype.Property.TextDecorationColor | undefined;
    WebkitTextDecorationLine: csstype.Property.TextDecorationLine | undefined;
    WebkitTextDecorationSkip: csstype.Property.TextDecorationSkip | undefined;
    WebkitTextDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
    WebkitTextEmphasisColor: csstype.Property.TextEmphasisColor | undefined;
    WebkitTextEmphasisPosition: csstype.Property.TextEmphasisPosition | undefined;
    WebkitTextEmphasisStyle: csstype.Property.TextEmphasisStyle | undefined;
    WebkitTextFillColor: csstype.Property.WebkitTextFillColor | undefined;
    WebkitTextOrientation: csstype.Property.TextOrientation | undefined;
    WebkitTextSizeAdjust: csstype.Property.TextSizeAdjust | undefined;
    WebkitTextStrokeColor: csstype.Property.WebkitTextStrokeColor | undefined;
    WebkitTextStrokeWidth: csstype.Property.WebkitTextStrokeWidth<string | number> | undefined;
    WebkitTextUnderlinePosition: csstype.Property.TextUnderlinePosition | undefined;
    WebkitTouchCallout: csstype.Property.WebkitTouchCallout | undefined;
    WebkitTransform: csstype.Property.Transform | undefined;
    WebkitTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
    WebkitTransformStyle: csstype.Property.TransformStyle | undefined;
    WebkitTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
    WebkitTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
    WebkitTransitionProperty: csstype.Property.TransitionProperty | undefined;
    WebkitTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
    WebkitUserModify: csstype.Property.WebkitUserModify | undefined;
    WebkitUserSelect: csstype.Property.UserSelect | undefined;
    WebkitWritingMode: csstype.Property.WritingMode | undefined;
    MozAnimation: csstype.Property.Animation<string & {}> | undefined;
    MozBorderImage: csstype.Property.BorderImage | undefined;
    MozColumnRule: csstype.Property.ColumnRule<string | number> | undefined;
    MozColumns: csstype.Property.Columns<string | number> | undefined;
    MozTransition: csstype.Property.Transition<string & {}> | undefined;
    msContentZoomLimit: csstype.Property.MsContentZoomLimit | undefined;
    msContentZoomSnap: csstype.Property.MsContentZoomSnap | undefined;
    msFlex: csstype.Property.Flex<string | number> | undefined;
    msScrollLimit: csstype.Property.MsScrollLimit | undefined;
    msScrollSnapX: csstype.Property.MsScrollSnapX | undefined;
    msScrollSnapY: csstype.Property.MsScrollSnapY | undefined;
    msTransition: csstype.Property.Transition<string & {}> | undefined;
    WebkitAnimation: csstype.Property.Animation<string & {}> | undefined;
    WebkitBorderBefore: csstype.Property.WebkitBorderBefore<string | number> | undefined;
    WebkitBorderImage: csstype.Property.BorderImage | undefined;
    WebkitBorderRadius: csstype.Property.BorderRadius<string | number> | undefined;
    WebkitColumnRule: csstype.Property.ColumnRule<string | number> | undefined;
    WebkitColumns: csstype.Property.Columns<string | number> | undefined;
    WebkitFlex: csstype.Property.Flex<string | number> | undefined;
    WebkitFlexFlow: csstype.Property.FlexFlow | undefined;
    WebkitMask: csstype.Property.WebkitMask<string | number> | undefined;
    WebkitMaskBoxImage: csstype.Property.MaskBorder | undefined;
    WebkitTextEmphasis: csstype.Property.TextEmphasis | undefined;
    WebkitTextStroke: csstype.Property.WebkitTextStroke<string | number> | undefined;
    WebkitTransition: csstype.Property.Transition<string & {}> | undefined;
    azimuth: csstype.Property.Azimuth | undefined;
    boxAlign: csstype.Property.BoxAlign | undefined;
    boxDirection: csstype.Property.BoxDirection | undefined;
    boxFlex: csstype.Property.BoxFlex | undefined;
    boxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
    boxLines: csstype.Property.BoxLines | undefined;
    boxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
    boxOrient: csstype.Property.BoxOrient | undefined;
    boxPack: csstype.Property.BoxPack | undefined;
    clip: csstype.Property.Clip | undefined;
    imeMode: csstype.Property.ImeMode | undefined;
    offsetBlock: csstype.Property.InsetBlock<string | number> | undefined;
    offsetBlockEnd: csstype.Property.InsetBlockEnd<string | number> | undefined;
    offsetBlockStart: csstype.Property.InsetBlockStart<string | number> | undefined;
    offsetInline: csstype.Property.InsetInline<string | number> | undefined;
    offsetInlineEnd: csstype.Property.InsetInlineEnd<string | number> | undefined;
    offsetInlineStart: csstype.Property.InsetInlineStart<string | number> | undefined;
    scrollSnapCoordinate: csstype.Property.ScrollSnapCoordinate<string | number> | undefined;
    scrollSnapDestination: csstype.Property.ScrollSnapDestination<string | number> | undefined;
    scrollSnapPointsX: csstype.Property.ScrollSnapPointsX | undefined;
    scrollSnapPointsY: csstype.Property.ScrollSnapPointsY | undefined;
    scrollSnapTypeX: csstype.Property.ScrollSnapTypeX | undefined;
    scrollSnapTypeY: csstype.Property.ScrollSnapTypeY | undefined;
    KhtmlBoxAlign: csstype.Property.BoxAlign | undefined;
    KhtmlBoxDirection: csstype.Property.BoxDirection | undefined;
    KhtmlBoxFlex: csstype.Property.BoxFlex | undefined;
    KhtmlBoxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
    KhtmlBoxLines: csstype.Property.BoxLines | undefined;
    KhtmlBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
    KhtmlBoxOrient: csstype.Property.BoxOrient | undefined;
    KhtmlBoxPack: csstype.Property.BoxPack | undefined;
    KhtmlLineBreak: csstype.Property.LineBreak | undefined;
    KhtmlOpacity: csstype.Property.Opacity | undefined;
    KhtmlUserSelect: csstype.Property.UserSelect | undefined;
    MozBackgroundClip: csstype.Property.BackgroundClip | undefined;
    MozBackgroundInlinePolicy: csstype.Property.BoxDecorationBreak | undefined;
    MozBackgroundOrigin: csstype.Property.BackgroundOrigin | undefined;
    MozBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
    MozBorderRadius: csstype.Property.BorderRadius<string | number> | undefined;
    MozBorderRadiusBottomleft: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
    MozBorderRadiusBottomright: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
    MozBorderRadiusTopleft: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
    MozBorderRadiusTopright: csstype.Property.BorderTopRightRadius<string | number> | undefined;
    MozBoxAlign: csstype.Property.BoxAlign | undefined;
    MozBoxDirection: csstype.Property.BoxDirection | undefined;
    MozBoxFlex: csstype.Property.BoxFlex | undefined;
    MozBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
    MozBoxOrient: csstype.Property.BoxOrient | undefined;
    MozBoxPack: csstype.Property.BoxPack | undefined;
    MozBoxShadow: csstype.Property.BoxShadow | undefined;
    MozFloatEdge: csstype.Property.MozFloatEdge | undefined;
    MozForceBrokenImageIcon: csstype.Property.MozForceBrokenImageIcon | undefined;
    MozOpacity: csstype.Property.Opacity | undefined;
    MozOutline: csstype.Property.Outline<string | number> | undefined;
    MozOutlineColor: csstype.Property.OutlineColor | undefined;
    MozOutlineRadius: csstype.Property.MozOutlineRadius<string | number> | undefined;
    MozOutlineRadiusBottomleft: csstype.Property.MozOutlineRadiusBottomleft<string | number> | undefined;
    MozOutlineRadiusBottomright: csstype.Property.MozOutlineRadiusBottomright<string | number> | undefined;
    MozOutlineRadiusTopleft: csstype.Property.MozOutlineRadiusTopleft<string | number> | undefined;
    MozOutlineRadiusTopright: csstype.Property.MozOutlineRadiusTopright<string | number> | undefined;
    MozOutlineStyle: csstype.Property.OutlineStyle | undefined;
    MozOutlineWidth: csstype.Property.OutlineWidth<string | number> | undefined;
    MozTextAlignLast: csstype.Property.TextAlignLast | undefined;
    MozTextDecorationColor: csstype.Property.TextDecorationColor | undefined;
    MozTextDecorationLine: csstype.Property.TextDecorationLine | undefined;
    MozTextDecorationStyle: csstype.Property.TextDecorationStyle | undefined;
    MozUserInput: csstype.Property.MozUserInput | undefined;
    msImeMode: csstype.Property.ImeMode | undefined;
    OAnimation: csstype.Property.Animation<string & {}> | undefined;
    OAnimationDelay: csstype.Property.AnimationDelay<string & {}> | undefined;
    OAnimationDirection: csstype.Property.AnimationDirection | undefined;
    OAnimationDuration: csstype.Property.AnimationDuration<string & {}> | undefined;
    OAnimationFillMode: csstype.Property.AnimationFillMode | undefined;
    OAnimationIterationCount: csstype.Property.AnimationIterationCount | undefined;
    OAnimationName: csstype.Property.AnimationName | undefined;
    OAnimationPlayState: csstype.Property.AnimationPlayState | undefined;
    OAnimationTimingFunction: csstype.Property.AnimationTimingFunction | undefined;
    OBackgroundSize: csstype.Property.BackgroundSize<string | number> | undefined;
    OBorderImage: csstype.Property.BorderImage | undefined;
    OObjectFit: csstype.Property.ObjectFit | undefined;
    OObjectPosition: csstype.Property.ObjectPosition<string | number> | undefined;
    OTabSize: csstype.Property.TabSize<string | number> | undefined;
    OTextOverflow: csstype.Property.TextOverflow | undefined;
    OTransform: csstype.Property.Transform | undefined;
    OTransformOrigin: csstype.Property.TransformOrigin<string | number> | undefined;
    OTransition: csstype.Property.Transition<string & {}> | undefined;
    OTransitionDelay: csstype.Property.TransitionDelay<string & {}> | undefined;
    OTransitionDuration: csstype.Property.TransitionDuration<string & {}> | undefined;
    OTransitionProperty: csstype.Property.TransitionProperty | undefined;
    OTransitionTimingFunction: csstype.Property.TransitionTimingFunction | undefined;
    WebkitBoxAlign: csstype.Property.BoxAlign | undefined;
    WebkitBoxDirection: csstype.Property.BoxDirection | undefined;
    WebkitBoxFlex: csstype.Property.BoxFlex | undefined;
    WebkitBoxFlexGroup: csstype.Property.BoxFlexGroup | undefined;
    WebkitBoxLines: csstype.Property.BoxLines | undefined;
    WebkitBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup | undefined;
    WebkitBoxOrient: csstype.Property.BoxOrient | undefined;
    WebkitBoxPack: csstype.Property.BoxPack | undefined;
    WebkitScrollSnapPointsX: csstype.Property.ScrollSnapPointsX | undefined;
    WebkitScrollSnapPointsY: csstype.Property.ScrollSnapPointsY | undefined;
    alignmentBaseline: csstype.Property.AlignmentBaseline | undefined;
    baselineShift: csstype.Property.BaselineShift<string | number> | undefined;
    clipRule: csstype.Property.ClipRule | undefined;
    colorInterpolation: csstype.Property.ColorInterpolation | undefined;
    colorRendering: csstype.Property.ColorRendering | undefined;
    dominantBaseline: csstype.Property.DominantBaseline | undefined;
    fillOpacity: csstype.Property.FillOpacity | undefined;
    fillRule: csstype.Property.FillRule | undefined;
    floodColor: csstype.Property.FloodColor | undefined;
    floodOpacity: csstype.Property.FloodOpacity | undefined;
    glyphOrientationVertical: csstype.Property.GlyphOrientationVertical | undefined;
    lightingColor: csstype.Property.LightingColor | undefined;
    marker: csstype.Property.Marker | undefined;
    markerEnd: csstype.Property.MarkerEnd | undefined;
    markerMid: csstype.Property.MarkerMid | undefined;
    markerStart: csstype.Property.MarkerStart | undefined;
    shapeRendering: csstype.Property.ShapeRendering | undefined;
    stopColor: csstype.Property.StopColor | undefined;
    stopOpacity: csstype.Property.StopOpacity | undefined;
    strokeDasharray: csstype.Property.StrokeDasharray<string | number> | undefined;
    strokeDashoffset: csstype.Property.StrokeDashoffset<string | number> | undefined;
    strokeLinecap: csstype.Property.StrokeLinecap | undefined;
    strokeLinejoin: csstype.Property.StrokeLinejoin | undefined;
    strokeMiterlimit: csstype.Property.StrokeMiterlimit | undefined;
    strokeOpacity: csstype.Property.StrokeOpacity | undefined;
    strokeWidth: csstype.Property.StrokeWidth<string | number> | undefined;
    textAnchor: csstype.Property.TextAnchor | undefined;
    vectorEffect: csstype.Property.VectorEffect | undefined;
};

type UseDetectBadImagePropTypes = {
    imageUrl?: string;
};
declare const imageUrlChecks: RegExp;
/**
 * This function uses React hooks to detect if an image URL is valid or not.
 * @param {UseDetectBadImagePropTypes}  - The function `useDetectBadImage` takes in an object with a
 * single property `imageUrl`, which is a string representing the URL of an image. The object is of
 * type `UseDetectBadImagePropTypes`, which is not shown in the code snippet but is likely defined
 * elsewhere in the codebase.
 * @returns a boolean value indicating whether the provided image URL is valid or not. The validity of
 * the image is determined by attempting to load the image using an HTMLImageElement and checking if it
 * successfully loads or not. If the image loads successfully, the function returns true, otherwise it
 * returns false.
 */
declare function useDetectBadImage({ imageUrl, }: UseDetectBadImagePropTypes): boolean;

type UseDetectSvgImagePropTypes = {
    imageUrl?: string;
};
/**
 * This function detects whether an image URL is an SVG image or not.
 * @param {UseDetectSvgImagePropTypes}  - The function `useDetectSvgImage` takes in an object with a
 * single property `imageUrl`, which is a string representing the URL of an image. The function returns
 * a boolean value indicating whether the image at the given URL is an SVG image or not.
 * @returns The function `useDetectSvgImage` returns a boolean value indicating whether the provided
 * image URL is an SVG image or not.
 */
declare function useDetectSvgImage({ imageUrl, }: UseDetectSvgImagePropTypes): boolean;

/**
 * This is a TypeScript function that adds an event listener to a specified DOM element or the window
 * and removes it on cleanup.
 * @param {keyof WindowEventMap | string} eventName - The name of the event to listen for, which can be
 * a key of the `WindowEventMap` interface or a custom event name as a string.
 * @param handler - The function that will be called when the event is triggered. It takes an event
 * object as its argument.
 * @param {RefObject<T> | MutableRefObject<T>} [domRef] - `domRef` is an optional parameter that can be
 * a `RefObject` or `MutableRefObject` that points to the DOM element that the event listener should be
 * attached to. If `domRef` is not provided, the event listener will be attached to the `window`
 * object.
 */
declare function useEventListener<T extends HTMLElement | Document | Window | ShadowRoot = HTMLDivElement, E extends Event = Event>(eventName: keyof WindowEventMap | string, // string to allow custom event
handler: (event: E) => void, domRef?: RefObject<T> | MutableRefObject<T>): void;

/**
 * This is a TypeScript function that creates a local DOM reference and forwards it to parent
 * components.
 * @param domRef - A reference to an HTML or SVG element that is passed in as a parameter to the custom
 * hook. This reference is used to forward the local DOM reference to parent components.
 * @returns The `useForwardLocalDomRef` function returns a `Ref` object that refers to a local DOM
 * element. This local DOM element is stored in the `localDomRef` variable, which is created using the
 * `useRef` hook. The function also updates the `domRef` object passed as an argument to refer to the
 * same local DOM element, so that it can be accessed by parent
 */
declare function useForwardLocalDomRef<TElement extends HTMLElement>(domRef: Ref<TElement>): react.RefObject<TElement>;

declare function useGetCurrentSizeClass<Size extends string>(size: MakeResponsive<Size>, defaultSize: Size, safeSizes: SafeSizes): Size;

/**
 * This function returns the first child element that matches a given subcomponent or an array of
 * subcomponents.
 * @param {ReactNode} children - The `children` parameter is a ReactNode, which represents the child
 * elements passed to a component. It can be a single child element or an array of child elements.
 * @param {ComponentType<TProps> | Array<ComponentType<TProps>>} subcomponent - The `subcomponent`
 * parameter is either a single React component or an array of React components that the function is
 * searching for within the `children` prop. The function returns the first matching child element that
 * is a subcomponent of the specified `subcomponent`.
 * @returns The function `useGetSubcomponentChild` returns a React element of type
 * `ReactElement<TProps>` or `undefined`. It takes two arguments: `children` of type `ReactNode` and
 * `subcomponent` of type `ComponentType<TProps> | Array<ComponentType<TProps>>`. The function uses
 * `Children.toArray` to convert the `children` prop to an array and then uses
 */
declare function useGetSubcomponentChild<TProps>(children: ReactNode, subcomponent: ComponentType<TProps> | Array<ComponentType<TProps>>): ReactElement<TProps, string | react.JSXElementConstructor<any>> | undefined;

/**
 * This function filters and returns an array of React elements that are either direct children or
 * nested within a smart clone of a specified subcomponent.
 * @param {ReactNode} children - The children prop is a special prop in React that allows components to
 * pass children elements (components, text, etc.) to other components. It is typically used to compose
 * components and create complex UIs. In this function, the children prop is being passed as an
 * argument and is expected to be a React
 * @param subcomponent - The subcomponent parameter is a React component type that is expected to be a
 * child of the parent component. The function filters through the children of the parent component and
 * returns an array of React elements that match the subcomponent type.
 * @returns The function `useGetSubcomponentChildren` returns an array of React elements that are
 * either direct children of the specified `subcomponent` or nested within a smart clone of the
 * `subcomponent`. The function takes two arguments: `children`, which is a ReactNode representing the
 * children of a component, and `subcomponent`, which is a ComponentType representing the subcomponent
 * whose children are being filtered.
 */
declare function useGetSubcomponentChildren<TProps>(children: ReactNode, subcomponent: ComponentType<TProps>): ReactElement<TProps, string | react.JSXElementConstructor<any>>[] | undefined;

/**
 * This is a TypeScript function that uses React hooks to detect when a mouse is hovering over a
 * specified HTML element.
 * @param [domRef] - A reference to the DOM element that you want to track hover events on. It is an
 * optional parameter and if not provided, the hook will track hover events on the entire document.
 * @param {number} [mouseLeaveDelay=0] - `mouseLeaveDelay` is an optional parameter that specifies the
 * delay (in milliseconds) before the `hovering` state is set to `false` after the mouse leaves the
 * element. If `mouseLeaveDelay` is not provided or is set to 0, the `hovering` state will
 * @returns The `useHover` function returns a boolean value indicating whether the element referenced
 * by the `domRef` is currently being hovered over by the mouse cursor.
 */
declare function useHover<T extends HTMLElement = HTMLElement>(domRef?: RefObject<T>, mouseLeaveDelay?: number): boolean;

/**
 * The function `useInterval` sets up an interval that repeatedly calls a given callback function with
 * a specified time interval.
 * @param callback - A function that will be called repeatedly at the specified interval.
 * @param {number} interval - The `interval` parameter is a number that represents the time interval
 * (in milliseconds) at which the `callback` function should be called repeatedly.
 * @returns The `useInterval` hook is returning a `ref` object that holds the ID of the interval set by
 * `window.setInterval()`. This `ref` can be used to clear the interval using `window.clearInterval()`.
 */
declare function useInterval(callback: () => void, interval: number): react.MutableRefObject<number | undefined>;

/**
 * This is a TypeScript function that uses local storage to store and retrieve a value, with a default
 * value provided if none exists.
 * @param {string} key - The key is a string that is used as the key to store and retrieve the value
 * from the local storage. It should be unique and descriptive enough to identify the value it
 * represents.
 * @param {ValueType} defaultValue - The default value to be used if there is no value stored in the
 * localStorage for the given key. It should be of type ValueType, which is a generic type parameter
 * that extends the string type.
 * @returns The function `useLocalStorage` returns an array with two elements: the current value stored
 * in local storage (or the default value if no value is found), and a function to update the value in
 * local storage. The first element in the array has a type of `ValueType`, which is a generic type
 * that is inferred from the `defaultValue` argument passed to the function. The second element in the
 * array
 */
declare function useLocalStorage<ValueType extends string>(key: string, defaultValue: ValueType): [ValueType, Dispatch<ValueType>];

/**
 * This function listens for clicks/touches outside of specified elements and triggers a handler
 * function when detected.
 * @param elementRefs - An array of RefObject or undefined elements that represent the elements that
 * should not trigger the handler when clicked.
 * @param handler - The function that will be called when a click event occurs outside of the specified
 * elementRefs.
 */
declare function useOnClickOutside<T extends HTMLElement>(elementRefs: (RefObject<T> | undefined)[] | undefined, handler: () => void): void;

type ResizeState = {
    width: number;
    height: number;
};
/**
 * This is a TypeScript function that uses the ResizeObserver API to track changes in the dimensions of
 * a specified HTML element and returns the updated dimensions.
 * @param elementRef - A reference to the DOM element that you want to observe for changes in size.
 * @param [debounceDuration=60] - `debounceDuration` is an optional parameter that specifies the
 * duration (in milliseconds) to wait before updating the dimensions after a resize event. It is used
 * to prevent the `setDimensions` function from being called too frequently and causing performance
 * issues. The default value is 60 milliseconds.
 * @returns The `useResizeObserver` hook returns an object containing the current dimensions of the
 * observed element, which includes its width and height.
 */
declare function useResizeObserver(elementRef: RefObject<HTMLElement>, debounceDuration?: number): ResizeState;

/**
 * This function separates React children into subcomponents and other children based on a specified
 * subcomponent type.
 * @param {ReactNode} children - `children` is a prop that is passed to a React component and
 * represents the child elements that are nested within the component. It can be a single child element
 * or an array of child elements.
 * @param subcomponent - The `subcomponent` parameter is a React component type that is expected to be
 * a child of the `children` parameter. The function will split the `children` into two arrays: one
 * containing all the `subcomponent` instances, and the other containing all the other children.
 * @returns An object with two properties: `subComponents` and `otherChildren`. `subComponents` is an
 * array of React nodes that are subcomponents of the specified `subcomponent` type, and
 * `otherChildren` is an array of all other React nodes that are not subcomponents of the specified
 * `subcomponent` type.
 */
declare function useSplitApartChildrenAndSubComponents(children: ReactNode, subcomponents: ComponentType<any> | ComponentType<any>[]): {
    subcomponents: ReactNode[];
    otherChildren: ReactNode;
};

/**
 * This function returns the current theme as a BiomeTheme object using the useEmotionTheme hook.
 * @returns The `useTheme` function is returning the `theme` object as a `BiomeTheme`.
 */
declare function useTheme(): BiomeTheme;

/**
 * This is a TypeScript function that sets a timeout and returns a reference to it.
 * @param callback - A function that will be executed after the specified delay has elapsed.
 * @param {number} delay - The delay parameter is a number that represents the amount of time, in
 * milliseconds, that the timeout should wait before executing the callback function.
 * @returns The `useTimeout` function returns a `timeoutRef` object which is a reference to the timeout
 * ID returned by `window.setTimeout`. This can be used to clear the timeout using
 * `window.clearTimeout(timeoutRef.current)`.
 */
declare function useTimeout(callback: () => void, delay: number): react.MutableRefObject<number | undefined>;

type DrawerOverlayProps = {
    hasExternalContainer?: boolean;
};
declare function DrawerOverlay({ hasExternalContainer }: DrawerOverlayProps): _emotion_react_jsx_runtime.JSX.Element;

type ModalOverlayProps = {
    hasExternalContainer?: boolean;
};
declare function ModalOverlay({ hasExternalContainer }: ModalOverlayProps): _emotion_react_jsx_runtime.JSX.Element;

declare function PopoverOverlay(): _emotion_react_jsx_runtime.JSX.Element;

declare function TooltipOverlay(): _emotion_react_jsx_runtime.JSX.Element | null;

type MountedOverlayAndProviderProps<T> = {
    children: ReactNode;
    modalContainerId?: StringWithoutHash<T>;
    drawerContainerId?: StringWithoutHash<T>;
    popoverContainerId?: StringWithoutHash<T>;
    toastContainerId?: StringWithoutHash<T>;
};

type FastContextDispatchAction = {
    type: string;
    payload: {
        id: string;
        [key: string]: unknown;
    };
};
declare function createFastContext<Store>(initialState: Store, reducer?: (store: Store, action: FastContextDispatchAction) => Store): {
    Provider: {
        ({ children }: {
            children: ReactNode;
        }): _emotion_react_jsx_runtime.JSX.Element;
        displayName: string;
    };
    useStore: <SelectorOutput>(selector: (store: Store) => SelectorOutput) => {
        state: SelectorOutput;
        setState: (value: Partial<Store>) => void;
        dispatchAction: (action: FastContextDispatchAction) => void;
    };
};

type WindowSizeStore = {
    width: number | null;
    height: number | null;
};
declare const useWindowSizeStore: <SelectorOutput>(selector: (store: WindowSizeStore) => SelectorOutput) => {
    state: SelectorOutput;
    setState: (value: Partial<WindowSizeStore>) => void;
    dispatchAction: (action: FastContextDispatchAction) => void;
};

type SetWindowSizeProps = {
    resizeDebounceDuration?: number;
};

type InputTheme = DesignTokens & Pick<BiomeTheme, 'components'>;

type BiomeThemeProviderProps = {
    theme?: InputTheme;
    children: ReactNode;
    globalSx?: DeeplyNestedSx;
};
declare function BiomeThemeProvider({ children, theme, globalSx, }: BiomeThemeProviderProps): _emotion_react_jsx_runtime.JSX.Element;

type GetThemeToggleProps<ThemeToggle extends boolean | undefined> = ThemeToggle extends true ? {
    withThemeToggle: ThemeToggle;
    autoPickTheme?: boolean;
    lightTheme?: InputTheme;
    darkTheme?: InputTheme;
} : ThemeToggle extends false ? {
    withThemeToggle: ThemeToggle;
    theme?: InputTheme;
} : {
    withThemeToggle?: never;
    theme?: InputTheme;
};
type BiomeCombinedProvidersProps<Id extends string, ThemeToggle extends boolean | undefined> = Omit<BiomeThemeProviderProps, 'theme'> & SetWindowSizeProps & MountedOverlayAndProviderProps<Id> & GetThemeToggleProps<ThemeToggle> & {
    shadowRoot?: ShadowRoot;
};
declare function BiomeCombinedProviders<Id extends string, ThemeToggle extends boolean | undefined = undefined>(props: BiomeCombinedProvidersProps<Id, ThemeToggle>): _emotion_react_jsx_runtime.JSX.Element;

declare const useOverlaysStore: <SelectorOutput>(selector: (store: OverlayStore) => SelectorOutput) => {
    state: SelectorOutput;
    setState: (value: Partial<OverlayStore>) => void;
    dispatchAction: (action: FastContextDispatchAction) => void;
};

declare const BiomePortalIdContext: react.Context<string | undefined>;
declare function BiomePortalIdProvider({ children }: {
    children: ReactNode;
}): _emotion_react_jsx_runtime.JSX.Element;

declare const useTooltipStore: <SelectorOutput>(selector: (store: TooltipContext) => SelectorOutput) => {
    state: SelectorOutput;
    setState: (value: Partial<TooltipContext>) => void;
    dispatchAction: (action: FastContextDispatchAction) => void;
};

declare function ToggleableThemeProvider({ children, lightTheme, darkTheme, autoPickTheme, globalSx, }: {
    children: ReactNode;
    lightTheme?: InputTheme;
    darkTheme?: InputTheme;
    autoPickTheme?: boolean;
    globalSx?: DeeplyNestedSx;
}): _emotion_react_jsx_runtime.JSX.Element;
declare const useToggleableTheme: () => {
    toggleTheme: () => void;
    currentTheme: typeof designTokens;
};

declare const artificialDelay: (time: number) => Promise<void>;

declare function hexToRgb(hex: string): {
    r: number;
    g: number;
    b: number;
    a?: number;
};
declare function hexToRgbString(hex: string): string;
declare function hexToRgbaString(hex: string, alpha: number): string;
declare function hexWithAlphaToRgbaString(hex: string): string;
declare function rgbaToHex(rgba: string): string;

type ReactElementWithRef = ReactElement & {
    ref?: HTMLOrSVGElement;
};
declare const cloneElementWithCssProp: (element: ReactElementWithRef, props: Record<string, unknown>) => react.CElement<any, react.Component<any, any, any>>;
declare const isReactFragment: (child: ReactNode) => boolean;
declare function isChildReactComponent(child: any): boolean;
declare const serializeChildren: (children: ReactNode | unknown) => string;
declare function warnUser(message: string): void;
declare function renderNullAndWarnUser(componentName: string, errorMessage?: string): null;
declare const noop: () => void;

declare const isRuntimeInsideNodeServer: () => boolean;
declare const isTouchDevice: () => boolean;

declare const DUMMY_RASTER_IMAGE_URL = "https://biome.immutable.com/hosted-assets/demo-images/frog.png";
declare const DUMMY_VECTOR_IMAGE_URL = "https://biome.immutable.com/hosted-assets/currency-icons/currency--eth.svg";
declare const DUMMY_RASTER_IMAGE_2_URL = "https://biome.immutable.com/hosted-assets/demo-images/tree-dude.jpg";
declare const DUMMY_RASTER_IMAGE_3_URL = "https://biome.immutable.com/hosted-assets/demo-images/pastelle-gradients.png";
declare const IMX_TOKEN_IMAGE_URL = "https://biome.immutable.com/hosted-assets/currency-icons/currency--imx.svg";
declare const GODS_TOKEN_IMAGE_URL = "https://biome.immutable.com/hosted-assets/currency-icons/currency--gods.svg";
declare const ETH_TOKEN_IMAGE_URL = "https://biome.immutable.com/hosted-assets/currency-icons/currency--eth.svg";
declare const GOG_TOKEN_IMAGE_URL = "https://biome.immutable.com/hosted-assets/currency-icons/currency--gog.svg";
declare const DARK_ON_LIGHT_FALLBACK_IMAGE_URL = "https://biome.immutable.com/hosted-assets/images/defaultTokenImage--darkOnLight.svg";
declare const LIGHT_ON_DARK_FALLBACK_IMAGE_URL = "https://biome.immutable.com/hosted-assets/images/defaultTokenImage--lightOnDark.svg";
declare const DUMMY_RIVE_ANIMATION_URL = "https://cdn.rive.app/animations/vehicles.riv";

declare function staticMiddleEllipsis({ text, leftSideLength, rightSideLength, }: {
    text: string;
    leftSideLength?: number;
    rightSideLength?: number;
}): string;

declare function base64UrlEncode(url: string): string;
declare function base64UrlDecode(base64Url: string): string;

declare function removeDuplicates(numbers: number[]): number[];
declare function getImageSizesArray(currentSize: number): number[];
declare function pickResponsiveSize(size: ImageSizeVariant | null, sizeMapping: SizeMapping): number[];
declare function pickSizeInLayout(size: ImageSizeVariant | null, sizeMapping: SizeMapping): string;
declare function getImageSizeMapping<AsNum extends boolean = false>(componentKind: ImageComponentKind, theme: BiomeTheme, asNumbers?: AsNum): Record<"small" | "xLarge" | "large" | "medium", AsNum extends true ? number : string>;

declare function prettyFormatNumber(num: string): string;
declare function range(start: number, end: number): number[];
declare function isNumberWithinTotal(defaultNumber: number, totalNumber: number): boolean;

declare function checkForElementChildType(child: ReactNode): child is ReactElement & {
    type: {
        displayName: string;
    };
};
declare function isChildSubcomponent(child: ReactNode, subcomponent: ComponentType<any>): child is ReactElement & {
    type: {
        displayName: string;
    };
};
declare function getSubcomponentChild(children: ReactNode | ReactNode[], subcomponent: ComponentType<any>): ReactNode;
declare function isSubcomponentNestedInSmartClone<TProps>(child: ReactNode, subcomponent: ComponentType<TProps>): boolean;
declare function isSubcomponentNestedInFragment<TProps>(child: ReactNode, subcomponent: ComponentType<TProps>): boolean;

declare const lineClamp: (lines?: number) => {
    display: string;
    WebkitLineClamp: number;
    WebkitBoxOrient: string;
    wordBreak: string;
    overflow: string;
};
declare const hFlex: {
    d: string;
};
declare const vFlex: {
    d: string;
    flexDirection: string;
};
declare const centerFlexChildren: {
    alignItems: string;
    justifyContent: string;
};
declare const padding: (value: number | string) => {
    p: string;
};
declare const margin: (value: number | string) => {
    m: string;
};

export { APP_HEADER_BAR_SIZES, ASPECT_RATIOS, Accordion, AccordionProps, AllIconKeys, AllLogoKeys, AnimationKind, AppHeaderBar, AppHeaderBarContentAlign, AppHeaderBarProps, AppHeaderBarSize, AppHeaderBarVariant, AspectRatioImage, AspectRatioImageProps, Autocomplete, AutocompleteProps, Avatar, AvatarProps, BUTTON_SIZES, Badge, BadgeProps, Banner, BannerProps, BannerRightButtConProps, BannerRightButtonProps, BannerTextProps, BannerVariant, BaseBodyProps, BaseClickable, BaseClickableProps, BaseClickableWithRCAndDomProps, BaseComponentProps, BaseHeadingProps, BiomeCombinedProviders, BiomePortalIdContext, BiomePortalIdProvider, BiomeTextComponent, BiomeTheme, BiomeThemeProvider, Body, BodyProps, BodyTextProps, BorderProperties, Box, BoxProps, BoxWithRCAndDomProps, BreakpointTheme, ButtCon, ButtConProps, Button, ButtonProps, ButtonSize, ButtonVariant, COUNTDOWN_TIMER_SIZES, COUNTDOWN_TIMER_VARIANTS, Caption, CaptionBaseProps, CaptionProps, Card, CardProps, Checkbox, CheckboxProps, ClearValueButtonProps, CloudImage, CloudImageProps, ColorProperties, ConfirmationDialog, ConfirmationDialogProps, CountdownTimer, CountdownTimerProps, CountdownTimerSize, CountdownTimerVariant, DARK_ON_LIGHT_DEFAULT_IMAGE, DARK_ON_LIGHT_FALLBACK_IMAGE_URL, DEFAULT_APP_HEADER_BAR_SIZE, DEFAULT_BANNER_VARIANT, DEFAULT_COUNTDOWN_TIMER_SIZE, DEFAULT_COUNTDOWN_TIMER_VARIANT, DEFAULT_DIVIDER_SIZE, DEFAULT_DRAWER_POSITION, DEFAULT_DRAWER_SIZE, DEFAULT_IMAGE_SIZE_VARIANT, DEFAULT_MENU_ITEM_SIZE, DEFAULT_NUMBER_STEPPER_SIZE, DEFAULT_PROGRESS_BAR_COLOR_VARIANT, DEFAULT_PROGRESS_BAR_SIZE, DEFAULT_SELECT_SIZE, DEFAULT_STEPPER_SIZE, DEFAULT_STEPPER_VARIANT, DEFAULT_TEXT_AREA_ALIGN, DEFAULT_TEXT_AREA_SIZE, DEFAULT_TEXT_INPUT_ALIGN, DEFAULT_TEXT_INPUT_SIZE, DEFAULT_TOOLTIP_SIZE, DIVIDER_SIZES, DRAWER_POSITIONS, DRAWER_SIZES, DUMMY_RASTER_IMAGE_2_URL, DUMMY_RASTER_IMAGE_3_URL, DUMMY_RASTER_IMAGE_URL, DUMMY_RIVE_ANIMATION_URL, DUMMY_VECTOR_IMAGE_URL, DeeplyNestedSx, DescendantSxProps, Divider, DividerProps, DividerSize, DomPropsWithDomRef, DomReferenceRect, DoubleDescendantSxProps, Drawer, DrawerComponentProps, DrawerItem, DrawerOverlay, DrawerOverlayProps, DrawerPosition, DrawerSize, DualVariantIconProps, DuoCon, DuoConProps, ETH_TOKEN_IMAGE_URL, EllipsizedText, EllipsizedTextProps, ErrorBrand, ExpandableMenuItem, ExpandableMenuItemProps, FastContextDispatchAction, FontProperties, FormControl, FormControlProps, FramedImage, FramedImageProps, FramedStack, FramedStackProps, GODS_TOKEN_IMAGE_URL, GOG_TOKEN_IMAGE_URL, GenericIconProps, GetClickableMultiTextProps, GetFontWeights, GetHybridClickableRCandDomProps, GetMultiTextProps, GetNarrowedDesignTokens, GetTypeSizes, GradientProperties, GridBox, GridBoxProps, Heading, HeadingProps, HorizontalMenu, HorizontalMenuProps, IMAGE_SIZE_VARIANTS, IMX_TOKEN_IMAGE_URL, INPUT_MIN_WIDTH, Icon, IconProps, IconReactElement, IconSizeProperties, IconVariant, ImageComponentKind, ImageSizeVariant, InputBar, InputBarProps, InputTextAlign, InputValidationStatus, LIGHT_ON_DARK_DEFAULT_IMAGE, LIGHT_ON_DARK_FALLBACK_IMAGE_URL, Link, LinkBaseProps, LinkIconProps, LinkProps, LinkSize, LinkVariant, LoadingOverlay, LoadingOverlayProps, Logo, LogoProps, LoopingText, LoopingTextProps, MENU_ITEM_SIZES, MakeFunctionResponsive, MakeObjectResponsive, MakeResponsive, MakeValidSxValue, MakeWriteable, Measurement, MeasurementAndResponsiveMeasurement, MenuItem, MenuItemContentProps, MenuItemProps, MenuItemShimmerProps, MenuItemSize, Modal, ModalComponentProps, ModalItem, ModalOverlay, ModalOverlayProps, ModalPosition, MotionProperties, NUMBER_STEPPER_SIZES, NumberStepper, NumberStepperProps, NumberStepperSize, OnOptionClick, OnboardingPagination, OnboardingPaginationProps, Option, OptionKey, OptionProps, OverflowDrawerMenu, OverflowDrawerMenuProps, OverflowMenuCommonProps, OverflowPopoverMenu, OverflowPopoverMenuProps, OverlayStore, Overwrite, PROGRESS_BAR_COLOR_VARIANTS, PROGRESS_BAR_SIZES, PROGRESS_BAR_VARIANTS, Pagination, PaginationDiscriminatedUnion, PaginationProps, PasscodeInput, PasscodeInputProps, Popover, PopoverComponentProps, PopoverItem, PopoverOverlay, PopoverPosition, PriceDisplay, PriceDisplayProps, ProgressBar, ProgressBarColorVariant, ProgressBarProps, ProgressBarSize, ProgressBarVariant, Radio, RadioProps, RadiusProperties, ReactElementWithRef, RecycleView, RecycleViewProps, RemoveErrorBrand, ResizeState, ResponsiveKey, ResponsiveSizes, RollingText, RollingTextProps, STEPPER_SIZES, STEPPER_VARIANTS, SafeSizes, Select, SelectProps, SelectSize, ShadowProperties, ShimmerBox, ShimmerCircle, SingleVariantIconProps, SizeMapping, SmartClone, SmartCloneProps, SpacingProperties, SpineMenu, SpineMenuBaseProps, Stack, StackProps, StandardComponentWithProps, StandardInputComponentWithProps, StatefulButtCon, StatefulButtConProps, StatefulButtConState, Stepper, StepperProps, StepperSize, StepperVariant, StringWithoutHash, SvgIcon, SvgIconProps, SwapStack, SwapStackProps, SxComponentProps, SxProps, TEXT_AREA_SIZES, TEXT_INPUT_SIZES, TOLERATED_IMAGE_SIZES, TOOLTIP_SIZES, Table, TableProps, Tabs, TabsContextType, TabsListProps, TabsPanelProps, TabsProps, TabsProviderProps, TextArea, TextAreaProps, TextAreaSize, TextInput, TextInputButtonProps, TextInputIconProps, TextInputProps, TextInputSize, TextInputStatefulButtConProps, TextProperties, Toast, ToastComponentProps, ToastItem, ToastPosition, ToastVariant, Toggle, ToggleProps, ToggleableThemeProvider, Toolbar, ToolbarProps, Tooltip, TooltipComponentProps, TooltipContext, TooltipItem, TooltipOverlay, TooltipSize, TripleDescentantSxProps, Tuple, UseDetectBadImagePropTypes, UseDetectSvgImagePropTypes, ValidSxValues, VerticalMenu, VerticalMenuProps, WithDrawerDisriminatedProps, artificialDelay, base64UrlDecode, base64UrlEncode, centerFlexChildren, checkForElementChildType, cloneElementWithCssProp, createFastContext, getImageSizeMapping, getImageSizesArray, getInvalidCurrentPageWarningMsg, getInvalidPropWarningMsg, getSubcomponentChild, hFlex, hexToRgb, hexToRgbString, hexToRgbaString, hexWithAlphaToRgbaString, imageUrlChecks, isBaseClickable, isBody, isBox, isCaption, isChildReactComponent, isChildSubcomponent, isHeading, isLogo, isNumberWithinTotal, isReactFragment, isRuntimeInsideNodeServer, isSubcomponentNestedInFragment, isSubcomponentNestedInSmartClone, isTouchDevice, lineClamp, margin, noop, padding, pickResponsiveSize, pickSizeInLayout, prettyFormatNumber, range, removeDuplicates, renderNullAndWarnUser, rgbaToHex, selectSizes, serializeChildren, shortHandCssRuleMapping, staticMiddleEllipsis, useBrowserEffect, useBrowserLayoutEffect, useCallbackWhenDirty, useCheckForInvalidPaginationProps, useClientSide, useConvertSxToEmotionStyles, useDetectBadImage, useDetectSvgImage, useEventListener, useForwardLocalDomRef, useGetCurrentSizeClass, useGetRelativeImageSizeInLayout, useGetResponsiveImageSizes, useGetSubcomponentChild, useGetSubcomponentChildren, useHover, useInterval, useLocalStorage, useOnClickOutside, useOverlaysStore, useResizeObserver, useSplitApartChildrenAndSubComponents, useTheme, useTimeout, useToggleableTheme, useTooltipStore, useWindowSizeStore, vFlex, warnUser };
