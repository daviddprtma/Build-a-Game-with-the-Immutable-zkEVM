/// <reference types="cypress" />
// ***********************************************************
// This example support/component.ts is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import '@cypress/code-coverage/support';
import 'cypress-real-events';
import './commands';

// Alternatively you can use CommonJS syntax:
// require('./commands')
import { mount } from 'cypress/react';

// Augment the Cypress namespace to include type definitions for
// your custom command.
// Alternatively, can be defined in cypress/support/component.d.ts
// with a <reference path="./component" /> at the top of your spec.
declare global {
  namespace Cypress {
    interface Chainable {
      mount: typeof mount;
    }
  }
}

Cypress.Commands.add('mount', mount); // Example use: cy.mount(<MyComponent />)

const compareColor =
  (color: string, property: string) => (targetElement: Element[]) => {
    const tempElement = document.createElement('div');
    tempElement.style.color = color;
    tempElement.style.display = 'none'; // make sure it doesn't actually render
    document.body.appendChild(tempElement); // append so that `getComputedStyle` actually works

    const tempColor = getComputedStyle(tempElement).color;
    const targetColor = getComputedStyle(targetElement[0])[property as any];

    document.body.removeChild(tempElement); // remove it because we're done with it
    expect(tempColor).to.equal(targetColor);
  };

const compareBgImage =
  (image: string, property: string) => (targetElement: Element[]) => {
    const tempElement = document.createElement('div');
    tempElement.style.background = image.replace(';', '');
    tempElement.style.display = 'none'; // make sure it doesn't actually render
    document.body.appendChild(tempElement); // append so that `getComputedStyle` actually works

    const tempImage = getComputedStyle(tempElement).backgroundImage;
    const targetImage = getComputedStyle(targetElement[0])[property as any];
    expect(tempImage).to.equal(targetImage);
  };

Cypress.Commands.overwrite(
  'should',
  (originalFn: any, subject: any, expectation: any, ...args: any) => {
    const customMatchers = {
      'have.backgroundImage': compareBgImage(args[0], 'backgroundImage'),
      'have.backgroundColor': compareColor(args[0], 'backgroundColor'),
      'have.color': compareColor(args[0], 'color'),
      'have.fillColor': compareColor(args[0], 'fill'),
      'have.borderColor': compareColor(args[0], 'borderColor'),
    };

    // See if the expectation is a string and if it is a member of Jest's expect
    if (
      typeof expectation === 'string' &&
      (customMatchers as any)[expectation]
    ) {
      return originalFn(subject, (customMatchers as any)[expectation]);
    }
    return originalFn(subject, expectation, ...args);
  },
);
