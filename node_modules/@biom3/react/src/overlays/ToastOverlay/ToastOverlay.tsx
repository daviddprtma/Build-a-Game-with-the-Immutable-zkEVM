import { designTokens } from '@biom3/design-tokens';
import { AnimatePresence, motion } from 'framer-motion';
import { Children, useMemo } from 'react';
import merge from 'ts-deepmerge';

import { Box } from '../../components/Box';
import { ToastButtCon } from '../../components/Toast/ToastButtCon';
import { ToastButton } from '../../components/Toast/ToastButton';
import { ToastMessage } from '../../components/Toast/ToastMessage';
import { useSplitApartChildrenAndSubComponents as splitApartChildrenAndSubComponents } from '../../hooks';
import { useOverlaysStore } from '../../providers';
import { isChildSubcomponent } from '../../utils';
import { hFlex, vFlex } from '../../utils/sxChunks';

type ToastGroupPosition =
  | 'topLeft'
  | 'topRight'
  | 'topCenter'
  | 'bottomLeft'
  | 'bottomRight'
  | 'bottomCenter';

function getToastGroupPositionStyles(group: ToastGroupPosition) {
  switch (group) {
    case 'topLeft':
      return {
        top: 'base.spacing.x6',
        left: 'base.spacing.x6',
      };

    case 'topCenter':
      return {
        top: 'base.spacing.x6',
        left: '50%',
        translate: '-50% 0',
      };

    case 'bottomLeft':
      return {
        bottom: 'base.spacing.x6',
        left: 'base.spacing.x6',
      };

    case 'bottomRight':
      return {
        bottom: 'base.spacing.x6',
        right: 'base.spacing.x6',
      };

    case 'bottomCenter':
      return {
        bottom: 'base.spacing.x6',
        left: '50%',
        translate: '-50% 0',
      };

    case 'topRight':
    default: {
      return {
        top: 'base.spacing.x6',
        right: 'base.spacing.x6',
      };
    }
  }
}

const RIGHT_TRANSLATE = '12px';
const LEFT_TRANSLATE = '-12px';
const TOP_TRANSLATE = '-12px';
const BOTTOM_TRANSLATE = '12px';
const NO_TRANSLATE = '0px';

export function ToastOverlay() {
  const { state: toastList } = useOverlaysStore(state => state.toastList);

  const toastsGroupedByPosition = useMemo(() => {
    return {
      topLeft: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'top' && x === 'left';
      }),
      topCenter: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'top' && x === 'center';
      }),
      topRight: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'top' && x === 'right';
      }),
      bottomLeft: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'bottom' && x === 'left';
      }),
      bottomRight: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'bottom' && x === 'right';
      }),
      bottomCenter: toastList.filter(toast => {
        const {
          position: { x, y },
        } = toast;
        return y === 'bottom' && x === 'center';
      }),
    };
  }, [toastList]);

  return (
    <AnimatePresence>
      {Object.keys(toastsGroupedByPosition).map(key => {
        const typedKey = key as ToastGroupPosition;
        const group = toastsGroupedByPosition[typedKey];
        if (group.length === 0) return null;

        return (
          <Box
            data-toast-group={typedKey}
            key={typedKey}
            testId={`toastsContainer--${typedKey}`}
            sx={{
              ...vFlex,
              ...getToastGroupPositionStyles(typedKey),
              gap: 'base.spacing.x2',
              position: 'fixed',
              zIndex: 'base.zLevel.toast',
              alignItems: 'center',
            }}
            rc={
              <motion.div
                initial={{
                  opacity: 0,
                  ...(typedKey === 'topRight' && { x: RIGHT_TRANSLATE }),
                  ...(typedKey === 'topLeft' && { x: LEFT_TRANSLATE }),
                  ...(typedKey === 'topCenter' && { y: TOP_TRANSLATE }),
                  ...(typedKey === 'bottomRight' && { x: RIGHT_TRANSLATE }),
                  ...(typedKey === 'bottomLeft' && { x: LEFT_TRANSLATE }),
                  ...(typedKey === 'bottomCenter' && { y: BOTTOM_TRANSLATE }),
                }}
                exit={{
                  opacity: 0,
                  ...(typedKey === 'topRight' && { x: RIGHT_TRANSLATE }),
                  ...(typedKey === 'topLeft' && { x: LEFT_TRANSLATE }),
                  ...(typedKey === 'topCenter' && { y: TOP_TRANSLATE }),
                  ...(typedKey === 'bottomRight' && { x: RIGHT_TRANSLATE }),
                  ...(typedKey === 'bottomLeft' && { x: LEFT_TRANSLATE }),
                  ...(typedKey === 'bottomCenter' && { y: BOTTOM_TRANSLATE }),
                }}
                animate={{
                  opacity: 1,
                  ...(typedKey === 'topRight' && { x: NO_TRANSLATE }),
                  ...(typedKey === 'topLeft' && { x: NO_TRANSLATE }),
                  ...(typedKey === 'topCenter' && { y: NO_TRANSLATE }),
                  ...(typedKey === 'bottomRight' && { x: NO_TRANSLATE }),
                  ...(typedKey === 'bottomLeft' && { x: NO_TRANSLATE }),
                  ...(typedKey === 'bottomCenter' && { y: NO_TRANSLATE }),
                }}
                transition={{
                  duration: designTokens.base.motion.normal.fast.jsDuration,
                  ease: designTokens.base.motion.normal.fast.jsEase,
                }}
              />
            }
          >
            <AnimatePresence>
              {group.map(toast => {
                const {
                  id,
                  content,
                  hideDismissButton,
                  variant,
                  onCloseToast,
                  buttonsPosition,
                  testId,
                  sx = {},
                } = toast;
                const { otherChildren } = splitApartChildrenAndSubComponents(
                  content,
                  [ToastMessage, ToastButtCon, ToastButton],
                );
                return (
                  <Box
                    data-id={id}
                    key={id}
                    testId={testId ?? 'toastsContainer__toast'}
                    sx={merge(
                      {
                        ...(buttonsPosition === 'right'
                          ? {
                              ...hFlex,
                              alignItems: 'center',
                              justifyContent: 'space-between',
                            }
                          : { ...vFlex }),
                        gap: 'base.spacing.x2',
                        bg: 'base.color.translucent.standard.1000',
                        p: 'base.spacing.x2',
                        pl: 'base.spacing.x9',
                        brad: 'base.borderRadius.x6',
                        c: 'base.color.text.inverse.primary',
                        minw: '230px',
                        maxw: '450px',
                        minh: '64px',
                        boxShadow: 'base.shadow.500',
                        position: 'relative',
                      },
                      sx,
                    )}
                    rc={
                      <motion.div
                        initial={{
                          opacity: 0,
                          ...(typedKey === 'topRight' && {
                            x: RIGHT_TRANSLATE,
                          }),
                          ...(typedKey === 'topLeft' && {
                            x: LEFT_TRANSLATE,
                          }),
                          ...(typedKey === 'topCenter' && {
                            y: TOP_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomRight' && {
                            x: RIGHT_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomLeft' && {
                            x: LEFT_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomCenter' && {
                            y: BOTTOM_TRANSLATE,
                          }),
                        }}
                        exit={{
                          opacity: 0,
                          ...(typedKey === 'topRight' && {
                            x: RIGHT_TRANSLATE,
                          }),
                          ...(typedKey === 'topLeft' && {
                            x: RIGHT_TRANSLATE,
                          }),
                          ...(typedKey === 'topCenter' && {
                            y: TOP_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomRight' && {
                            x: RIGHT_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomLeft' && {
                            x: LEFT_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomCenter' && {
                            y: BOTTOM_TRANSLATE,
                          }),
                        }}
                        animate={{
                          opacity: 1,
                          ...(typedKey === 'topRight' && { x: NO_TRANSLATE }),
                          ...(typedKey === 'topLeft' && { x: NO_TRANSLATE }),
                          ...(typedKey === 'topCenter' && {
                            y: NO_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomRight' && {
                            x: NO_TRANSLATE,
                          }),
                          ...(typedKey === 'bottomLeft' && { x: NO_TRANSLATE }),
                          ...(typedKey === 'bottomCenter' && {
                            y: NO_TRANSLATE,
                          }),
                        }}
                        transition={{
                          duration:
                            designTokens.base.motion.normal.fast.jsDuration,
                          ease: designTokens.base.motion.normal.fast.jsEase,
                        }}
                      />
                    }
                  >
                    <Box
                      testId="toastVariantBar"
                      sx={{
                        top: 'base.spacing.x2',
                        bottom: 'base.spacing.x2',
                        position: 'absolute',
                        left: 'base.spacing.x2',
                        width: '6px',
                        brad: 'base.borderRadius.x6',
                        bg: `base.color.status.${variant}.bright`,
                      }}
                    />

                    {Children.map(content, child => {
                      return isChildSubcomponent(child, ToastMessage)
                        ? child
                        : null;
                    })}
                    <Box
                      sx={{
                        ...hFlex,
                        ...(buttonsPosition === 'bottomRight'
                          ? { justifyContent: 'flex-end' }
                          : {}),
                        gap: 'base.spacing.x1',
                      }}
                    >
                      {Children.map(content, child => {
                        return isChildSubcomponent(child, ToastButtCon) ||
                          isChildSubcomponent(child, ToastButton)
                          ? child
                          : null;
                      })}
                      {!hideDismissButton ? (
                        <ToastButton
                          testId="dismissToastButton"
                          onClick={() => {
                            onCloseToast?.();
                          }}
                        >
                          Dismiss
                        </ToastButton>
                      ) : null}
                    </Box>
                    {otherChildren}
                  </Box>
                );
              })}
            </AnimatePresence>
          </Box>
        );
      })}
    </AnimatePresence>
  );
}
