import { onLightBase } from '@biom3/design-tokens';
import { Interpolation } from '@emotion/react';
import { AnimatePresence, motion } from 'framer-motion';
import { isValidElement, useCallback } from 'react';
import merge from 'ts-deepmerge';

import { Box, ButtCon, Heading, SmartClone } from '../../components';
import { useTheme } from '../../hooks';
import {
  CLOSE_DRAWER,
  useOverlaysStore,
} from '../../providers/BiomeOverlaysProvider';
import { BiomeTheme } from '../../types/theme';
import {
  BOTTOM_TRANSLATE,
  getDrawerCloseIcon,
  getDrawerStyles,
  LEFT_TRANSLATE,
  NO_TRANSLATE,
  RIGHT_TRANSLATE,
} from './styles';

export type DrawerOverlayProps = { hasExternalContainer?: boolean };

export function DrawerOverlay({ hasExternalContainer }: DrawerOverlayProps) {
  const { base } = useTheme();
  const { state: drawerList, dispatchAction } = useOverlaysStore(
    state => state.drawerList,
  );
  const currentDrawer = drawerList[drawerList.length - 1];
  const handleBgOverlayClick = useCallback(() => {
    if (currentDrawer.outsideClicksClose) {
      currentDrawer.onCloseDrawer?.();
      if (!currentDrawer.isControlled) {
        dispatchAction({
          type: CLOSE_DRAWER,
          payload: {
            id: currentDrawer.id,
          },
        });
      }
    }
  }, [currentDrawer, dispatchAction]);

  return (
    <AnimatePresence>
      {currentDrawer ? (
        <motion.div
          data-testid={`${currentDrawer.testId}__bgOverlay`}
          onClick={handleBgOverlayClick}
          css={{
            position: hasExternalContainer ? 'absolute' : 'fixed',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: currentDrawer.showBgOverlay
              ? base.color.translucent.standard[600]
              : '',
            zIndex: base.zLevel.drawer,
          }}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{
            duration: onLightBase.motion.normal.fast.jsDuration,
            ease: onLightBase.motion.normal.fast.jsEase,
          }}
        />
      ) : null}

      {drawerList.map(drawer => {
        const drawerSx =
          isValidElement(drawer.content) && drawer.content.props.sx
            ? drawer.content.props.sx
            : {};
        const { drawerPosition } = drawer;
        return (
          <motion.div
            key={drawer.id}
            data-testid={`${drawer.testId}__container`}
            css={
              merge(
                {
                  position: hasExternalContainer ? 'absolute' : 'fixed',
                  zIndex: base.zLevel.drawer,
                  background: base.color.neutral[700],
                  display: 'flex',
                  flexDirection: 'column',
                },
                getDrawerStyles(drawerPosition, drawer.size, base),
              ) as Interpolation<BiomeTheme>
            }
            initial={{
              opacity: 0,
              ...(drawerPosition === 'left' && { x: LEFT_TRANSLATE }),
              ...(drawerPosition === 'right' && { x: RIGHT_TRANSLATE }),
              ...(drawerPosition === 'bottom' && { y: BOTTOM_TRANSLATE }),
            }}
            animate={{
              opacity: 1,
              ...(/left|right/.test(drawerPosition) && { x: NO_TRANSLATE }),
              ...(/bottom/.test(drawerPosition) && { y: NO_TRANSLATE }),
            }}
            exit={{
              opacity: 0,
              transition: { ease: base.motion.normal.fast.jsEase },
              ...(drawerPosition === 'left' && { x: LEFT_TRANSLATE }),
              ...(drawerPosition === 'right' && { x: RIGHT_TRANSLATE }),
              ...(drawerPosition === 'bottom' && { y: BOTTOM_TRANSLATE }),
            }}
            transition={{
              duration: base.motion.bounce.gentle.jsDuration,
              ease: base.motion.bounce.gentle.jsEase,
              opacity: {
                ease: base.motion.normal.fast.jsEase,
              },
            }}
          >
            {drawer.showHeaderBar && (
              <Box
                rc={<header />}
                sx={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  height: 'base.spacing.x20',
                  bg: 'base.color.neutral.700',
                  flexShrink: 0,
                  bradtl: 'base.borderRadius.x10',
                  bradtr: 'base.borderRadius.x10',
                }}
                testId={`${drawer.testId}__container__header`}
              >
                <ButtCon
                  variant="tertiary"
                  icon={getDrawerCloseIcon(drawerPosition)}
                  sx={{
                    position: 'absolute',
                    top: 'base.spacing.x4',
                    left: 'base.spacing.x4',
                  }}
                  testId={`${drawer.testId}__container__header__closeButtCon`}
                  onClick={() => {
                    drawer.onCloseDrawer?.();
                    if (!drawer.isControlled) {
                      dispatchAction({
                        type: CLOSE_DRAWER,
                        payload: {
                          id: drawer.id,
                        },
                      });
                    }
                  }}
                />
                <Heading
                  size="xSmall"
                  weight="bold"
                  testId={`${drawer.testId}__container__header__title`}
                >
                  {drawer.headerBarTitle}
                </Heading>
              </Box>
            )}

            <SmartClone
              sx={merge(
                {
                  overflowX: 'hidden',
                  overflowY: 'auto',
                  flexGrow: 1,
                  padding: 'base.spacing.x4',
                  ...(!drawer.showHeaderBar
                    ? {
                        bradtl: 'base.borderRadius.x10',
                        bradtr: 'base.borderRadius.x10',
                      }
                    : {}),
                },
                drawerSx,
              )}
            >
              {drawer.content}
            </SmartClone>
          </motion.div>
        );
      })}
    </AnimatePresence>
  );
}
