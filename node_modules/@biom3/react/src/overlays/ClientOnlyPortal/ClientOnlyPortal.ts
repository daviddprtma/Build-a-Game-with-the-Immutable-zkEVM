/* eslint-disable react/destructuring-assignment */
import { ReactNode, useContext, useRef, useState } from 'react';
import { createPortal } from 'react-dom';

import { useBrowserLayoutEffect } from '../../hooks/useBrowserLayoutEffect';
import { BiomeShadowRootContext } from '../../providers/BiomeShadowRootProvider/context';

export type ClientOnlyPortalProps = {
  selector: string;
  children?: ReactNode;
};

export function ClientOnlyPortal({
  children,
  selector,
}: ClientOnlyPortalProps) {
  const shadowRoot = useContext(BiomeShadowRootContext);
  const mountPointDomRef = useRef<HTMLElement | null>(null);
  const [portalMounted, setPortalMounted] = useState(false);
  useBrowserLayoutEffect(() => {
    mountPointDomRef.current = shadowRoot
      ? shadowRoot.querySelector(selector)
      : document.querySelector(selector);
    setPortalMounted(true);
    return () => setPortalMounted(false);
  }, []);

  return portalMounted && mountPointDomRef.current
    ? createPortal(children, mountPointDomRef.current)
    : null;
}
