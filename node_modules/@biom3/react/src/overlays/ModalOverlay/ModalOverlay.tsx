import { Interpolation } from '@emotion/react';
import { Properties } from 'csstype';
import { AnimatePresence, motion } from 'framer-motion';
import { Fragment } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import {
  CLOSE_MODAL,
  useOverlaysStore,
} from '../../providers/BiomeOverlaysProvider';
import { ModalPosition } from '../../types/overlays';
import { BiomeTheme } from '../../types/theme';
import { convertSxToEmotionStyles } from '../../utils/sxToEmotionStyles';

export type ModalOverlayProps = { hasExternalContainer?: boolean };

function getModalPosition(position: ModalPosition, base: BiomeTheme['base']) {
  const sx: Properties = {
    transform: '',
  };
  switch (position.x) {
    case 'left':
      sx.left = base.spacing.x12;
      break;

    case 'right':
      sx.right = base.spacing.x12;
      break;

    case 'center':
    default:
      sx.left = '50%';
      sx.translate = '-50%';
      break;
  }

  switch (position.y) {
    case 'top':
      sx.top = base.spacing.x12;
      break;

    case 'bottom':
      sx.bottom = base.spacing.x12;
      break;

    case 'center':
    default:
      sx.top = '50%';
      sx.translate += ' -50%';
      break;
  }

  return sx;
}

export function ModalOverlay({ hasExternalContainer }: ModalOverlayProps) {
  const { base } = useTheme();
  const { state: modalList, dispatchAction } = useOverlaysStore(
    state => state.modalList,
  );
  return (
    <AnimatePresence>
      {modalList.map(modal => {
        const positionSx = getModalPosition(modal.position, base);
        const modalBgStyles = convertSxToEmotionStyles(modal.bgOverlaySx, {
          base,
        });
        return (
          <Fragment key={modal.id}>
            <motion.div
              key={`${modal.id}__bgOverlay`}
              data-testid={`${modal.testId}__bgOverlay`}
              onClick={() => {
                if (modal.outsideClicksClose) {
                  modal.onCloseModal?.();
                  if (!modal.isControlled) {
                    dispatchAction({
                      type: CLOSE_MODAL,
                      payload: {
                        id: modal.id,
                      },
                    });
                  }
                }
              }}
              css={
                merge(
                  {
                    position: hasExternalContainer ? 'absolute' : 'fixed',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    background: modal.showBgOverlay
                      ? base.color.translucent.standard[600]
                      : '',
                    zIndex: base.zLevel.modal,
                  },
                  modalBgStyles,
                ) as Interpolation<BiomeTheme>
              }
              initial={{
                opacity: 0,
              }}
              exit={{
                opacity: 0,
              }}
              animate={{
                opacity:
                  typeof modal.bgOverlaySx.opacity === 'number' ||
                  typeof modal.bgOverlaySx.opacity === 'string'
                    ? modal.bgOverlaySx.opacity
                    : 1,
              }}
              transition={{
                duration: base.motion.normal.gentle.jsDuration,
                ease: base.motion.normal.gentle.jsEase,
              }}
            />

            <motion.div
              key={`${modal.id}__modalContent`}
              data-testid={`${modal.testId}__modalContent`}
              css={{
                ...positionSx,
                position: hasExternalContainer ? 'absolute' : 'fixed',
                zIndex: base.zLevel.modal,
                display: 'flex',
                flexDirection: 'column',

                ...(modal.fullScreenUntilBreakpoint
                  ? {
                      [`@media screen and (max-width: ${
                        base.breakpoint[modal.fullScreenUntilBreakpoint]
                      }px)`]: {
                        top: '0px',
                        left: '0px',
                        bottom: '0px',
                        right: '0px',
                        translate: '0 0',

                        '& .modalContent': {
                          borderRadius: '0px',
                        },
                      },
                    }
                  : {}),
              }}
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{
                scale: 1,
                opacity: 1,
              }}
              exit={{
                scale: 0.8,
                opacity: 0,
                transition: { ease: base.motion.normal.fast.jsEase },
              }}
              transition={{
                duration: base.motion.bounce.gentle.jsDuration,
                ease: base.motion.bounce.gentle.jsEase,
                opacity: {
                  ease: base.motion.normal.fast.jsEase,
                },
              }}
            >
              {modal.content}
            </motion.div>
          </Fragment>
        );
      })}
    </AnimatePresence>
  );
}
