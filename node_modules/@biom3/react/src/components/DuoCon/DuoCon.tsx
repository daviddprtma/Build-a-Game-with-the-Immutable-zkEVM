import { Colors } from '@biom3/design-tokens';
import { ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { IconVariant } from '../../types/icon';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { AllIconKeys, Icon } from '../Icon';
import { SvgIcon } from '../SvgIcon';
import { getBgFillColoring, getFillColoring } from './styles';

export type DuoConColorVariant = keyof Colors['status'];
export type DuoConProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & {
    outerShape?: 'circle' | 'octogon';
    icon: AllIconKeys;
    variant?: IconVariant;
    colorVariant?: DuoConColorVariant;
    iconVariant?: IconVariant;
  };

export function DuoCon<RC extends ReactElement | undefined = undefined>({
  icon,
  variant = 'regular',
  iconVariant = 'regular',
  colorVariant = 'guidance',
  outerShape = 'circle',
  testId,
  sx = {},
  ...props
}: DuoConProps<RC>) {
  const theme = useTheme();
  const bgFill = useMemo(
    () =>
      getBgFillColoring(
        theme.base.colorMode === 'lightOnDark',
        colorVariant,
        variant,
      ),
    [theme, colorVariant, variant],
  );
  const fill = useMemo(
    () =>
      getFillColoring(
        theme.base.colorMode === 'lightOnDark',
        colorVariant,
        variant,
      ),
    [theme, colorVariant, variant],
  );
  const outerMergedSx = useMemo(
    () =>
      merge(
        {
          w: 'base.icon.size.600',
          d: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          position: 'relative',

          '&::before': {
            content: '""',
            w: '100%',
            pb: '100%',
          },
        },
        sx,
      ),
    [sx],
  );
  const outerShapeSx = useMemo(
    () => ({
      position: 'absolute',
      top: '0',
      left: '0',
      w: '100%',
      fill: bgFill,
    }),
    [bgFill],
  );
  const innerIconSx = useMemo(
    () => ({
      w: '58.33%',
      position: 'absolute',
      top: '50%',
      left: '50%',
      translate: '-50% -50%',
      fill,
    }),
    [fill],
  );
  return (
    <Box {...props} sx={outerMergedSx} testId={testId}>
      <SvgIcon
        sx={outerShapeSx}
        data-outer-shape={outerShape}
        testId={`${testId}__outerShape`}
        viewBox="0 0 24 24"
      >
        {outerShape === 'circle' ? (
          <circle cx="12" cy="12" r="11" />
        ) : (
          <path d="M7.65076 1.5L16.3492 1.5L22.5 7.65076V16.3492L16.3492 22.5H7.65076L1.5 16.3492L1.5 7.65076L7.65076 1.5Z" />
        )}
      </SvgIcon>
      <Icon
        icon={icon}
        sx={innerIconSx}
        variant={iconVariant}
        testId={`${testId}__icon`}
      />
    </Box>
  );
}
