import { base } from '@biom3/design-tokens';
import { describe, expect, it } from '@jest/globals';

import { DuoConColorVariant } from './DuoCon';
import { getBgFillColoring, getFillColoring } from './styles';

describe('getBgFillColoring()', () => {
  Object.keys(base.color.status).forEach(key => {
    const colorVariantKey = key as DuoConColorVariant;
    it(`should return the correct color for the "${key}" color variant, in dark mode`, () => {
      expect(getBgFillColoring(true, colorVariantKey, 'regular')).toBe(
        'base.color.translucent.standard.400',
      );
    });

    it(`should return the correct color for the "${key}" color variant, in light mode`, () => {
      expect(getBgFillColoring(false, colorVariantKey, 'regular')).toBe(
        'base.color.translucent.standard.800',
      );
    });

    it(`should return the correct color for the "${key}" "bold" color variant, in light mode`, () => {
      expect(getBgFillColoring(false, colorVariantKey, 'bold')).toBe(
        `base.color.status.${key}.bright`,
      );
    });

    it(`should return the correct color for the "${key}" "bold" color variant, in dark mode`, () => {
      expect(getBgFillColoring(true, colorVariantKey, 'bold')).toBe(
        `base.color.status.${key}.bright`,
      );
    });
  });
});

describe('getFillColoring()', () => {
  Object.keys(base.color.status).forEach(key => {
    const colorVariantKey = key as DuoConColorVariant;
    it(`should return the correct color for the "${key}" color variant, in dark mode`, () => {
      expect(getFillColoring(true, colorVariantKey, 'regular')).toBe(
        `base.color.status.${key}.bright`,
      );
    });

    it(`should return the correct color for the "${key}" color variant, in light mode`, () => {
      expect(getFillColoring(false, colorVariantKey, 'regular')).toBe(
        `base.color.status.${key}.bright`,
      );
    });

    it(`should return the correct color for the "${key}" "bold" color variant, in light mode`, () => {
      expect(getFillColoring(false, colorVariantKey, 'bold')).toBe(
        'base.color.text.primary',
      );
    });

    it(`should return the correct color for the "${key}" "bold" color variant, in dark mode`, () => {
      expect(getFillColoring(true, colorVariantKey, 'bold')).toBe(
        'base.color.text.inverse.primary',
      );
    });
  });
});
