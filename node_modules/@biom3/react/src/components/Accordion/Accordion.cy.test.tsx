import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { DUMMY_RASTER_IMAGE_2_URL, hexToRgbString } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Divider } from '../Divider';
import { FramedImage } from '../FramedImage';
import { Body, Heading } from '../Text';
import { Accordion } from './Accordion';

function AccordionTestFixture({ testId = 'moo', ...props }: any) {
  return (
    <Accordion {...props} testId={testId}>
      <Accordion.TargetLeftSlot>
        <Heading size="small">Some heading in here</Heading>
        <Body>Some body in here</Body>
      </Accordion.TargetLeftSlot>
      <Accordion.ExpandedContent>
        <FramedImage
          imageUrl={DUMMY_RASTER_IMAGE_2_URL}
          sx={{ maxw: '100px' }}
          circularFrame
        />
        <Heading size="medium">Expanded heading text!</Heading>
        <Body size="large">
          Normally, both your asses would be dead as fucking fried chicken, but
          you happen to pull this shit while I&apos;m in a transitional period
          so I don&apos;t wanna kill you, I wanna help you.
        </Body>
      </Accordion.ExpandedContent>
    </Accordion>
  );
}

describe('<Accordion />', () => {
  it('should have correct displayName', () => {
    expect(Accordion.displayName).to.eq('Accordion');
  });

  it('should render as a <div> by default, or as anything the user specifies', () => {
    cyMountWithProviders(<AccordionTestFixture />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');

    cyMountWithProviders(<AccordionTestFixture rc={<section />} />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(<AccordionTestFixture domRef={ref} />);
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(<AccordionTestFixture sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should render an inner background color, when "emphasized"', () => {
    cyMountWithProviders(<AccordionTestFixture emphasized />);
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.100'),
    );
  });

  it('should not render an inner background color by default, and when specified', () => {
    cyMountWithProviders(<AccordionTestFixture />);
    cySmartGet('moo').should(
      'have.css',
      'background-color',
      'rgba(0, 0, 0, 0)',
    );

    cyMountWithProviders(<AccordionTestFixture emphasized={false} />);
    cySmartGet('moo').should(
      'have.css',
      'background-color',
      'rgba(0, 0, 0, 0)',
    );
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <AccordionTestFixture aria-atomic="true" data-moo="cow" />,
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should render chevron to the left of the target, by default', () => {
    cyMountWithProviders(<AccordionTestFixture />);
    cySmartGet('moo__clickableArea').should('have.css', 'paddingLeft', '60px');
    cySmartGet('moo__clickableArea__chevron').should(
      'have.css',
      'left',
      '12px',
    );
  });

  it('should allow parent component to short-circuit accordion click handler, when necccissary', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <AccordionTestFixture targetClickOveride={onClickStub} />,
    );
    cySmartGet('moo__expandedContent').should('not.exist');
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('moo__expandedContent').should('not.exist');
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should render chevron to the right of the target, when specified', () => {
    cyMountWithProviders(<AccordionTestFixture chevronSide="right" />);
    cySmartGet('moo__clickableArea').should('have.css', 'paddingRight', '60px');
    cySmartGet('moo__clickableArea__chevron').should(
      'have.css',
      'right',
      '12px',
    );
  });

  context('Uncontrolled API', () => {
    it('should open and close, when user iteracts with it', () => {
      cyMountWithProviders(<AccordionTestFixture />);
      cySmartGet('moo__expandedContent').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('moo__expandedContent').should('exist').and('be.visible');
    });

    it('should call onExpandChange, even when in uncontrolled mode', () => {
      const onExpandChangeStub = cy.stub().as('onExpandChangeStub');
      cyMountWithProviders(
        <AccordionTestFixture onExpandChange={onExpandChangeStub} />,
      );
      cySmartGet('moo').click();
      cySmartGet('@onExpandChangeStub').should('have.been.calledWith', true);
    });
  });

  context('Controlled API', () => {
    it('should allow parent to control the "opened" state', () => {
      cyMountWithProviders(<AccordionTestFixture expanded />);
      cySmartGet('moo__expandedContent').should('exist').and('be.visible');
    });

    it('clicking to toggle the "opened" state should call the onExpandChange callback', () => {
      const onExpandChangeStub = cy.stub().as('onExpandChangeStub');
      cyMountWithProviders(
        <AccordionTestFixture expanded onExpandChange={onExpandChangeStub} />,
      );
      cySmartGet('moo').click();
      cySmartGet('@onExpandChangeStub').should('have.been.calledWith', false);
    });

    it('should not toggle, when wired up incorrectly', () => {
      cyMountWithProviders(<AccordionTestFixture expanded />);
      cySmartGet('moo__expandedContent').should('exist').and('be.visible');
      cySmartGet('moo').click();
      cySmartGet('moo__expandedContent').should('exist').and('be.visible');
    });
  });

  context('Subcomponents', () => {
    it('should render the <Accordion.TargetLeftSlot /> subcomponent, with opinionated defaults', () => {
      cyMountWithProviders(
        <Accordion>
          <Accordion.TargetLeftSlot testId="left">
            <Heading size="small">Some heading in here</Heading>
          </Accordion.TargetLeftSlot>
        </Accordion>,
      );
      cySmartGet('left').should('exist').and('have.css', 'gap', '0px');
      cySmartGet('left').should('have.css', 'align-items', 'flex-start');
    });

    it('should render the <Accordion.TargetRightSlot /> subcomponent, with opinionated defaults', () => {
      cyMountWithProviders(
        <Accordion>
          <Accordion.TargetRightSlot testId="right">
            <Heading size="small">Some heading in here</Heading>
          </Accordion.TargetRightSlot>
        </Accordion>,
      );
      cySmartGet('right').should('exist').and('have.css', 'gap', '0px');
      cySmartGet('right').should('have.css', 'align-items', 'flex-end');
    });

    it('should render the <Accordion.ExpandedContent /> subcomponent, with opinionated defaults', () => {
      cyMountWithProviders(
        <Accordion expanded>
          <Accordion.ExpandedContent testId="expanded">
            <Heading size="small">Some heading in here</Heading>
          </Accordion.ExpandedContent>
        </Accordion>,
      );

      cySmartGet('expanded').should('exist').and('be.visible');
      cySmartGet('expanded').should('have.css', 'gap', '8px');
    });

    it(`should render <Divider /> component with opinionated defaults, when it's used inside of <Accordion.ExpandedContent />`, () => {
      cyMountWithProviders(
        <Accordion expanded>
          <Accordion.TargetLeftSlot testId="left">
            <Body size="small">Some heading in here</Body>
          </Accordion.TargetLeftSlot>
          <Accordion.ExpandedContent>
            <Divider testId="divider" />
            <Heading size="small">Some heading in here</Heading>
          </Accordion.ExpandedContent>
        </Accordion>,
      );

      cySmartGet('divider').should('have.css', 'margin-bottom', '16px');
      cySmartGet('divider').within($el => {
        cy.window().then(win => {
          const after = win.getComputedStyle($el[0], '::after');
          const bgc = after.getPropertyValue('background-color');
          expect(bgc).to.equal(
            hexToRgbString(
              smartPickTokenValue(
                designTokens,
                'base.color.translucent.standard[200]',
              ),
            ),
          );
        });
      });
    });

    it('should allow sx to be passed to all subcomponents', () => {
      cyMountWithProviders(
        <Accordion testId="moo" expanded>
          <Accordion.TargetLeftSlot sx={{ bg: 'gold' }}>
            daslkjhadslkjdsa
          </Accordion.TargetLeftSlot>
          <Accordion.TargetRightSlot sx={{ bg: 'gold' }}>
            dsalkjdsalkjdsa
          </Accordion.TargetRightSlot>
          <Accordion.ExpandedContent sx={{ bg: 'gold' }}>
            sadlkjdslkjsad
          </Accordion.ExpandedContent>
        </Accordion>,
      );
      cySmartGet('moo__clickableArea__targetLeft').should(
        'have.backgroundColor',
        'gold',
      );
      cySmartGet('moo__clickableArea__targetRight').should(
        'have.backgroundColor',
        'gold',
      );
      cySmartGet('moo__expandedContent').should('have.backgroundColor', 'gold');
    });
  });
});
