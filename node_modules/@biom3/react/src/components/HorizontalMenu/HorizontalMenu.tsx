import { Children, ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { BUTTON_SIZES, ButtonSize } from '../../types';
import { MakeResponsive } from '../../types/shared';
import { isChildSubcomponent } from '../../utils';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { DEFAULT_BUTTON_SIZE } from '../Clickable/Buttons/styles';
import { SmartClone } from '../SmartClone';
import { HorizontalMenuButtCon } from './HorizontalMenuButtCon';
import { HorizontalMenuButton } from './HorizontalMenuButton';
import {
  getContainerStyles,
  horizontalMenuSxProps,
  renderResponsiveContainerStyles,
} from './styles';

export type HorizontalMenuProps<
  RC extends ReactElement | undefined = undefined,
> = BoxWithRCAndDomProps<RC> & {
  size?: MakeResponsive<ButtonSize>;
};

export function HorizontalMenu<
  RC extends ReactElement | undefined = undefined,
>({ children, sx = {}, size = 'medium', ...props }: HorizontalMenuProps<RC>) {
  const themeProps = useTheme();
  const startingSize = getStartingSize(size, DEFAULT_BUTTON_SIZE, BUTTON_SIZES);
  const { styles: responsiveStyles } = renderResponsiveContainerStyles({
    size,
    themeProps,
  });
  const containerSx = merge(
    horizontalMenuSxProps,
    getContainerStyles({ size: startingSize, themeProps }),
    responsiveStyles,
    sx,
  );

  return (
    <Box {...props} sx={containerSx}>
      {Children.map(children, child => {
        if (
          isChildSubcomponent(child, HorizontalMenuButtCon) ||
          isChildSubcomponent(child, HorizontalMenuButton)
        ) {
          return (
            <SmartClone size={child.props.size ? child.props.size : size}>
              {child}
            </SmartClone>
          );
        }
        return child;
      })}
    </Box>
  );
}

HorizontalMenu.displayName = 'HorizontalMenu';
HorizontalMenu.Button = HorizontalMenuButton;
HorizontalMenu.ButtCon = HorizontalMenuButtCon;
