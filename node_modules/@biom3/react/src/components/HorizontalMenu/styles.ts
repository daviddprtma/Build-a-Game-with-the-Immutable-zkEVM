import merge from 'ts-deepmerge';

import { ButtonSize } from '../../types/clickable';
import { MakeResponsive } from '../../types/shared';
import { DeeplyNestedSx } from '../../types/sxProps';
import { BiomeTheme } from '../../types/theme';
import { isError } from '../../utils/textStyleHelpers';

export const horizontalMenuSxProps: DeeplyNestedSx = {
  justifyContent: 'stretch',
  bg: 'base.color.translucent.standard.200',
  position: 'relative',
  d: 'flex',
  w: '100%',
};

export function getContainerStyles({
  size,
  themeProps,
}: {
  size: ButtonSize;
  themeProps: BiomeTheme;
}) {
  const paddingAndGap =
    size === 'large' || size === 'medium'
      ? themeProps.base.spacing.x2
      : themeProps.base.spacing.x1;
  return {
    gap: paddingAndGap,
    padding: paddingAndGap,
    borderRadius:
      size === 'large' || size === 'medium'
        ? themeProps.base.borderRadius.x8
        : themeProps.base.borderRadius.x4,
  };
}

export function getButtonStyles({
  size,
  themeProps,
}: {
  size: ButtonSize;
  themeProps: BiomeTheme;
}) {
  return {
    borderRadius:
      size === 'large' || size === 'medium'
        ? themeProps.base.borderRadius.x4
        : themeProps.base.spacing.x2,
  };
}

export function renderResponsiveContainerStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();
  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getContainerStyles({
            size: responsiveSize,
            themeProps,
          }),
        };
      }
      return {};
    }),
  );

  return {
    styles: sizeStyles,
  };
}

export const buttonSxProps: DeeplyNestedSx = {
  flex: 1,
  paddingX: 'base.spacing.x4',
  background: 'base.color.translucent.emphasis.100',
  transitionProperty: 'background, box-shadow',
  transitionDuration: 'base.motion.normal.fast.cssDuration',
  transitionTimingFunction: 'base.motion.normal.fast.cssEase',

  '&:hover:not([disabled])': {
    boxShadow: ({ base }: BiomeTheme) =>
      `inset 0 0 0 ${base.border.size[100]} ${base.color.brand[1]}`,
  },

  '&:active:not([disabled])': {
    boxShadow: ({ base }: BiomeTheme) =>
      `inset 0 0 0 ${base.border.size[200]} ${base.color.brand[1]}`,
  },

  '&.selected': {
    boxShadow: ({ base }: BiomeTheme) =>
      `inset 0 0 0 ${base.border.size[200]} ${base.color.brand[1]}`,
  },

  '&:hover:not([disabled])::before': {
    content: 'unset',
  },

  '& > span': {
    textAlign: 'left',
    whiteSpace: 'nowrap',
  },
};

export function renderResponsiveButtonStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();
  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtonStyles({
            size: responsiveSize,
            themeProps,
          }),
        };
      }
      return {};
    }),
  );

  return {
    styles: sizeStyles,
  };
}

export function getButtonIconStyles({
  size,
  themeProps,
}: {
  size: ButtonSize;
  themeProps: BiomeTheme;
}) {
  return {
    width:
      size === 'large' || size === 'medium'
        ? themeProps.base.icon.size[250]
        : themeProps.base.icon.size[200],
  };
}

export function renderResponsiveButtonIconStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();
  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtonIconStyles({
            size: responsiveSize,
            themeProps,
          }),
        };
      }
      return {};
    }),
  );

  return {
    styles: sizeStyles,
  };
}
