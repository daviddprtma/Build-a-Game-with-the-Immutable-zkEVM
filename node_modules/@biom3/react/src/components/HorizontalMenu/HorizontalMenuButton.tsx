import { ClassNames, DistributiveOmit } from '@emotion/react';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { BUTTON_SIZES, ButtonProps } from '../../types';
import { getStartingSize } from '../../utils/styleHelpers';
import { Button } from '../Clickable';
import { ButtonIcon } from '../Clickable/Buttons/ButtonIcon';
import { ButtonLogo } from '../Clickable/Buttons/ButtonLogo';
import { DEFAULT_BUTTON_SIZE } from '../Clickable/Buttons/styles';
import {
  buttonSxProps,
  getButtonStyles,
  renderResponsiveButtonStyles,
} from './styles';

export type HorizontalMenuButtonProps<
  RC extends ReactElement | undefined = undefined,
> = DistributiveOmit<ButtonProps<RC>, 'variant'> & {
  selected?: boolean;
};

export function HorizontalMenuButton<
  RC extends ReactElement | undefined = undefined,
>({
  children,
  sx = {},
  size = 'medium',
  selected,
  ...props
}: HorizontalMenuButtonProps<RC>) {
  const themeProps = useTheme();
  const startingSize = getStartingSize(size, DEFAULT_BUTTON_SIZE, BUTTON_SIZES);
  const { styles: responsiveStyles } = renderResponsiveButtonStyles({
    size,
    themeProps,
  });

  return (
    <ClassNames>
      {({ cx }) => (
        <Button
          {...props}
          size={size}
          variant="tertiary"
          className={cx({ selected })}
          sx={merge(
            buttonSxProps,
            responsiveStyles,
            getButtonStyles({ size: startingSize, themeProps }),
            sx,
          )}
        >
          {children}
        </Button>
      )}
    </ClassNames>
  );
}

HorizontalMenuButton.displayName = 'HorizontalMenuButton';
HorizontalMenuButton.Icon = ButtonIcon;
HorizontalMenuButton.Logo = ButtonLogo;
