import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import Link from 'next/link';
import { Ref } from 'react';

import { MockNextRouter } from '../../mocks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { HorizontalMenu } from './HorizontalMenu';

describe('<HorizontalMenu />', () => {
  it('should have correct displayName', () => {
    expect(HorizontalMenu.displayName).to.eq('HorizontalMenu');
  });

  it('should render as a div by default, and other tags as neccisary', () => {
    cyMountWithProviders(
      <HorizontalMenu testId="moo">
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(
      <HorizontalMenu testId="moo" rc={<section />}>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should pass on size prop onto all children', () => {
    cyMountWithProviders(
      <HorizontalMenu testId="moo" size="large">
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '64px');
    cyMountWithProviders(
      <HorizontalMenu testId="moo" size="small">
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '32px');
    cyMountWithProviders(
      <HorizontalMenu testId="moo">
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '48px');
  });

  it('should allow responsively sized button children', () => {
    cy.viewport(300, 100);
    cyMountWithProviders(
      <HorizontalMenu testId="moo" size={['small', 'medium', 'large']}>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '32px');
    cy.viewport(base.breakpoint.small, 100);
    cySmartGet('moo').children().should('have.css', 'height', '48px');
    cy.viewport(base.breakpoint.medium, 100);
    cySmartGet('moo').children().should('have.css', 'height', '64px');
  });

  it('should pass through html dom attr props, where neccissary', () => {
    cyMountWithProviders(
      <HorizontalMenu testId="moo" id="moo" aria-details="moo">
        <HorizontalMenu.Button testId="moo__button" id="moo" aria-details="moo">
          Button
        </HorizontalMenu.Button>
      </HorizontalMenu>,
    );
    cySmartGet('moo').should('have.attr', 'id', 'moo');
    cySmartGet('moo__button').should('have.attr', 'id', 'moo');
    cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
    cySmartGet('moo__button').should('have.attr', 'aria-details', 'moo');
  });

  it('should correctly forward domRef property', () => {
    const ref = cy.stub().as('refStub') as unknown as Ref<HTMLDivElement>;

    cyMountWithProviders(
      <HorizontalMenu testId="moo" domRef={ref}>
        <HorizontalMenu.Button>Button</HorizontalMenu.Button>
      </HorizontalMenu>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  context('Subcomponents', () => {
    context('HorizontalMenu.Button', () => {
      it('should allow size attr to be customised, even when the parent HorizontalMenu has a size prop', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.Button testId="moo" size="small">
              Button
            </HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.css', 'height', '32px');
      });
      it('should render icon children for HorizontalMenu.Button, with sx props intact', () => {
        cyMountWithProviders(
          <HorizontalMenu>
            <HorizontalMenu.Button testId="moo" sx={{ background: 'gold' }}>
              Button
            </HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.backgroundColor', 'gold');
      });
      it('should correctly overide some "tertiary" button styles', () => {
        cyMountWithProviders(
          <HorizontalMenu>
            <HorizontalMenu.Button testId="moo">Button</HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.css', 'padding-left', '16px');
        cySmartGet('moo').should('have.css', 'padding-right', '16px');
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.emphasis.100',
          ),
        );
      });
      it('should correctly forward domRef property', () => {
        const ref = cy
          .stub()
          .as('refStub') as unknown as Ref<HTMLButtonElement>;

        cyMountWithProviders(
          <HorizontalMenu testId="moo">
            <HorizontalMenu.Button domRef={ref}>Button</HorizontalMenu.Button>
          </HorizontalMenu>,
        );

        cy.get('@refStub').should('have.been.calledWithMatch', {
          nodeName: 'BUTTON',
        });
      });
      it(`should allow next/link component to be passed in as the 'as' prop`, () => {
        const onPushStub = cy.stub().as('onPushStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.Button rc={<Link href="/moo/cow" />} testId="moo">
                Button
              </HorizontalMenu.Button>
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('moo').should('have.attr', 'href', '/moo/cow');
        cySmartGet('moo').click();
        cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
      });
      it(`should allow next/link style href props`, () => {
        const onPushStub = cy.stub().as('onPushStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.Button
                rc={<Link href={{ pathname: '/moo/cow' }} />}
                testId="moo"
              >
                Button
              </HorizontalMenu.Button>
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('moo').should('have.attr', 'href', '/moo/cow');
        cySmartGet('moo').click();
        cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
      });
      it('should allow href and onClick property to both be supplied and used with next/link', () => {
        const onPushStub = cy.stub().as('onPushStub');
        const onClickStub = cy.stub().as('onClickStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.Button
                rc={<Link href={{ pathname: '/moo/cow' }} />}
                testId="moo"
                onClick={onClickStub}
              >
                Button
              </HorizontalMenu.Button>
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('@onPushStub').should('not.have.been.calledOnce');
        cySmartGet('@onClickStub').should('not.have.been.calledOnce');
        cySmartGet('moo').click();
        cySmartGet('@onPushStub').should('have.been.calledOnce');
        cySmartGet('@onClickStub').should('have.been.calledOnce');
      });

      it('should render button with a selected state, where neccissary', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.Button testId="selected" selected>
              Button
            </HorizontalMenu.Button>
            <HorizontalMenu.Button testId="notSelected">
              Button
            </HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('selected').should(
          'have.css',
          'box-shadow',
          'rgb(19, 19, 19) 0px 0px 0px 2px inset',
        );
        cySmartGet('notSelected').should('have.css', 'box-shadow', 'none');
      });

      it('should render button with a :hover state', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.Button testId="moo">Button</HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('moo').realHover();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          'rgb(19, 19, 19) 0px 0px 0px 1px inset',
        );
      });

      it('should render button with a :active state', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.Button testId="moo">Button</HorizontalMenu.Button>
          </HorizontalMenu>,
        );
        cySmartGet('moo').realMouseDown();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          'rgb(19, 19, 19) 0px 0px 0px 2px inset',
        );
      });
    });

    context('HorizontalMenu.ButtCon', () => {
      it('should allow size attr to be customised, even when the parent HorizontalMenu has a size prop', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.ButtCon testId="moo" size="small" icon="AirDrop" />
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.css', 'height', '32px');
      });
      it('should render icon children for HorizontalMenu.Button, with sx props intact', () => {
        cyMountWithProviders(
          <HorizontalMenu>
            <HorizontalMenu.ButtCon
              testId="moo"
              icon="AirDrop"
              sx={{ background: 'gold' }}
            />
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.backgroundColor', 'gold');
      });
      it('should correctly overide some "tertiary" button styles', () => {
        cyMountWithProviders(
          <HorizontalMenu>
            <HorizontalMenu.ButtCon icon="AirDrop" testId="moo" />
          </HorizontalMenu>,
        );
        cySmartGet('moo').should('have.css', 'padding-left', '0px');
        cySmartGet('moo').should('have.css', 'padding-right', '0px');
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.emphasis.100',
          ),
        );
      });
      it('should correctly forward domRef property', () => {
        const ref = cy
          .stub()
          .as('refStub') as unknown as Ref<HTMLButtonElement>;

        cyMountWithProviders(
          <HorizontalMenu testId="moo">
            <HorizontalMenu.ButtCon domRef={ref} icon="Alert" />
          </HorizontalMenu>,
        );

        cy.get('@refStub').should('have.been.calledWithMatch', {
          nodeName: 'BUTTON',
        });
      });
      it(`should allow next/link component to be passed in as the 'as' prop`, () => {
        const onPushStub = cy.stub().as('onPushStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.ButtCon
                rc={<Link href="/moo/cow" />}
                testId="moo"
                icon="ArrowBackward"
              />
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('moo').should('have.attr', 'href', '/moo/cow');
        cySmartGet('moo').click();
        cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
      });
      it(`should allow next/link style href props`, () => {
        const onPushStub = cy.stub().as('onPushStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.ButtCon
                rc={<Link href={{ pathname: '/moo/cow' }} />}
                testId="moo"
                icon="ArrowForward"
              />
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('moo').should('have.attr', 'href', '/moo/cow');
        cySmartGet('moo').click();
        cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
      });
      it('should allow href and onClick property to both be supplied and used with next/link', () => {
        const onPushStub = cy.stub().as('onPushStub');
        const onClickStub = cy.stub().as('onClickStub');
        cyMountWithProviders(
          <MockNextRouter pushStub={onPushStub}>
            <HorizontalMenu>
              <HorizontalMenu.ButtCon
                icon="ArrowBackward"
                rc={<Link href="/moo/cow" />}
                testId="moo"
                onClick={onClickStub}
              />
            </HorizontalMenu>
          </MockNextRouter>,
        );
        cySmartGet('@onPushStub').should('not.have.been.calledOnce');
        cySmartGet('@onClickStub').should('not.have.been.calledOnce');
        cySmartGet('moo').click();
        cySmartGet('@onPushStub').should('have.been.calledOnce');
        cySmartGet('@onClickStub').should('have.been.calledOnce');
      });

      it('should render button with a selected state, where neccissary', () => {
        cyMountWithProviders(
          <HorizontalMenu size="large">
            <HorizontalMenu.ButtCon testId="selected" icon="AirDrop" selected />
            <HorizontalMenu.ButtCon testId="notSelected" icon="AirDrop" />
          </HorizontalMenu>,
        );
        cySmartGet('selected').should(
          'have.css',
          'box-shadow',
          'rgb(19, 19, 19) 0px 0px 0px 2px inset',
        );
        cySmartGet('notSelected').should('have.css', 'box-shadow', 'none');
      });
    });
  });
});
