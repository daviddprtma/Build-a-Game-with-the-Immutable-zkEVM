import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Autocomplete } from '../Autocomplete';
import { Checkbox } from '../Checkbox';
import { NumberStepper } from '../NumberStepper';
import { Radio } from '../Radio';
import { Option, Select } from '../Select';
import { TextArea } from '../TextArea';
import { TextInput } from '../TextInput';
import { Toggle } from '../Toggle';
import { FormControl } from './FormControl';

describe('<FormControl />', () => {
  it('should have correct displayName', () => {
    expect(FormControl.displayName).to.eq('FormControl');
  });
  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <FormControl testId="moo" domRef={domRefStub}>
        <FormControl.Label testId="label">Label</FormControl.Label>
      </FormControl>,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
      innerHTML: Cypress.sinon.match('Label'),
    });
  });

  it('should render a div by default', () => {
    cyMountWithProviders(<FormControl testId="moo" />);

    cyGetByTestId('moo', {
      domElement: 'div',
    }).should('exist');
  });

  it('should render a custom element when specified', () => {
    cyMountWithProviders(<FormControl testId="moo" rc={<span />} />);

    cyGetByTestId('moo', {
      domElement: 'span',
    }).should('exist');
  });

  it('should accept styling via the sx prop', () => {
    cyMountWithProviders(<FormControl testId="moo" sx={{ color: 'red' }} />);

    cyGetByTestId('moo').should('have.color', 'red');
  });

  it('should set matching ids for both the input and label if one is provided', () => {
    cyMountWithProviders(
      <FormControl id="hello">
        <FormControl.Label testId="label">Label</FormControl.Label>
        <TextInput testId="input" />
      </FormControl>,
    );

    cyGetByTestId('label').should('have.attr', 'for', 'hello');
    cy.get('input').should('have.attr', 'id', 'hello');
  });

  it('should set matching ids for both the input and label even if one is not provided', () => {
    cyMountWithProviders(
      <FormControl>
        <FormControl.Label testId="label">Label</FormControl.Label>
        <Checkbox testId="moo" />
      </FormControl>,
    );

    cyGetByTestId('label')
      .should('have.attr', 'for')
      .then(labelFor => {
        cy.get('input').should('have.attr', 'id', labelFor);
      });
  });

  it('should only ever render subcomponents and expected inputs', () => {
    cyMountWithProviders(
      <FormControl>
        <FormControl.Label testId="label">Label</FormControl.Label>
        <FormControl.Caption testId="caption">Caption</FormControl.Caption>
        <TextInput testId="moo" />
        <FormControl.Validation testId="validation">
          Validation
        </FormControl.Validation>
        <div data-testid="not-a-subcomponent">some other text</div>
        <>im a fragment</>
        invisible text
      </FormControl>,
    );

    cySmartGet('not-a-subcomponent').should('not.exist');
    cy.contains('im a fragment').should('not.exist');
    cy.contains('invisible text').should('not.exist');
    cySmartGet('label').should('exist');
    cySmartGet('caption').should('exist');
    cySmartGet('validation').should('exist');
  });

  it('should allow all subcomponents to accept styling via the sx prop', () => {
    cyMountWithProviders(
      <FormControl>
        <FormControl.Label
          sx={{
            color: 'red',
          }}
          testId="label"
        >
          Label
        </FormControl.Label>
        <FormControl.Caption
          sx={{
            color: 'blue',
          }}
          testId="caption"
        >
          Caption
        </FormControl.Caption>
        <FormControl.Validation
          sx={{
            color: 'rgb(0, 255, 0)',
          }}
          testId="validation"
        >
          Validation
        </FormControl.Validation>
      </FormControl>,
    );

    cySmartGet('label').should('have.css', 'color', 'rgb(255, 0, 0)');
    cySmartGet('caption').should('have.css', 'color', 'rgb(0, 0, 255)');
    cySmartGet('validation').should('have.css', 'color', 'rgb(0, 255, 0)');
  });

  it('should render a horizontal layout when a Checkbox or Toggle is not used', () => {
    cyMountWithProviders(
      <FormControl testId="control">
        <FormControl.Label testId="label">Label</FormControl.Label>
        <TextInput testId="moo" />
      </FormControl>,
    );

    cySmartGet('control').should('have.css', 'flex-direction', 'column');
  });

  it('should render a vertical layout when a Checkbox or Toggle is used', () => {
    cyMountWithProviders(
      <FormControl testId="control">
        <FormControl.Label testId="label">Label</FormControl.Label>
        <Checkbox testId="moo" />
      </FormControl>,
    );

    cySmartGet('control').should('have.css', 'flex-direction', 'row');
    cySmartGet('control').children().should('have.length', 2);
  });

  it('should render choice inputs on the right, when neccissary', () => {
    cyMountWithProviders(
      <FormControl testId="control" textAlign="right">
        <Checkbox testId="moo" />
        <FormControl.Label testId="label">Label</FormControl.Label>
      </FormControl>,
    );

    cySmartGet('moo').should('have.css', 'order', '1');
  });

  it('should render choice inputs on the left, by default', () => {
    cyMountWithProviders(
      <FormControl testId="control">
        <Checkbox testId="moo" />
        <FormControl.Label testId="label">Label</FormControl.Label>
      </FormControl>,
    );

    cySmartGet('moo').should('have.css', 'order', '-1');
  });

  it('should support AutoComplete, TextArea, TextInput, Checkbox, Toggle, Radio, NumberStepper and Select components', () => {
    cyMountWithProviders(
      <FormControl>
        <Checkbox testId="checkbox" />
      </FormControl>,
    );
    cySmartGet('checkbox').should('exist');

    cyMountWithProviders(
      <FormControl>
        <TextInput testId="textinput" />
      </FormControl>,
    );
    cySmartGet('textinput').should('exist');

    cyMountWithProviders(
      <FormControl>
        <TextArea testId="textarea" />
      </FormControl>,
    );
    cySmartGet('textarea').should('exist');

    cyMountWithProviders(
      <FormControl>
        <Toggle testId="toggle" />
      </FormControl>,
    );
    cySmartGet('toggle').should('exist');

    cyMountWithProviders(
      <FormControl>
        <Radio testId="radio" />
      </FormControl>,
    );
    cySmartGet('radio').should('exist');

    cyMountWithProviders(
      <FormControl>
        <Select testId="select">
          <Option optionKey="moo">
            <Option.Label>moo</Option.Label>
          </Option>
        </Select>
      </FormControl>,
      { useAllProviders: true },
    );
    cySmartGet('select__target').should('exist');

    cyMountWithProviders(
      <FormControl>
        <Autocomplete testId="autocomplete" options={['moo', 'cow']} />
      </FormControl>,
      { useAllProviders: true },
    );
    cySmartGet('autocomplete').should('exist');

    cyMountWithProviders(
      <FormControl>
        <NumberStepper testId="numberStepper" />
      </FormControl>,
      { useAllProviders: true },
    );
    cySmartGet('numberStepper').should('exist');
  });
});
