import merge from 'ts-deepmerge';

import { InputTextAlign, InputValidationStatus } from '../../types/input';
import { DomPropsWithDomRef } from '../../types/shared';
import { BaseBodyProps } from '../../types/text';
import { Icon } from '../Icon/Icon';
import { Body } from '../Text';
import { DEFAULT_TEXT_INPUT_ALIGN } from '../TextInput';

export type FormControlValidationProps = Omit<
  BaseBodyProps & DomPropsWithDomRef<'span'>,
  'rc'
> & { textAlign?: InputTextAlign; validationStatus?: InputValidationStatus };

export function FormControlValidation({
  size = 'xSmall',
  children,
  validationStatus,
  testId,
  sx = {},
  textAlign = DEFAULT_TEXT_INPUT_ALIGN,
  ...props
}: FormControlValidationProps) {
  const iconSxProps = {
    marginTop: '-1px',
    order: textAlign === 'right' ? 1 : 0,
    ...(textAlign === 'right'
      ? { ml: 'base.spacing.x1' }
      : { mr: 'base.spacing.x1' }),
    width: 'base.icon.size.200',
    fill:
      validationStatus === 'error'
        ? 'base.color.status.fatal.bright'
        : validationStatus === 'success'
        ? 'base.color.status.success.bright'
        : 'base.color.status.guidance.bright',
  };

  return (
    <Body
      {...props}
      rc={<span />}
      size={size}
      testId={testId}
      sx={merge(
        {
          color: 'base.color.brand.4',
          display: 'flex',
          alignItems: 'center',
          flexGrow: 1,
          justifyContent: textAlign === 'right' ? 'flex-end' : 'flex-start',
        },
        sx,
      )}
    >
      <Icon
        icon={validationStatus === 'error' ? 'Alert' : 'InformationCircle'}
        sx={merge(iconSxProps)}
      />
      {children}
    </Body>
  );
}

FormControlValidation.displayName = 'FormControlValidation';
