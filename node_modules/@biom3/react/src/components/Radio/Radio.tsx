import { ReactElement, Ref } from 'react';
import merge from 'ts-deepmerge';

import { useForwardLocalDomRef, useTheme } from '../../hooks';
import {
  InputTextAlign,
  InputValidationStatus,
  StandardInputComponentWithProps,
} from '../../types/input';
import { inputResetStyles } from '../../utils/styleHelpers';
import { Box } from '../Box';
import {
  checkSx,
  containerSx,
  inputCssStyles,
  radioContainerSx,
} from './styles';

export type RadioProps = StandardInputComponentWithProps<
  'input',
  {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
  }
>;

export function Radio<RC extends ReactElement | undefined = undefined>({
  sx = {},
  testId = 'Radio',
  name,
  id = name,
  children,
  domRef = { current: null },
  className,
  onChange,
  checked,
  value,
  disabled,
  validationStatus,
  textAlign,
  inputRef,
  rc,
  ...inputHtmlAttrs
}: RC extends undefined ? RadioProps : RadioProps & { rc: RC }) {
  const localDomRef = useForwardLocalDomRef(domRef);
  const resetStyles = inputResetStyles(disabled);
  const theme = useTheme();

  return (
    <Box
      rc={rc}
      domRef={localDomRef}
      testId={testId}
      className={className}
      sx={merge(containerSx, sx)}
    >
      <input
        {...inputHtmlAttrs}
        type="radio"
        data-testid={`${testId}__input`}
        id={id}
        name={name}
        ref={inputRef}
        value={value}
        checked={checked}
        onChange={onChange}
        disabled={disabled}
        css={merge(resetStyles, inputCssStyles(theme))}
        className="actualInput"
      />
      <Box
        className="radioContainer"
        sx={radioContainerSx}
        testId={`${testId}__radioContainer`}
      >
        <Box
          rc={<span />}
          className="checkCircle"
          sx={checkSx}
          testId={`${testId}__checkCircle`}
        />
      </Box>
    </Box>
  );
}

Radio.displayName = 'Radio';
