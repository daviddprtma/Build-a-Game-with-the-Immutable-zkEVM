import { designTokens } from '@biom3/design-tokens';
import { useState } from 'react';

import {
  getInvalidCurrentPageWarningMsg,
  getInvalidPropWarningMsg,
} from '../../hooks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { OnboardingPagination } from './OnboardingPagination';

function OnboardingPaginationWithInternalState() {
  const [currentPage, setCurrentPage] = useState(1);

  return (
    <OnboardingPagination
      testId="moo"
      currentPage={currentPage}
      onPageChange={setCurrentPage}
    />
  );
}

describe('<OnboardingPagination />', () => {
  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <OnboardingPagination domRef={domRefStub} totalPages={10} testId="moo" />,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should render the correct number of pages', () => {
    cyMountWithProviders(<OnboardingPagination totalPages={10} testId="moo" />);
    cySmartGet('moo').children().should('have.length', 10);
  });

  it('should allow sx styles to be passed through from parent', () => {
    cyMountWithProviders(
      <OnboardingPagination totalPages={10} testId="moo" sx={{ bg: 'gold' }} />,
    );
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should responsively apply the "size" prop, when neccissary', () => {
    cy.viewport(200, 200);
    cyMountWithProviders(
      <OnboardingPagination
        totalPages={10}
        testId="moo"
        size={['small', null, 'medium']}
      />,
    );

    cySmartGet('moo').children().eq(0).should('have.css', 'height', '8px');
    cySmartGet('moo').children().eq(0).should('have.css', 'width', '16px');

    cy.viewport(designTokens.base.breakpoint.medium, 200);

    cySmartGet('moo').children().eq(0).should('have.css', 'height', '20px');
    cySmartGet('moo').children().eq(0).should('have.css', 'width', '48px');
  });

  context('Uncontrolled API', () => {
    it('should allow the use of onPageChange in uncontrolled mode', () => {
      const onPageChange = cy.stub().as('onPageChange');
      cyMountWithProviders(
        <OnboardingPagination
          defaultPage={1}
          onPageChange={onPageChange}
          testId="moo"
        />,
      );
      cySmartGet('@onPageChange').should('not.have.been.called');
      cySmartGet('moo__page--4').click();
      cySmartGet('@onPageChange').should('have.been.calledWith', 4);
    });

    it('should update the currently selected page, when a new page is clicked', () => {
      cyMountWithProviders(<OnboardingPagination testId="moo" />);
      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--4').click();
      cySmartGet('moo__page--1').should('not.have.class', 'selected');
      cySmartGet('moo__page--4').should('have.class', 'selected');
    });
  });

  context('Controlled API', () => {
    it('should not update the selected page when the user clicks the dots, and the control is not wired up properly', () => {
      cyMountWithProviders(
        <OnboardingPagination
          currentPage={1}
          onPageChange={() => {}}
          testId="moo"
        />,
      );

      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--4').click();
      cySmartGet('moo__page--1').should('have.class', 'selected');
    });

    it('should change page when another page is clicked', () => {
      cyMountWithProviders(<OnboardingPaginationWithInternalState />);
      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--3').click().should('have.class', 'selected');
    });

    it('should allow the use of onPageChange in controlled mode', () => {
      const onPageChange = cy.stub().as('onPageChange');
      cyMountWithProviders(
        <OnboardingPagination
          currentPage={1}
          onPageChange={onPageChange}
          testId="moo"
        />,
      );
      cySmartGet('@onPageChange').should('not.have.been.called');
      cySmartGet('moo__page--4').click();
      cySmartGet('@onPageChange').should('have.been.calledWith', 4);
    });
  });

  context('Unhappy path (bad input props)', () => {
    it('should not render anything and output a warning to the console, when totalPages is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <OnboardingPagination totalPages={0} testId="moo" />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('OnboardingPagination', 'totalPages', 0),
      );
    });

    it('should not render anything and output a warning to the console, when currentPage is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <OnboardingPagination defaultPage={0} testId="moo" />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('OnboardingPagination', 'defaultPage', 0),
      );
    });

    it('should not render anything and output a warning to the console, when defaultPage is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <OnboardingPagination
          currentPage={0}
          onPageChange={console.log}
          testId="moo"
        />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('OnboardingPagination', 'currentPage', 0),
      );
    });

    it('should not render anything and output a warning to the console, when currentPage is greater than totalPages', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <OnboardingPagination
          currentPage={11}
          totalPages={10}
          onPageChange={console.log}
          testId="moo"
        />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidCurrentPageWarningMsg('OnboardingPagination', 11, 10),
      );
    });

    it('should fallback to a defaultPage of 1, when defaultPage is greater than totalPages', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <OnboardingPagination defaultPage={11} totalPages={10} testId="moo" />,
      );
      cySmartGet('moo__page--1').should('have.class', 'selected');
    });
  });
});
