import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { mount } from 'cypress/react18';
import { useState } from 'react';

import { BiomeCombinedProviders } from '../../providers';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { Button } from '../Clickable';
import { Drawer } from './Drawer';

function ControlledDrawer({ onCloseStub }: any) {
  const [visible, setVisible] = useState(false);
  return (
    <Drawer
      visible={visible}
      headerBarTitle="test title"
      onCloseDrawer={onCloseStub}
    >
      <Drawer.Target testId="button">
        <button type="button" onClick={() => setVisible(!visible)}>
          open
        </button>
      </Drawer.Target>
      <Drawer.Content testId="content">hello</Drawer.Content>
    </Drawer>
  );
}

function UncontrolledDrawer({ onCloseStub }: any) {
  return (
    <Drawer headerBarTitle="test title" onCloseDrawer={onCloseStub}>
      <Drawer.Target testId="button">
        <button type="button">open</button>
      </Drawer.Target>
      <Drawer.Content testId="content">hello</Drawer.Content>
    </Drawer>
  );
}

describe('<Drawer />', () => {
  it('should have correct displayName', () => {
    expect(Drawer.displayName).to.eq('Drawer');
  });

  it('should correctly reveal bottom sheet content, when the button is clicked', () => {
    cyMountWithProviders(<UncontrolledDrawer />, {
      useAllProviders: true,
    });
    cySmartGet('button').should('exist');
    cySmartGet('content').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('content').should('exist');
  });

  it('should render a header by default', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container__header')
      .should('exist')
      .and('include.text', 'test title');
  });

  it('should not render a header, when neccissary', () => {
    cyMountWithProviders(
      <Drawer showHeaderBar={false} visible>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container__header').should('not.exist');
  });

  it('should correctly forward the domRef of the target component', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" domRef={domRef}>
        <Drawer.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Drawer.Target>
      </Drawer>,
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('allow various different Drawer sizes', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible size="quarter">
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container').should('have.css', 'height', '125px');

    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible size="half">
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container').should('have.css', 'height', '250px');

    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible size="threeQuarter">
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container').should('have.css', 'height', '375px');

    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible size="full">
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__container').should('have.css', 'height', '452px');
  });

  it('should close the Drawer by default, when the user clicks outside', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title">
        <Drawer.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Drawer.Target>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('Drawer__bgOverlay').click({ force: true });
    cySmartGet('content').should('not.exist');
  });

  it('should not close the Drawer, when the user clicks outside and outsideClicksClose is false', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" outsideClicksClose={false}>
        <Drawer.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Drawer.Target>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('Drawer__bgOverlay').click({ force: true });
    cySmartGet('content').should('exist');
  });

  it('should render a background overlay color, by default', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });

  it('should not render a background overlay color, when neccissary', () => {
    cyMountWithProviders(
      <Drawer headerBarTitle="test title" visible showBgOverlay={false}>
        <Drawer.Content testId="content">hello</Drawer.Content>
      </Drawer>,
    );
    cySmartGet('Drawer__bgOverlay').should(
      'have.backgroundColor',
      'rgba(0,0,0,0)',
    );
  });

  it('should update visible Drawer.Content, as the parent component re-renders', () => {
    function DrawerWithCount() {
      const [count, setCount] = useState(0);
      return (
        <Drawer visible headerBarTitle="test title">
          <Drawer.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </Drawer.Target>
          <Drawer.Content testId="content">count: {count}</Drawer.Content>
        </Drawer>
      );
    }
    cyMountWithProviders(<DrawerWithCount />);
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click({ force: true });
    cySmartGet('content').should('have.text', 'count: 1');
  });

  it('should update other props while the Drawer is open, if/when they change', () => {
    function ModalWithChangingBgSx() {
      const [title, setTitle] = useState('Header bar title #1');
      return (
        <>
          <Button testId="button" onClick={() => setTitle('How now brown cow')}>
            change header title text
          </Button>
          <Drawer visible headerBarTitle={title}>
            <Drawer.Content sx={{ p: '10px', bg: 'gold' }}>
              some content in here!!
            </Drawer.Content>
          </Drawer>
        </>
      );
    }
    cyMountWithProviders(<ModalWithChangingBgSx />);
    cySmartGet('Drawer__container__header__title').should(
      'have.text',
      'Header bar title #1',
    );
    cySmartGet('button').click({ force: true });
    cySmartGet('Drawer__container__header__title').should(
      'have.text',
      'How now brown cow',
    );
  });

  context('Controlled API', () => {
    it('should not toggle visibility of the Drawer.Content, if the control is not properly wired up', () => {
      cyMountWithProviders(
        <Drawer headerBarTitle="test title" visible>
          <Drawer.Content testId="content">hello</Drawer.Content>
        </Drawer>,
      );
      cySmartGet('content').should('exist');
      cySmartGet('Drawer__container__header__closeButtCon').click();
      cySmartGet('content').should('exist');

      cyMountWithProviders(
        <Drawer headerBarTitle="test title" visible={false}>
          <Drawer.Target>
            <button type="button" data-testid="button">
              open
            </button>
          </Drawer.Target>
          <Drawer.Content testId="content">hello</Drawer.Content>
        </Drawer>,
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });

    it('should call onCloseDrawer prop function, when something is trying to close the Drawer', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(<ControlledDrawer onCloseStub={onCloseStub} />);
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('Drawer__container__header__closeButtCon').click();
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('Uncontrolled API', () => {
    it('should open a bottom sheet, when the user clicks the target', () => {
      cyMountWithProviders(<UncontrolledDrawer />);
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist');
    });

    it('should still fire onCloseDrawer prop function when a Drawer is closed', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(<UncontrolledDrawer onCloseStub={onCloseStub} />);
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('Drawer__container__header__closeButtCon').click();
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  it('should allow the use of an external container, when neccissary', () => {
    mount(
      <BiomeCombinedProviders drawerContainerId="moo">
        <Box
          id="moo"
          sx={{
            position: 'absolute',
            width: '100%',
            height: 'calc(100% - 50px)',
            top: '50px',
            left: '0',
            bg: 'red',
          }}
        />
        <UncontrolledDrawer />
      </BiomeCombinedProviders>,
    );
    cySmartGet('button').click();
    cySmartGet('#moo div[data-testid="content"]').should('exist');
    cySmartGet('content').should('exist');
  });
});
