import { ClassNames } from '@emotion/react';
import { ReactElement, Ref } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useGetSubcomponentChildren,
  useSplitApartChildrenAndSubComponents,
  useTheme,
} from '../../hooks';
import {
  GetHybridClickableRCandDomProps,
  isBaseClickable,
  isBox,
} from '../../types/clickable';
import { hFlex, vFlex } from '../../utils/sxChunks';
import { Box } from '../Box';
import { BaseClickable } from '../Clickable';
import { CardAssetImage } from './CardAssetImage';
import { CardButtCon } from './CardButtCon';
import { CardButton } from './CardButton';
import { CardCaption } from './CardCaption';
import { CardDescription } from './CardDescription';
import { CardFramedImage } from './CardFramedImage';
import { CardFramedLogo } from './CardFramedLogo';
import { CardMenuItem } from './CardMenuItem';
import { CardTitle } from './CardTitle';
import { baseContainerStyles } from './styles';

export type CardProps<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
> = GetHybridClickableRCandDomProps<RC, OnClick> & {
  elevation?: 1 | 2 | 3 | 4 | 5;
  selected?: boolean;
};

export function Card<
  RC extends ReactElement | undefined = undefined,
  OnClick extends Function | undefined = undefined,
>({
  className,
  testId,
  domRef,
  rc,
  sx = {},
  children,
  elevation = 1,
  selected,
  ...otherProps
}: CardProps<RC, OnClick>) {
  const theme = useTheme();
  const { onClick } =
    'onClick' in otherProps ? otherProps : { ...otherProps, onClick: null };
  const baseClickableProps = {
    onClick,
    domRef,
    ...(rc ? { rc } : {}),
    ...otherProps,
  };
  const menuItem = useGetSubcomponentChild(children, CardMenuItem);
  const assetImage = useGetSubcomponentChild(children, CardAssetImage);
  const title = useGetSubcomponentChild(children, CardTitle);
  const description = useGetSubcomponentChild(children, CardDescription);
  const caption = useGetSubcomponentChild(children, CardCaption);
  const framedLogo = useGetSubcomponentChild(children, CardFramedLogo);
  const framedImage = useGetSubcomponentChild(children, CardFramedImage);
  const buttons = useGetSubcomponentChildren(children, CardButton);
  const buttCons = useGetSubcomponentChildren(children, CardButtCon);
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    CardAssetImage,
    CardTitle,
    CardCaption,
    CardFramedLogo,
    CardFramedImage,
    CardMenuItem,
    CardDescription,
    CardButtCon,
    CardButton,
  ]);
  const hasButtons = Boolean(buttons?.length || buttCons?.length);
  const containsClickables = hasButtons || Boolean(menuItem);

  const innerContents = (
    <>
      {menuItem && menuItem}
      {assetImage && assetImage}

      <Box
        sx={{
          ...vFlex,
          px: 'base.spacing.x6',
          position: 'relative',
        }}
        rc={<span />}
        className="textContainer"
        testId={`${testId}__textContainer`}
      >
        {framedImage || framedLogo || null}

        {title || caption || description ? (
          <Box
            sx={{
              ...vFlex,
              py: 'base.spacing.x6',
              pb: 'base.spacing.x8',
              gap: 'base.spacing.x4',
            }}
            className="innerTextContainer"
          >
            {caption}
            <Box
              sx={{
                ...vFlex,
                justifyContent: 'center',
                gap: 'base.spacing.x1',
              }}
            >
              {title}
              {description}
            </Box>
          </Box>
        ) : null}

        {hasButtons && (
          <Box
            sx={{
              ...hFlex,
              gap: 'base.spacing.x2',
              pb: 'base.spacing.x8',
              alignItems: 'center',
            }}
            className="buttonsContainer"
            testId={`${testId}__buttonsRow`}
          >
            {buttCons}
            {buttons}
          </Box>
        )}
        {otherChildren}
      </Box>
    </>
  );

  const mergedContainerSx = merge(
    baseContainerStyles,
    theme.components?.Card?.sxOverride ?? {},
    sx,
  );

  return (
    <ClassNames>
      {({ cx }) =>
        isBaseClickable(onClick, rc, containsClickables, baseClickableProps) ? (
          <BaseClickable
            {...baseClickableProps}
            testId={testId}
            sx={mergedContainerSx}
            className={cx(
              className,
              'Card',
              'Card--baseClickable',
              `Card--elevation${elevation}`,
              { 'Card--selected': selected },
            )}
          >
            {innerContents}
          </BaseClickable>
        ) : isBox(onClick, rc, containsClickables, otherProps) ? (
          <Box
            {...otherProps}
            domRef={domRef as Ref<HTMLDivElement>}
            rc={onClick ? <div /> : <article />}
            testId={testId}
            sx={mergedContainerSx}
            className={cx(
              className,
              'Card',
              'Card--box',
              `Card--elevation${elevation}`,
              { 'Card--selected': selected },
            )}
          >
            {innerContents}
          </Box>
        ) : null
      }
    </ClassNames>
  );
}

Card.displayName = 'Card';
Card.Title = CardTitle;
Card.Caption = CardCaption;
Card.Description = CardDescription;
Card.FramedLogo = CardFramedLogo;
Card.FramedImage = CardFramedImage;
Card.AssetImage = CardAssetImage;
Card.MenuItem = CardMenuItem;
Card.Button = CardButton;
Card.ButtCon = CardButtCon;
