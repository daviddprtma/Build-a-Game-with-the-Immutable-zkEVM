/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/click-events-have-key-events */
import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import NextLink from 'next/link';

import { MockNextRouter } from '../../mocks';
import {
  DUMMY_RASTER_IMAGE_2_URL,
  DUMMY_VECTOR_IMAGE_URL,
} from '../../utils/dummyImages';
import { base64UrlEncode } from '../../utils/encodeHelpers';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { MenuItem } from '../MenuItem';
import { Card } from './Card';

describe('<Card />', () => {
  it('should have correct displayName', () => {
    expect(Card.displayName).to.eq('Card');
  });
  it('should correctly fwd article domRef, by default', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.called');
    cyMountWithProviders(<Card domRef={ref} />);
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'ARTICLE',
    });
  });

  it('should correctly foward domRef, when rendered both as a button', () => {
    const buttonRef = cy.stub().as('buttonRef');
    cyMountWithProviders(
      <Card testId="moo" domRef={buttonRef} onClick={() => console.log('@@@')}>
        <Card.Title>moo</Card.Title>
      </Card>,
    );
    cySmartGet('@buttonRef').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should correctly apply custom sx', () => {
    cyMountWithProviders(
      <Card sx={{ border: '3px solid red' }} testId="moo">
        <Card.Title>mooo</Card.Title>
      </Card>,
    );
    cySmartGet('moo').should('have.css', 'border-width', '3px');
    cySmartGet('moo').should('have.css', 'border-style', 'solid');
    cySmartGet('moo').should('have.borderColor', 'red');
  });

  it('should render any content aswell as subcomponents', () => {
    cyMountWithProviders(
      <Card>
        <Card.Title testId="moo">moo</Card.Title>
        <div data-testid="not-hidden">is actually rendered</div>
        <>is also not rendered</>
      </Card>,
    );
    cySmartGet('moo').should('exist');
    cySmartGet('not-hidden').should('exist');
    cy.contains('is also not rendered').should('exist');
  });

  it('should zoom the asset media, when hovered', () => {
    cyMountWithProviders(
      <Card
        elevation={1}
        testId="moo"
        onClick={console.log}
        sx={{ w: '200px' }}
      >
        <Card.Title>moo</Card.Title>
        <Card.AssetImage imageUrl={DUMMY_RASTER_IMAGE_2_URL} testId="image" />
      </Card>,
    );

    cySmartGet('image').find('.AspectRatioImage__inner__image').as('image');
    cySmartGet('@image').should('have.css', 'scale', '1');
    cySmartGet('moo').realHover();
    cySmartGet('@image').should('have.css', 'scale', '1.05');
  });

  it('should be outlined, when "selected"', () => {
    cyMountWithProviders(
      <Card
        elevation={1}
        testId="moo"
        onClick={console.log}
        sx={{ w: '200px' }}
        selected
      >
        <Card.Title>moo</Card.Title>
        <Card.AssetImage imageUrl={DUMMY_RASTER_IMAGE_2_URL} testId="image" />
      </Card>,
    );

    cySmartGet('moo').should('have.css', 'border-width', '2px');
    cySmartGet('moo').should('have.css', 'border-style', 'solid');
    cySmartGet('moo').should(
      'have.borderColor',
      designTokens.base.color.translucent.standard[1000],
    );
    cySmartGet('moo').within($el => {
      cy.window().then(win => {
        const after = win.getComputedStyle($el[0], '::after');
        expect(after.getPropertyValue('border-width')).to.equal('2px');
        expect(after.getPropertyValue('border-color')).to.equal(
          'rgb(240, 240, 240)',
        );
      });
    });
  });

  context('Elevation coloring', () => {
    it('should correctly apply elevation 1', () => {
      cyMountWithProviders(
        <Card elevation={1} testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.900'),
      );
      cySmartGet('moo')
        .realHover()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[700]'),
        );
      cySmartGet('moo')
        .realMouseDown()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral.800'),
        );
    });
    it('should correctly apply elevation 2', () => {
      cyMountWithProviders(
        <Card elevation={2} testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.800'),
      );
      cySmartGet('moo')
        .realHover()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral.600'),
        );
      cySmartGet('moo')
        .realMouseDown()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[700]'),
        );
    });
    it('should correctly apply elevation 3', () => {
      cyMountWithProviders(
        <Card elevation={3} testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.700'),
      );
      cySmartGet('moo')
        .realHover()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[500]'),
        );
      cySmartGet('moo')
        .realMouseDown()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[600]'),
        );
    });
    it('should correctly apply elevation 4', () => {
      cyMountWithProviders(
        <Card elevation={4} testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.600'),
      );
      cySmartGet('moo')
        .realHover()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[500]'),
        );
      cySmartGet('moo')
        .realMouseDown()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[500]'),
        );
    });
    it('should correctly apply elevation 5', () => {
      cyMountWithProviders(
        <Card elevation={5} testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.500'),
      );
      cySmartGet('moo')
        .realHover()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[500]'),
        );
      cySmartGet('moo')
        .realMouseDown()
        .should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral[500]'),
        );
    });
  });

  context('Click related logic tests', () => {
    it(`should correctly render an <article> tag, by default`, () => {
      cyMountWithProviders(
        <Card testId="moo">
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'ARTICLE');
    });

    it('should render as an <div> tag even when there is an onclick prop provided, but the Card contains clickable components inside it', () => {
      cyMountWithProviders(
        <Card testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
          <Card.Button>moo</Card.Button>
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    });

    it(`should correctly render a <button> tag, when onClick is passed (but no clickables are contained within)`, () => {
      cyMountWithProviders(
        <Card testId="moo" onClick={console.log}>
          <Card.Title>moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
    });

    it('should render as a <a> tag when neccissary', () => {
      cyMountWithProviders(
        <Card testId="moo" rc={<a href="/moo" />}>
          <Card.Title>moo cow</Card.Title>
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    });

    it('should render as a <div> (with hover FX), when there is an internal clickable used, AND an onClick prop', () => {
      cyMountWithProviders(
        <Card testId="moo" onClick={console.log}>
          <Card.Title>moo cow</Card.Title>
          <Card.ButtCon icon="Add" />
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
      cySmartGet('moo').realHover();
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgba(0, 0, 0, 0.16) 0px 4px 8px 4px, rgba(0, 0, 0, 0.32) 0px 1px 4px 0px',
      );
    });

    it('should still allow onClick prop, when there is an internal clickable used', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <Card testId="moo" onClick={onClickStub}>
          <Card.Title>moo cow</Card.Title>
          <Card.ButtCon icon="Add" />
        </Card>,
      );
      cySmartGet('@onClickStub').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@onClickStub').should('have.been.calledOnce');
    });

    it('should allow onClick prop to be passed through, when its used on an <a> inside rc', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <Card testId="moo" rc={<a onClick={onClickStub} />}>
          <Card.Title>moo cow</Card.Title>
        </Card>,
      );
      cySmartGet('@onClickStub').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@onClickStub').should('have.been.calledOnce');
    });

    it('should NOT fire the root onClick, when an internal clickable (ButtCon) is clicked', () => {
      const outerOnClickStub = cy.stub().as('outerOnClickStub');
      const innerOnClickStub = cy.stub().as('innerOnClickStub');
      cyMountWithProviders(
        <Card onClick={outerOnClickStub}>
          <Card.Title>moo cow</Card.Title>
          <Card.ButtCon
            icon="Add"
            onClick={innerOnClickStub}
            testId="innerButton"
          />
        </Card>,
      );
      cySmartGet('@outerOnClickStub').should('not.have.been.called');
      cySmartGet('@innerOnClickStub').should('not.have.been.called');
      cySmartGet('innerButton').click();
      cySmartGet('@outerOnClickStub').should('not.have.been.called');
      cySmartGet('@innerOnClickStub').should('have.been.calledOnce');
    });

    it('should NOT fire the root onClick, when an internal clickable (OverflowPopoverMenu) is clicked', () => {
      const outerOnClickStub = cy.stub().as('outerOnClickStub');
      cyMountWithProviders(
        <Card onClick={outerOnClickStub}>
          <Card.Title>moo cow</Card.Title>
          <Card.MenuItem>
            <MenuItem.OverflowPopoverMenu testId="innerButton">
              <MenuItem>
                <MenuItem.Label>mooo</MenuItem.Label>
              </MenuItem>
              <MenuItem>
                <MenuItem.Label>cow</MenuItem.Label>
              </MenuItem>
            </MenuItem.OverflowPopoverMenu>
          </Card.MenuItem>
        </Card>,
        { useAllProviders: true },
      );
      cySmartGet('@outerOnClickStub').should('not.have.been.called');
      cySmartGet('innerButton').click();
      cySmartGet('@outerOnClickStub').should('not.have.been.called');
    });

    it(`should render as a <a> tag when neccissary, even when there are internal clickables used`, () => {
      cyMountWithProviders(
        <Card testId="moo" rc={<a href="/moo" />}>
          <Card.Title>moo cow</Card.Title>
          <Card.ButtCon icon="Add" />
        </Card>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    });

    it(`should allow next/link component to be rendered`, () => {
      const onPushStub = cy.stub().as('onPushStub');
      cyMountWithProviders(
        <MockNextRouter pushStub={onPushStub}>
          <Card testId="moo" rc={<NextLink href="/moo/cow" />}>
            <Card.Title>moo cow</Card.Title>
          </Card>
        </MockNextRouter>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'A');
      cySmartGet('moo').click();
      cySmartGet('@onPushStub').should('have.been.calledWith', '/moo/cow');
    });
  });

  context('Subcomponents', () => {
    it('should correctly render <Card.AssetImage />', () => {
      cyMountWithProviders(
        <Card>
          <Card.AssetImage imageUrl={DUMMY_VECTOR_IMAGE_URL} testId="moo" />
        </Card>,
      );
      cySmartGet('moo__innerContainer__cloudImage')
        .should('have.attr', 'src')
        .and('include', base64UrlEncode(DUMMY_VECTOR_IMAGE_URL));
    });

    it('should correctly render <Card.Title />', () => {
      cyMountWithProviders(
        <Card>
          <Card.Title testId="moo">moo</Card.Title>
        </Card>,
      );
      cySmartGet('moo').should('have.text', 'moo');
    });

    it('should correctly render <Card.FramedLogo />', () => {
      cyMountWithProviders(
        <Card>
          <Card.FramedLogo logo="PassportSymbol" testId="moo" />
        </Card>,
      );
      cySmartGet('moo').should('exist');
    });
    it('should correctly render <Card.FramedImage />', () => {
      cyMountWithProviders(
        <Card>
          <Card.FramedImage imageUrl={DUMMY_VECTOR_IMAGE_URL} testId="moo" />
        </Card>,
      );
      cySmartGet('moo')
        .should('have.attr', 'src')
        .and('include', base64UrlEncode(DUMMY_VECTOR_IMAGE_URL));
    });

    context('all subcomponents', () => {
      it('should accept sx style input', () => {
        cyMountWithProviders(
          <Card>
            <Card.AssetImage testId="assetImage" sx={{ bg: 'gold' }} />
            <Card.Title testId="title" sx={{ bg: 'gold' }}>
              moo
            </Card.Title>
            <Card.Caption testId="caption" sx={{ bg: 'gold' }}>
              moo
            </Card.Caption>
            <Card.FramedImage testId="framedImage" sx={{ bg: 'gold' }} />
          </Card>,
        );
        cySmartGet('assetImage').should('have.backgroundColor', 'gold');
        cySmartGet('title').should('have.backgroundColor', 'gold');
        cySmartGet('caption').should('have.backgroundColor', 'gold');
        cySmartGet('framedImage--defaultImage').should(
          'have.backgroundColor',
          'gold',
        );

        cyMountWithProviders(
          <Card>
            <Card.FramedLogo
              logo="GameStopSymbol"
              testId="framedLogo"
              sx={{ bg: 'gold' }}
            />
          </Card>,
        );
        cySmartGet('framedLogo').should('have.backgroundColor', 'gold');
      });

      it('should correctly foward domRef', () => {
        const assetImageRef = cy.stub().as('assetImageRef');
        cyMountWithProviders(
          <Card>
            <Card.AssetImage testId="assetImage" domRef={assetImageRef} />
          </Card>,
        );
        cySmartGet('@assetImageRef').should('have.been.calledWithMatch', {
          nodeName: 'SPAN',
        });

        const titleRef = cy.stub().as('titleRef');
        cyMountWithProviders(
          <Card>
            <Card.Title testId="title" domRef={titleRef}>
              moo
            </Card.Title>
          </Card>,
        );
        cySmartGet('@titleRef').should('have.been.calledWithMatch', {
          nodeName: 'SPAN',
        });

        const framedImageRef = cy.stub().as('framedImageRef');
        cyMountWithProviders(
          <Card>
            <Card.FramedImage testId="framedImage" domRef={framedImageRef} />
          </Card>,
        );
        cySmartGet('@framedImageRef').should('have.been.calledWithMatch', {
          nodeName: 'IMG',
        });

        const framedLogoRef = cy.stub().as('framedLogoRef');
        cyMountWithProviders(
          <Card>
            <Card.FramedLogo
              logo="GameStopSymbol"
              testId="framedLogo"
              domRef={framedLogoRef}
            />
          </Card>,
        );
        cySmartGet('@framedLogoRef').should('have.been.calledWithMatch', {
          nodeName: 'SPAN',
        });

        const buttConRef = cy.stub().as('buttConRef');
        const buttonRef = cy.stub().as('buttonRef');
        const captionRef = cy.stub().as('captionRef');
        const menuItemRef = cy.stub().as('menuItemRef');
        const descriptionRef = cy.stub().as('descriptionRef');
        cyMountWithProviders(
          <Card>
            <Card.ButtCon domRef={buttConRef} icon="Apple" />
            <Card.Button domRef={buttonRef}>moo</Card.Button>
            <Card.Caption domRef={captionRef}>moo</Card.Caption>
            <Card.Description domRef={descriptionRef}>
              some description here
            </Card.Description>
            <Card.MenuItem domRef={menuItemRef}>
              <MenuItem.Label>mooo</MenuItem.Label>
              <MenuItem.Icon icon="Apple" />
            </Card.MenuItem>
          </Card>,
        );
        cySmartGet('@buttConRef').should('have.been.calledWithMatch', {
          nodeName: 'BUTTON',
        });
        cySmartGet('@buttonRef').should('have.been.calledWithMatch', {
          nodeName: 'BUTTON',
        });
        cySmartGet('@captionRef').should('have.been.calledWithMatch', {
          nodeName: 'SPAN',
        });
        cySmartGet('@menuItemRef').should('have.been.calledWithMatch', {
          nodeName: 'ARTICLE',
        });
        cySmartGet('@descriptionRef').should('have.been.calledWithMatch', {
          nodeName: 'SPAN',
        });
      });
    });
  });
});
