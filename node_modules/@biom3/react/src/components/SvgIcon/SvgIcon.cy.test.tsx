import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { hexToRgbString } from '../../utils/colorHelpers';
import { cyGetByTestId, cyMountWithProviders } from '../../utils/testHelpers';
import {
  CUSTOM_CSS_GRADIENT_ERROR,
  RESPONSIVE_GRADIENT_ERROR,
  SvgIcon,
} from './SvgIcon';

const DUMMY_SVG_CHILD = (
  <circle cx="12" cy="12" r="8" data-testid="svgIcon__circle" />
);

describe('<SvgIcon />', () => {
  it('should render a path child without crashing', () => {
    cyMountWithProviders(
      <SvgIcon testId="svgIcon" sx={{ fill: 'base.color.brand.1' }}>
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
      {
        theme: {
          base: {
            ...base,
            color: {
              ...base.color,
              brand: {
                ...base.color.brand,
                1: 'gold',
              },
            },
          },
        },
      },
    );
    cyGetByTestId('svgIcon').should('exist');
    cyGetByTestId('svgIcon__circle').should('exist');
  });

  it('should apply default coloring to svg children', () => {
    cyMountWithProviders(<SvgIcon testId="svgIcon">{DUMMY_SVG_CHILD}</SvgIcon>);
    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue({ base }, 'base.color.brand.1') || ''),
    );

    cyGetByTestId('svgIcon__circle').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue({ base }, 'base.color.brand.1') || ''),
    );
  });

  it('should allow color of icon to be customised', () => {
    cyMountWithProviders(
      <SvgIcon
        testId="svgIcon"
        sx={{ fill: 'base.color.status.guidance.bright' }}
      >
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(
        smartPickTokenValue({ base }, 'base.color.status.guidance.bright') ||
          '',
      ),
    );

    cyGetByTestId('svgIcon__circle').should(
      'have.css',
      'fill',
      hexToRgbString(
        smartPickTokenValue({ base }, 'base.color.status.guidance.bright') ||
          '',
      ),
    );
  });

  it('should allow color of icon to be a gradient', () => {
    cyMountWithProviders(
      <SvgIcon testId="svgIcon" sx={{ fill: 'base.gradient.1' }}>
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cyGetByTestId('svgIcon')
      .find('defs > linearGradient')
      .children()
      .should('have.length', 2)
      .then(children => {
        expect(children[0].getAttribute('stop-color')).to.eq('#F191FA');
        expect(children[1].getAttribute('stop-color')).to.eq('#83E3F0');
      });
  });

  it('should allow the size of the icon to be customised', () => {
    cyMountWithProviders(
      <SvgIcon testId="svgIcon" sx={{ w: '300px' }}>
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cyGetByTestId('svgIcon').should('have.css', 'width', '300px');
    cyGetByTestId('svgIcon__circle').should('have.css', 'width', '200px');
  });

  it('should allow user to use their own custom gradients / defs', () => {
    cyMountWithProviders(
      <SvgIcon testId="svgIcon" sx={{ fill: 'url(#Gradient2)' }}>
        <defs>
          <linearGradient id="Gradient2" x1="0" x2="0" y1="0" y2="1">
            <stop offset="0%" stopColor="red" />
            <stop offset="50%" stopColor="black" />
            <stop offset="100%" stopColor="blue" />
          </linearGradient>
        </defs>
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cyGetByTestId('svgIcon')
      .find('defs > linearGradient')
      .children()
      .should('have.length', 3)
      .then(children => {
        expect(children[0].getAttribute('stop-color')).to.eq('red');
        expect(children[1].getAttribute('stop-color')).to.eq('black');
        expect(children[2].getAttribute('stop-color')).to.eq('blue');
      });
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <SvgIcon
        domRef={ref}
        testId="svgIcon"
        sx={{ fill: 'base.color.brand.1' }}
      >
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cy.get('@refStub')
      .should('have.been.calledWithMatch', {
        nodeName: 'svg',
      })
      .and(
        'have.been.calledWith',
        Cypress.sinon.match({
          innerHTML: Cypress.sinon.match(/<circle /),
        }),
      );
  });

  it('should correctly apply responsive fill for simple colors', () => {
    cy.viewport(base.breakpoint.small - 100, 600);
    cyMountWithProviders(
      <SvgIcon
        testId="svgIcon"
        sx={{
          fill: [
            'base.color.brand.1',
            'base.color.brand.2',
            'base.color.brand.3',
            'base.color.brand.4',
            'base.color.brand.5',
            'base.color.brand.6',
          ],
        }}
      >
        {DUMMY_SVG_CHILD}
      </SvgIcon>,
    );

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.1')),
    );

    cy.viewport(base.breakpoint.small + 1, 600);

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.2')),
    );

    cy.viewport(base.breakpoint.medium + 1, 600);

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.3')),
    );

    cy.viewport(base.breakpoint.large + 1, 600);

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.4')),
    );

    cy.viewport(base.breakpoint.xLarge + 1, 600);

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.5')),
    );

    cy.viewport(base.breakpoint.xxLarge + 1, 600);

    cyGetByTestId('svgIcon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.brand.6')),
    );
  });

  context('Throwing errors correctly', () => {
    it('should throw error when user tries to pass CSS gradients as fill: property', done => {
      cy.on('uncaught:exception', err => {
        expect(err.message).to.include(CUSTOM_CSS_GRADIENT_ERROR);

        // using mocha's async done callback to finish
        // this test so we prove that an uncaught exception
        // was thrown
        done();

        // return false to prevent the error from
        // failing this test
        return false;
      });

      cyMountWithProviders(
        <SvgIcon
          testId="svgIcon"
          sx={{
            fill: 'linear-gradient(106deg, #F191FA 0%, #83E3F0 100%)',
          }}
        >
          {DUMMY_SVG_CHILD}
        </SvgIcon>,
      );
    });

    it('should throw error when user tries to pass array of responsive custom gradients as fill: property', done => {
      cy.on('uncaught:exception', err => {
        expect(err.message).to.include(RESPONSIVE_GRADIENT_ERROR);

        // using mocha's async done callback to finish
        // this test so we prove that an uncaught exception
        // was thrown
        done();

        // return false to prevent the error from
        // failing this test
        return false;
      });

      cyMountWithProviders(
        <SvgIcon
          testId="svgIcon"
          sx={{
            fill: [
              'linear-gradient(106deg, #F191FA 0%, #83E3F0 100%)',
              'linear-gradient(106deg, red 0%, green 100%)',
            ],
          }}
        >
          {DUMMY_SVG_CHILD}
        </SvgIcon>,
      );
    });

    it('should throw error when user tries to pass object of responsive custom gradients as fill: property', done => {
      cy.on('uncaught:exception', err => {
        expect(err.message).to.include(RESPONSIVE_GRADIENT_ERROR);

        // using mocha's async done callback to finish
        // this test so we prove that an uncaught exception
        // was thrown
        done();

        // return false to prevent the error from
        // failing this test
        return false;
      });

      cyMountWithProviders(
        <SvgIcon
          testId="svgIcon"
          sx={{
            fill: {
              default: 'linear-gradient(106deg, #F191FA 0%, #83E3F0 100%)',
              small: 'linear-gradient(106deg, red 0%, green 100%)',
            },
          }}
        >
          {DUMMY_SVG_CHILD}
        </SvgIcon>,
      );
    });

    it('should throw error when user tries to pass array of responsive gradient design-tokens as fill: property', done => {
      cy.on('uncaught:exception', err => {
        expect(err.message).to.include(RESPONSIVE_GRADIENT_ERROR);

        // using mocha's async done callback to finish
        // this test so we prove that an uncaught exception
        // was thrown
        done();

        // return false to prevent the error from
        // failing this test
        return false;
      });

      cyMountWithProviders(
        <SvgIcon
          testId="svgIcon"
          sx={{
            fill: ['base.gradient.1', 'base.gradient.2'],
          }}
        >
          {DUMMY_SVG_CHILD}
        </SvgIcon>,
      );
    });
  });
});
