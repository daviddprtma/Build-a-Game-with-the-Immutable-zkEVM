import { designTokens } from '@biom3/design-tokens';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { ButtCon, Button } from '../Clickable';
import { HorizontalMenu } from '../HorizontalMenu';
import { Toolbar } from './Toolbar';

describe('<Toolbar />', () => {
  it('should render as a <header> by default, as anything the user specifies', () => {
    cyMountWithProviders(
      <Toolbar testId="moo">
        <></>
      </Toolbar>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'HEADER');

    cyMountWithProviders(
      <Toolbar testId="moo" rc={<section />}>
        <></>
      </Toolbar>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(<Toolbar testId="moo" domRef={ref} />);
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'HEADER',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(<Toolbar testId="moo" sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should allow the rendering of any content whether it is a sub-component, or not', () => {
    cyMountWithProviders(
      <Toolbar sx={{ bg: 'gold' }}>
        <Toolbar.Title testId="moo">some title text</Toolbar.Title>
        <Toolbar.RightSlot>
          <Button testId="button">button will show</Button>
          <div data-testid="visible">something that also will show</div>
        </Toolbar.RightSlot>
      </Toolbar>,
    );

    cySmartGet('moo').should('exist');
    cySmartGet('visible').should('exist');
    cySmartGet('button').should('exist');
  });

  it('should pass through properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <Toolbar testId="moo" aria-atomic="true" data-moo="cow" />,
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  context('Subcomponents', () => {
    it('should correctly render the <Toolbar.LeftButtCon /> subcomponent', () => {
      cyMountWithProviders(
        <Toolbar>
          <Toolbar.LeftButtCon testId="moo" icon="ArrowBackward" />
        </Toolbar>,
      );
      cySmartGet('moo')
        .should('have.css', 'width', '48px')
        .and('css', 'height', '48px');
    });

    it('should correctly render the <Toolbar.Title /> subcomponent', () => {
      cyMountWithProviders(
        <Toolbar>
          <Toolbar.Title testId="moo">Some title text</Toolbar.Title>
        </Toolbar>,
      );
      cySmartGet('moo').should(
        'have.css',
        'font-family',
        'Suisse-Intl, sans-serif',
      );
      cySmartGet('moo').should('include.text', 'Some title text');
    });

    it('should correctly apply ellipsis to the <Toolbar.Title /> subcomponent by default', () => {
      cyMountWithProviders(
        <Toolbar>
          <Toolbar.LeftButtCon icon="AirDrop" />
          <Toolbar.Title testId="moo">
            Some title text kjhsd kjad skj dajk hads kh kadjs kja shkjads ad as
          </Toolbar.Title>
        </Toolbar>,
      );
      cySmartGet('moo').should('have.css', 'height', '32px');
    });

    it('should correctly render the <Toolbar.RightSlot /> subcomponent', () => {
      cyMountWithProviders(
        <Toolbar testId="moo">
          <Toolbar.RightSlot>
            <ButtCon icon="Add" testId="buttcon" />
            <ButtCon icon="AirDrop" testId="buttcon" />
            <div>somethig which WILL get rendered</div>
          </Toolbar.RightSlot>
        </Toolbar>,
      );
      cySmartGet('buttcon').should('have.length', 2);
      cy.contains('somethig which WILL get rendered').should('exist');
    });

    context('All subcomponents', () => {
      it('should responsively resize subcomponents, based on the toolbar size', () => {
        cy.viewport(400, 400);

        cyMountWithProviders(
          <Toolbar size={['small', null, 'medium']}>
            <Toolbar.LeftButtCon testId="leftButtCon" icon="ArrowBackward" />
            <Toolbar.Title testId="title">Some title text</Toolbar.Title>
            <Toolbar.Caption testId="caption">
              Some caption text
            </Toolbar.Caption>
            <Toolbar.RightSlot testId="horizontalMenu">
              <Button testId="horizontalMenu__button">moo</Button>
              <ButtCon testId="horizontalMenu__buttCon" icon="Add" />
              <HorizontalMenu testId="horizontalMenu">
                <HorizontalMenu.Button testId="horizontalMenu__button">
                  moo
                </HorizontalMenu.Button>
                <HorizontalMenu.ButtCon
                  icon="AirDrop"
                  testId="horizontalMenu__buttcon"
                />
              </HorizontalMenu>
            </Toolbar.RightSlot>
          </Toolbar>,
        );

        cySmartGet('leftButtCon').should('have.css', 'height', '32px');
        cySmartGet('title').should('have.css', 'font-size', '16px');
        cySmartGet('caption').should('have.css', 'font-size', '12px');
        cySmartGet('horizontalMenu__button').should(
          'have.css',
          'height',
          '32px',
        );
        cySmartGet('horizontalMenu__buttCon').should(
          'have.css',
          'height',
          '32px',
        );

        cy.viewport(designTokens.base.breakpoint.medium, 400);

        cySmartGet('leftButtCon').should('have.css', 'height', '48px');
        cySmartGet('title').should('have.css', 'font-size', '28px');
        cySmartGet('caption').should('have.css', 'font-size', '16px');
        cySmartGet('horizontalMenu__button').should(
          'have.css',
          'height',
          '48px',
        );
        cySmartGet('horizontalMenu__buttCon').should(
          'have.css',
          'height',
          '48px',
        );
      });

      it('should accept sx style input', () => {
        cyMountWithProviders(
          <Toolbar testId="moo">
            <Toolbar.LeftButtCon
              testId="leftButtcon"
              icon="ArrowBackward"
              sx={{ bg: 'gold' }}
            />
            <Toolbar.Title testId="title" sx={{ bg: 'gold' }}>
              Some title text
            </Toolbar.Title>

            <Toolbar.Caption testId="caption" sx={{ bg: 'gold' }}>
              Some caption text
            </Toolbar.Caption>

            <Toolbar.RightSlot sx={{ bg: 'gold' }} testId="rightSlot">
              <ButtCon icon="Add" />
            </Toolbar.RightSlot>
          </Toolbar>,
          { useAllProviders: true },
        );
        cySmartGet('leftButtcon').should('have.backgroundColor', 'gold');
        cySmartGet('title').should('have.backgroundColor', 'gold');
        cySmartGet('caption').should('have.backgroundColor', 'gold');
        cySmartGet('rightSlot').should('have.backgroundColor', 'gold');
      });

      it('should correctly forward domRef props', () => {
        const leftButtconRef = cy.stub().as('leftButtconRef');
        cySmartGet('@leftButtconRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <Toolbar>
            <Toolbar.LeftButtCon domRef={leftButtconRef} icon="ArrowBackward" />
          </Toolbar>,
        );
        cySmartGet('@leftButtconRef').should('have.been.calledOnce');

        const titleRef = cy.stub().as('titleRef');
        cySmartGet('@titleRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <Toolbar>
            <Toolbar.Title domRef={titleRef}>Some title text</Toolbar.Title>
          </Toolbar>,
        );
        cySmartGet('@titleRef').should('have.been.calledOnce');

        const captionRef = cy.stub().as('captionRef');
        cySmartGet('@captionRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <Toolbar>
            <Toolbar.Caption domRef={captionRef}>
              Some caption text
            </Toolbar.Caption>
          </Toolbar>,
        );
        cySmartGet('@captionRef').should('have.been.calledOnce');
      });
    });
  });
});
