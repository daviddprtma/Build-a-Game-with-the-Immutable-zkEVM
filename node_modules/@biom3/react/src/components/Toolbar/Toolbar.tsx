import { ReactElement, ReactNode } from 'react';
import merge from 'ts-deepmerge';

import { useGetSubcomponentChild, useTheme } from '../../hooks';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { vFlex } from '../../utils/sxChunks';
import { Box } from '../Box';
import { BoxWithRCAndDomProps } from '../Box/Box';
import { SmartClone } from '../SmartClone';
import { DEFAULT_TOOLBAR_SIZE, TOOLBAR_SIZES, ToolbarSize } from './shared';
import {
  getContainerStyles,
  getResponsiveContainerStyles,
  toolbarContainerBaseSx,
} from './styles';
import { ToolbarCaption } from './ToolbarCaption';
import { ToolbarLeftButtCon } from './ToolbarLeftButtCon';
import { ToolbarRightSlot } from './ToolbarRightSlot';
import { ToolbarTitle } from './ToolbarTitle';

export type ToolbarProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ToolbarSize>;
    children?: ReactNode;
  };

export function Toolbar<RC extends ReactElement | undefined = undefined>({
  sx = {},
  size = DEFAULT_TOOLBAR_SIZE,
  children,
  rc = <header />,
  testId = 'Toolbar',
  ...props
}: ToolbarProps<RC>) {
  const title = useGetSubcomponentChild(children, ToolbarTitle);
  const caption = useGetSubcomponentChild(children, ToolbarCaption);
  const leftButtCon = useGetSubcomponentChild(children, ToolbarLeftButtCon);
  const rightSlot = useGetSubcomponentChild(children, ToolbarRightSlot);
  const themeProps = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_TOOLBAR_SIZE,
    TOOLBAR_SIZES,
  );
  const allContainerStyles = merge(
    toolbarContainerBaseSx,
    getContainerStyles({ size: startingSize, themeProps }),
    getResponsiveContainerStyles({ size, themeProps }),
    sx,
  );

  return (
    <Box {...props} sx={allContainerStyles} rc={rc} testId={testId}>
      {leftButtCon && <SmartClone size={size}>{leftButtCon}</SmartClone>}
      <Box
        sx={{
          ...vFlex,
          flexGrow: 1,
        }}
        rc={<hgroup />}
      >
        {title && <SmartClone size={size}>{title}</SmartClone>}
        {caption && <SmartClone size={size}>{caption}</SmartClone>}
      </Box>

      {rightSlot && <SmartClone size={size}>{rightSlot}</SmartClone>}
    </Box>
  );
}

Toolbar.displayName = 'Toolbar';
Toolbar.LeftButtCon = ToolbarLeftButtCon;
Toolbar.Title = ToolbarTitle;
Toolbar.Caption = ToolbarCaption;
Toolbar.RightSlot = ToolbarRightSlot;
