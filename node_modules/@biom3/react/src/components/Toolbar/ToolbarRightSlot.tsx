import { Children, isValidElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { isChildSubcomponent } from '../../utils/subcomponentHelpers';
import { Box, BoxProps } from '../Box';
import { ButtCon, Button } from '../Clickable';
import { HorizontalMenu } from '../HorizontalMenu';
import { SmartClone } from '../SmartClone';
import { DEFAULT_TOOLBAR_SIZE, TOOLBAR_SIZES, ToolbarSize } from './shared';
import {
  getResponsiveRightSideMarginStyles,
  getRightSideMarginStyles,
} from './styles';

export type ToolbarRightSlotProps = BoxProps & {
  size?: MakeResponsive<ToolbarSize>;
};

export function ToolbarRightSlot({
  size = DEFAULT_TOOLBAR_SIZE,
  children,
  sx = {},
  testId,
  ...props
}: ToolbarRightSlotProps) {
  const themeProps = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_TOOLBAR_SIZE,
    TOOLBAR_SIZES,
  );
  return (
    <Box
      {...props}
      sx={merge(
        {
          display: 'flex',
          gap: 'base.spacing.x2',
        },
        getRightSideMarginStyles({ size: startingSize, themeProps }),
        getResponsiveRightSideMarginStyles({ size, themeProps }),
        sx,
      )}
      testId={testId}
    >
      {Children.map(children, child => {
        if (
          isChildSubcomponent(child, Button) ||
          isChildSubcomponent(child, ButtCon)
        ) {
          // @NOTE: render sub-component children, with some special extra props
          return (
            <SmartClone
              variant={
                isValidElement(child) && child.props.variant
                  ? child.props.variant
                  : 'tertiary'
              }
              size={
                isValidElement(child) && child.props.size
                  ? child.props.size
                  : size
              }
            >
              {child}
            </SmartClone>
          );
        }
        if (isChildSubcomponent(child, HorizontalMenu)) {
          return (
            <SmartClone
              size={
                isValidElement(child) && child.props.size
                  ? child.props.size
                  : size
              }
            >
              {child}
            </SmartClone>
          );
        }

        return child;
      })}
    </Box>
  );
}

ToolbarRightSlot.displayName = 'Toolbar.ToolbarRightSlot';
