import merge from 'ts-deepmerge';

import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getHeadingTextStyles, isError } from '../../utils/textStyleHelpers';
import { AppHeaderBarSize } from './shared';

export const outerContainerStaticStyles = {
  width: '100%',
  padding: 'base.spacing.x2',
};

export const baseInnerContainerStyles = {
  display: 'flex',
  justifyContent: 'flex-start',
  alignItems: 'center',
  borderRadius: 'base.borderRadius.x10',
  position: 'relative',
  gap: 'base.spacing.x6',
};

export function getOuterContainerStyles({ size }: { size: AppHeaderBarSize }) {
  switch (size) {
    case 'small':
      return {
        height: '80px',
      };

    case 'medium':
    default:
      return {
        height: '96px',
      };
  }
}

export function responsiveOuterContainerStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<AppHeaderBarSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getOuterContainerStyles({
            size: responsiveSize,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}

export function innerContainerStyles({
  size,
  themeProps,
}: {
  size: AppHeaderBarSize;
  themeProps: BiomeTheme;
}) {
  switch (size) {
    case 'small':
      return {
        padding: themeProps.base.spacing.x2,
        minHeight: '64px',
      };

    case 'medium':
    default:
      return {
        paddingX: themeProps.base.spacing.x6,
        paddingY: themeProps.base.spacing.x4,
        minHeight: '80px',
      };
  }
}

export function responsiveInnerContainerStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<AppHeaderBarSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: innerContainerStyles({
            themeProps,
            size: responsiveSize,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}

export function renderTitleStyles({
  size,
  theme,
}: {
  size: AppHeaderBarSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'small':
      return getHeadingTextStyles({
        themeProps: theme,
        size: 'xSmall',
        weight: 'bold',
      });

    case 'medium':
    default:
      return getHeadingTextStyles({
        themeProps: theme,
        size: 'medium',
        weight: 'bold',
      });
  }
}

export function renderResponsiveTitleStyles({
  theme,
  size,
}: {
  theme: BiomeTheme;
  size: MakeResponsive<AppHeaderBarSize>;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${theme.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: renderTitleStyles({
            size: responsiveSize,
            theme,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}

export function renderTitleLogoStyles({
  size,
  theme,
}: {
  size: AppHeaderBarSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'small':
      return { height: theme.base.spacing.x8 };

    case 'medium':
    default:
      return { height: theme.base.spacing.x12 };
  }
}

export function renderResponsiveTitleLogoStyles({
  theme,
  size,
}: {
  theme: BiomeTheme;
  size: MakeResponsive<AppHeaderBarSize>;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${theme.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: renderTitleLogoStyles({
            size: responsiveSize,
            theme,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}
