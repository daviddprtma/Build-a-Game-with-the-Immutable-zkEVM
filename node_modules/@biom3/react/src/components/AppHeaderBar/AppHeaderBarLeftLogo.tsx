import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import {
  GetHybridClickableRCandDomProps,
  isBaseClickable,
  isLogo,
} from '../../types/clickable';
import { MakeResponsive } from '../../types/shared';
import {
  setDefaultHeightSx,
  setDefaultWidthSx,
} from '../../utils/styleHelpers';
import { BaseClickable } from '../Clickable';
import { Logo, LogoProps } from '../Logo';
import { AppHeaderBarSize } from './shared';

export type AppHeaderBarLeftLogoProps<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
> = GetHybridClickableRCandDomProps<RC, OnClick> &
  Omit<LogoProps, 'domRef'> & {
    size?: MakeResponsive<AppHeaderBarSize>;
  };

export function AppHeaderBarLeftLogo<
  RC extends ReactElement | undefined = undefined,
  OnClick extends Function | undefined = undefined,
>({
  size,
  logo,
  sx = {},
  rc,
  ...otherProps
}: AppHeaderBarLeftLogoProps<RC, OnClick>) {
  const { onClick } =
    'onClick' in otherProps ? otherProps : { ...otherProps, onClick: null };
  const baseClickableProps = { onClick, rc, ...otherProps };
  const mergedSx = merge(
    setDefaultWidthSx(sx, 'auto'),
    setDefaultHeightSx(sx, 'base.icon.size.500'),
    { position: 'relative' },
    sx,
  );
  return isBaseClickable(onClick, rc, false, baseClickableProps) ? (
    <BaseClickable {...baseClickableProps}>
      <Logo logo={logo} sx={mergedSx} />
    </BaseClickable>
  ) : isLogo(onClick, rc, otherProps) ? (
    <Logo {...otherProps} logo={logo} sx={mergedSx} />
  ) : null;
}

AppHeaderBarLeftLogo.displayName = 'AppHeaderBar.LeftLogo';
