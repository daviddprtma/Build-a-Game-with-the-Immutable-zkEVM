import { ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useSplitApartChildrenAndSubComponents,
  useTheme,
} from '../../hooks';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { SmartClone } from '../SmartClone';
import { AppHeaderBarLeftButtCon } from './AppHeaderBarLeftButtCon';
import { AppHeaderBarLeftLogo } from './AppHeaderBarLeftLogo';
import { AppHeaderBarOverflowPopoverMenu } from './AppHeaderBarOverflowPopoverMenu';
import {
  AppHeaderBarLeftSlot,
  AppHeaderBarRightSlot,
} from './AppHeaderBarSlot';
import { AppHeaderBarTitle } from './AppHeaderBarTitle';
import { AppHeaderBarTitleLogo } from './AppHeaderBarTitleLogo';
import {
  APP_HEADER_BAR_SIZES,
  AppHeaderBarContentAlign,
  AppHeaderBarSize,
  AppHeaderBarVariant,
  DEFAULT_APP_HEADER_BAR_SIZE,
} from './shared';
import {
  baseInnerContainerStyles,
  getOuterContainerStyles,
  innerContainerStyles,
  outerContainerStaticStyles,
  responsiveInnerContainerStyles,
  responsiveOuterContainerStyles,
} from './styles';

export type AppHeaderBarProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<AppHeaderBarSize>;
    emphasized?: boolean;
    contentAlign?: AppHeaderBarContentAlign;
    variant?: AppHeaderBarVariant;
  };

export function AppHeaderBar<RC extends ReactElement | undefined = undefined>({
  sx = {},
  rc = <header />,
  variant = 'dim',
  size = DEFAULT_APP_HEADER_BAR_SIZE,
  children,
  emphasized,
  contentAlign = 'center',
  testId = 'AppHeaderBar',
  ...props
}: AppHeaderBarProps<RC>) {
  const themeProps = useTheme();
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    AppHeaderBarLeftButtCon,
    AppHeaderBarLeftLogo,
    AppHeaderBarTitle,
    AppHeaderBarTitleLogo,
    AppHeaderBarRightSlot,
    AppHeaderBarLeftSlot,
    AppHeaderBarOverflowPopoverMenu,
  ]);

  const leftButtCon = useGetSubcomponentChild(
    children,
    AppHeaderBarLeftButtCon,
  );
  const leftLogo = useGetSubcomponentChild(children, AppHeaderBarLeftLogo);
  const title = useGetSubcomponentChild(children, AppHeaderBarTitle);
  const titleLogo = useGetSubcomponentChild(children, AppHeaderBarTitleLogo);
  const rightSlot = useGetSubcomponentChild(children, AppHeaderBarRightSlot);
  const leftSlot = useGetSubcomponentChild(children, AppHeaderBarLeftSlot);
  const overflowPopoverMenu = useGetSubcomponentChild(
    children,
    AppHeaderBarOverflowPopoverMenu,
  );
  const startingSize = getStartingSize(
    size,
    DEFAULT_APP_HEADER_BAR_SIZE,
    APP_HEADER_BAR_SIZES,
  );
  const responsiveInnerContainerSx = responsiveInnerContainerStyles({
    themeProps,
    size,
  });
  const mergedOuterContainerStyles = useMemo(
    () =>
      merge(
        outerContainerStaticStyles,
        {
          bg:
            variant === 'dim'
              ? 'base.color.neutral.1000'
              : variant === 'transparent'
              ? 'transparent'
              : variant === 'bright'
              ? 'base.color.neutral.700'
              : 'base.color.neutral.1000',
        },
        getOuterContainerStyles({ size: startingSize }),
        responsiveOuterContainerStyles({ size, themeProps }),
        sx,
      ),
    [startingSize, sx, themeProps, variant, size],
  );
  const mergedInnerContainerStyles = merge(
    baseInnerContainerStyles,
    { ...(emphasized ? { bg: 'base.color.neutral.800' } : {}) },
    innerContainerStyles({ themeProps, size: startingSize }),
    responsiveInnerContainerSx,
  );

  return (
    <Box {...props} rc={rc} sx={mergedOuterContainerStyles} testId={testId}>
      <Box sx={mergedInnerContainerStyles} testId={`${testId}__innerContainer`}>
        {titleLogo ? (
          <SmartClone
            testId={`${testId}__innerContainer__titleLogo`}
            size={size}
            contentAlign={contentAlign}
          >
            {titleLogo}
          </SmartClone>
        ) : title ? (
          <SmartClone
            testId={`${testId}__innerContainer__title`}
            contentAlign={contentAlign}
            size={size}
          >
            {title}
          </SmartClone>
        ) : null}

        {leftButtCon ? (
          <SmartClone
            testId={`${testId}__innerContainer__leftButtCon`}
            size={size}
          >
            {leftButtCon}
          </SmartClone>
        ) : null}

        {leftLogo ? (
          <SmartClone
            testId={`${testId}__innerContainer__leftLogo`}
            size={size}
          >
            {leftLogo}
          </SmartClone>
        ) : null}

        {leftSlot && (
          <SmartClone
            testId={
              leftSlot.props.testId ?? `${testId}__innerContainer__leftSlot`
            }
          >
            {leftSlot}
          </SmartClone>
        )}

        <Box
          sx={{
            d: 'flex',
            gap: 'base.spacing.x6',
            alignItems: 'center',
            ml: 'auto',
          }}
          testId={`${testId}__innerContainer__rightSide`}
        >
          {rightSlot && (
            <SmartClone
              testId={
                rightSlot.props.testId ??
                `${testId}__innerContainer__rightSide__slotContent`
              }
            >
              {rightSlot}
            </SmartClone>
          )}

          {overflowPopoverMenu ? (
            <SmartClone
              testId={`${testId}__innerContainer__rightSide__overflowPopoverMenu`}
              size={size}
            >
              {overflowPopoverMenu}
            </SmartClone>
          ) : null}
        </Box>

        {otherChildren}
      </Box>
    </Box>
  );
}

AppHeaderBar.displayName = 'AppHeaderBar';
AppHeaderBar.LeftButtCon = AppHeaderBarLeftButtCon;
AppHeaderBar.LeftLogo = AppHeaderBarLeftLogo;
AppHeaderBar.Title = AppHeaderBarTitle;
AppHeaderBar.TitleLogo = AppHeaderBarTitleLogo;
AppHeaderBar.RightSlot = AppHeaderBarRightSlot;
AppHeaderBar.LeftSlot = AppHeaderBarLeftSlot;
AppHeaderBar.OverflowPopoverMenu = AppHeaderBarOverflowPopoverMenu;
