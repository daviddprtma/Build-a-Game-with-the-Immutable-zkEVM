import { Children, ReactElement } from 'react';

import { MakeResponsive } from '../../types/shared';
import { isChildSubcomponent } from '../../utils/subcomponentHelpers';
import { ButtCon, Button, Link } from '../Clickable';
import { ExpandableMenuItem } from '../ExpandableMenuItem';
import { InputBar } from '../InputBar';
import { MenuItem } from '../MenuItem';
import { SmartClone } from '../SmartClone';
import { Stack, StackProps } from '../Stack';
import { AppHeaderBarSize, DEFAULT_APP_HEADER_BAR_SIZE } from './shared';

type AppHeaderBarSlotProps<RC extends ReactElement | undefined = undefined> =
  StackProps<RC> & {
    size?: MakeResponsive<AppHeaderBarSize>;
  };

function AppHeaderBarSlot<RC extends ReactElement | undefined = undefined>({
  size = DEFAULT_APP_HEADER_BAR_SIZE,
  children,
  sx = {},
  direction = 'row',
  gap = 'base.spacing.x2',
  alignItems = 'center',
  ...props
}: AppHeaderBarSlotProps<RC>) {
  return (
    <Stack
      {...props}
      direction={direction}
      gap={gap}
      alignItems={alignItems}
      sx={sx}
    >
      {Children.map(children, child => {
        if (
          isChildSubcomponent(child, Button) ||
          isChildSubcomponent(child, ButtCon)
        ) {
          // @NOTE: render Button & ButtCon children,
          // with some special extra props
          return (
            <SmartClone
              variant={child.props.variant ?? 'tertiary'}
              size={child.props.size ?? size}
            >
              {child}
            </SmartClone>
          );
        }

        // @NOTE: render MenuItem, ExpandableMenuItem & InputBar children,
        // with some special extra props
        if (
          isChildSubcomponent(child, MenuItem) ||
          isChildSubcomponent(child, ExpandableMenuItem) ||
          isChildSubcomponent(child, InputBar)
        ) {
          return (
            <SmartClone
              size={child.props.size ?? 'xSmall'}
              emphasized={child.props.emphasized ?? true}
            >
              {child}
            </SmartClone>
          );
        }

        // @NOTE: render Link children, with some special extra props
        if (isChildSubcomponent(child, Link)) {
          return (
            <SmartClone variant={child.props.variant ?? 'secondary'}>
              {child}
            </SmartClone>
          );
        }

        // @NOTE: Otherwise just render whatever the user has
        // passed in, with no extra props
        return child;
      })}
    </Stack>
  );
}

export function AppHeaderBarLeftSlot<
  RC extends ReactElement | undefined = undefined,
>(props: AppHeaderBarSlotProps<RC>) {
  return <AppHeaderBarSlot {...props} />;
}

export function AppHeaderBarRightSlot<
  RC extends ReactElement | undefined = undefined,
>(props: AppHeaderBarSlotProps<RC>) {
  return <AppHeaderBarSlot {...props} />;
}

AppHeaderBarLeftSlot.displayName = 'AppHeaderBar.LeftSlot';
AppHeaderBarRightSlot.displayName = 'AppHeaderBar.RightSlot';
