import { ReactElement, Ref } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import {
  GetHybridClickableRCandDomProps,
  isBaseClickable,
} from '../../types/clickable';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { BaseClickable } from '../Clickable';
import { Logo, LogoProps } from '../Logo';
import { SmartClone } from '../SmartClone';
import {
  APP_HEADER_BAR_SIZES,
  AppHeaderBarContentAlign,
  AppHeaderBarSize,
  DEFAULT_APP_HEADER_BAR_SIZE,
} from './shared';
import {
  renderResponsiveTitleLogoStyles,
  renderTitleLogoStyles,
} from './styles';

export type AppHeaderBarTitleLogoProps<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
> = GetHybridClickableRCandDomProps<RC, OnClick, 'svg'> &
  Omit<LogoProps, 'domRef'> & {
    size?: MakeResponsive<AppHeaderBarSize>;
    contentAlign?: AppHeaderBarContentAlign;
  };

export function AppHeaderBarTitleLogo<
  RC extends ReactElement | undefined = undefined,
  OnClick extends Function | undefined = undefined,
>({
  size = DEFAULT_APP_HEADER_BAR_SIZE,
  logo,
  sx = {},
  contentAlign,
  rc,
  testId,
  domRef,
  ...props
}: AppHeaderBarTitleLogoProps<RC, OnClick>) {
  const { onClick, ...otherLogoProps } =
    'onClick' in props ? props : { onClick: null };
  const baseClickableProps = { onClick, rc, domRef, ...otherLogoProps };
  const themeProps = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_APP_HEADER_BAR_SIZE,
    APP_HEADER_BAR_SIZES,
  );
  const responsiveTitleLogoStyles = renderResponsiveTitleLogoStyles({
    theme: themeProps,
    size,
  });
  const titleLogoStyles = merge(
    contentAlign === 'left'
      ? {
          pl: 'base.spacing.x1',
          width: 'auto',
          marginRight: 'auto',
        }
      : {
          position: 'absolute',
          left: 0,
          width: '100%',
          textAlign: 'center',
        },
    renderTitleLogoStyles({ theme: themeProps, size: startingSize }),
    responsiveTitleLogoStyles,
    sx,
  );
  const logoChildren = (
    <Logo {...otherLogoProps} logo={logo} sx={titleLogoStyles} />
  );
  return isBaseClickable(onClick, rc, false, baseClickableProps) ? (
    <BaseClickable {...baseClickableProps} sx={titleLogoStyles} testId={testId}>
      {logoChildren}
    </BaseClickable>
  ) : (
    <SmartClone
      sx={titleLogoStyles}
      testId={testId}
      domRef={domRef as Ref<HTMLElement>}
    >
      {logoChildren}
    </SmartClone>
  );
}

AppHeaderBarTitleLogo.displayName = 'AppHeaderBar.TitleLogo';
