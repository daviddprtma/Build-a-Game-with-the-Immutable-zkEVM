import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { ButtCon, Button } from '../Clickable';
import { MenuItem } from '../MenuItem';
import { Popover } from '../Popover';
import { Body } from '../Text';
import { AppHeaderBar } from './AppHeaderBar';

describe('<AppHeaderBar />', () => {
  it('should have correct displayName', () => {
    expect(AppHeaderBar.displayName).to.eq('AppHeaderBar');
  });

  it('should render as a <header> by default, or as anything the user specifies', () => {
    cyMountWithProviders(
      <AppHeaderBar testId="moo">
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'HEADER');

    cyMountWithProviders(
      <AppHeaderBar testId="moo" rc={<section />}>
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(
      <AppHeaderBar testId="moo" domRef={ref}>
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'HEADER',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(
      <AppHeaderBar testId="moo" sx={{ bg: 'gold' }}>
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should allow the rendering of any content whether it is a sub-component, or not', () => {
    cyMountWithProviders(
      <AppHeaderBar sx={{ bg: 'gold' }}>
        <Button testId="button">button will show</Button>
        <div data-testid="hidden">something that also will show</div>
        <>oh snap!</>
        <AppHeaderBar.Title testId="moo">some title text</AppHeaderBar.Title>
      </AppHeaderBar>,
    );

    cySmartGet('moo').should('exist');
    cySmartGet('hidden').should('exist');
    cy.contains('oh snap!').should('exist');
    cySmartGet('button').should('exist');
  });

  it('should render an inner background color, when "emphasized"', () => {
    cyMountWithProviders(
      <AppHeaderBar testId="moo" emphasized>
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo__innerContainer').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.neutral.800'),
    );
  });

  it('should not render an inner background color by default, and when neccissary', () => {
    cyMountWithProviders(
      <AppHeaderBar testId="moo">
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo__innerContainer').should(
      'have.css',
      'background-color',
      'rgba(0, 0, 0, 0)',
    );

    cyMountWithProviders(
      <AppHeaderBar testId="moo" emphasized={false}>
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo__innerContainer').should(
      'have.css',
      'background-color',
      'rgba(0, 0, 0, 0)',
    );
  });

  it('should pass through properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <AppHeaderBar testId="moo" aria-atomic="true" data-moo="cow">
        <></>
      </AppHeaderBar>,
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should render rightSlot on the right, including when contentAlign is "left"', () => {
    cyMountWithProviders(
      <AppHeaderBar contentAlign="left">
        <AppHeaderBar.Title>Mooo</AppHeaderBar.Title>
        <AppHeaderBar.RightSlot testId="right">
          <ButtCon icon="AirDrop" />
        </AppHeaderBar.RightSlot>
      </AppHeaderBar>,
    );
    cySmartGet('right').then($el => {
      const { left } = $el[0].getBoundingClientRect();
      expect(left).to.be.greaterThan(400);
    });

    cyMountWithProviders(
      <AppHeaderBar contentAlign="center">
        <AppHeaderBar.Title>Mooo</AppHeaderBar.Title>
        <AppHeaderBar.RightSlot testId="right">
          <ButtCon icon="AirDrop" />
        </AppHeaderBar.RightSlot>
      </AppHeaderBar>,
    );
    cySmartGet('right').then($el => {
      const { left } = $el[0].getBoundingClientRect();
      expect(left).to.be.greaterThan(400);
    });
  });

  context('variants', () => {
    it('should color using "dim" variant by default', () => {
      cyMountWithProviders(
        <AppHeaderBar testId="moo">
          <AppHeaderBar.LeftButtCon icon="ArrowBackward" />
        </AppHeaderBar>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.1000'),
      );
    });
    it('should correctly color the "bright" variant', () => {
      cyMountWithProviders(
        <AppHeaderBar variant="bright" testId="moo">
          <AppHeaderBar.LeftButtCon icon="ArrowBackward" />
        </AppHeaderBar>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.700'),
      );
    });
    it('should correctly color the "transparent" variant', () => {
      cyMountWithProviders(
        <AppHeaderBar variant="transparent" testId="moo">
          <AppHeaderBar.LeftButtCon icon="ArrowBackward" />
        </AppHeaderBar>,
      );
      cySmartGet('moo').should('have.backgroundColor', 'transparent');
    });
  });

  context('Subcomponents', () => {
    it('should correctly render the <AppHeaderBar.LeftButtCon /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.LeftButtCon testId="moo" icon="ArrowBackward" />
        </AppHeaderBar>,
      );
      cySmartGet('moo')
        .should('have.css', 'width', '48px')
        .and('css', 'height', '48px');
    });

    it('should correctly render the <AppHeaderBar.LeftLogo /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.LeftLogo testId="moo" logo="PassportSymbol" />
        </AppHeaderBar>,
      );
      cySmartGet('moo')
        .should('have.css', 'width', '48px')
        .and('css', 'height', '48px');
    });

    it('should allow the <AppHeaderBar.LeftLogo /> subcomponent to be clickable', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.LeftLogo
            testId="moo"
            logo="PassportSymbol"
            rc={<a href="/moo" />}
          />
        </AppHeaderBar>,
      );

      cySmartGet('moo').its('0.nodeName').should('eq', 'A');
      cySmartGet('moo').should('have.attr', 'href', '/moo');
    });

    it('should correctly render the <AppHeaderBar.Title /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.Title testId="moo">Some title text</AppHeaderBar.Title>
        </AppHeaderBar>,
      );
      cySmartGet('moo').should(
        'have.css',
        'font-family',
        'Suisse-Intl, sans-serif',
      );
      cySmartGet('moo').should('include.text', 'Some title text');
    });

    it('should allow the use of tooltips with subcomponents inside', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <Popover>
            <Popover.Target>
              <AppHeaderBar.Title testId="moo">
                Some title text
              </AppHeaderBar.Title>
            </Popover.Target>
            <Popover.Content>
              <Body testId="popoverContent">Popover content</Body>
            </Popover.Content>
          </Popover>
        </AppHeaderBar>,
        { useAllProviders: true },
      );

      cySmartGet('popoverContent').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('popoverContent').should('exist');
    });

    it('should allow the <AppHeaderBar.Title /> subcomponent to be clickable', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.Title testId="moo" rc={<a href="/moo" />}>
            Some title text
          </AppHeaderBar.Title>
        </AppHeaderBar>,
      );

      cySmartGet('moo').its('0.nodeName').should('eq', 'A');
      cySmartGet('moo').should('have.attr', 'href', '/moo');
    });

    it('should allow the <AppHeaderBar.TitleLogo /> subcomponent to be clickable', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.TitleLogo
            testId="moo"
            onClick={onClickStub}
            logo="DocsHorizontalLockup"
          />
        </AppHeaderBar>,
      );

      cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
      cySmartGet('@onClickStub').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@onClickStub').should('have.been.calledOnce');
    });

    it('should apply ellipsis to <AppHeaderBar.Title />, by default', () => {
      cyMountWithProviders(
        <AppHeaderBar contentAlign="left">
          <AppHeaderBar.LeftButtCon icon="AirDrop" />
          <AppHeaderBar.Title testId="moo">
            Some title text kjh daskjasdj hdaskj hdakjh adskjdas jkasdkjh daskh
          </AppHeaderBar.Title>
        </AppHeaderBar>,
      );

      cySmartGet('moo').should('have.css', 'height', '32px');
    });

    it('should correctly render the <AppHeaderBar.TitleLogo /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.TitleLogo
            testId="moo"
            logo="PassportHorizontalLockupCompact"
          />
        </AppHeaderBar>,
      );
      cySmartGet('moo').and('css', 'height', '48px');
    });

    it('should correctly size the <AppHeaderBar.TitleLogo /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar size="small">
          <AppHeaderBar.TitleLogo
            testId="moo"
            logo="PassportHorizontalLockupCompact"
          />
        </AppHeaderBar>,
      );
      cySmartGet('moo').and('css', 'height', '32px');
    });

    it('should correctly render the <AppHeaderBar.RightHandButtons /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar testId="moo">
          <AppHeaderBar.RightSlot>
            <ButtCon icon="Add" testId="buttcon" />
            <ButtCon icon="AirDrop" testId="buttcon" />
            <div data-testid="somethingElse">
              somethig which will also get rendered
            </div>
          </AppHeaderBar.RightSlot>
        </AppHeaderBar>,
      );
      cySmartGet('buttcon').should('have.length', 2);
      cySmartGet('somethingElse').should('exist');
    });

    it('should correctly render the <AppHeaderBar.OverflowPopoverMenu /> subcomponent', () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.OverflowPopoverMenu testId="moo" data-moo="cow">
            <MenuItem>
              <MenuItem.Label>moo</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>cow</MenuItem.Label>
            </MenuItem>
          </AppHeaderBar.OverflowPopoverMenu>
        </AppHeaderBar>,
        { useAllProviders: true },
      );
      cySmartGet('moo__overflowPopoverMenu').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('moo__overflowPopoverMenu').should('exist');
      cySmartGet('moo__overflowPopoverMenu')
        .children()
        .should('have.length', 2);
      cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
    });

    it(`should pass through a button html attr prop, onto the buttcon inside AppHeaderBar.OverflowPopoverMenu`, () => {
      cyMountWithProviders(
        <AppHeaderBar>
          <AppHeaderBar.OverflowPopoverMenu testId="moo" disabled>
            <MenuItem>
              <MenuItem.Label>moo</MenuItem.Label>
            </MenuItem>
          </AppHeaderBar.OverflowPopoverMenu>
        </AppHeaderBar>,
        { useAllProviders: true },
      );

      cySmartGet('moo').should('have.attr', 'disabled');
    });

    context('All subcomponents', () => {
      it('should accept sx style input', () => {
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.LeftButtCon
              testId="leftButtcon"
              icon="ArrowBackward"
              sx={{ bg: 'gold' }}
            />
            <AppHeaderBar.Title testId="title" sx={{ bg: 'gold' }}>
              Some title text
            </AppHeaderBar.Title>
            <AppHeaderBar.OverflowPopoverMenu
              testId="vertMenu"
              sx={{ bg: 'gold' }}
            >
              <MenuItem sx={{ bg: 'gold' }} testId="vertMenu__menuItem">
                <MenuItem.Label>moo</MenuItem.Label>
              </MenuItem>
            </AppHeaderBar.OverflowPopoverMenu>
          </AppHeaderBar>,
          { useAllProviders: true },
        );
        cySmartGet('leftButtcon').should('have.backgroundColor', 'gold');
        cySmartGet('title').should('have.backgroundColor', 'gold');
        cySmartGet('vertMenu').should('have.backgroundColor', 'gold');
        cySmartGet('vertMenu').click();
        cySmartGet('vertMenu__menuItem').should('have.backgroundColor', 'gold');

        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.LeftLogo
              testId="leftLogo"
              logo="GameStopSymbol"
              sx={{ bg: 'gold' }}
            />
            <AppHeaderBar.TitleLogo
              testId="title"
              logo="ImmutableHorizontalLockup"
              sx={{ bg: 'gold' }}
            />
          </AppHeaderBar>,
          { useAllProviders: true },
        );
        cySmartGet('leftLogo').should('have.backgroundColor', 'gold');
        cySmartGet('title').should('have.backgroundColor', 'gold');

        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.RightSlot sx={{ bg: 'gold' }} testId="right" />
            <AppHeaderBar.LeftSlot sx={{ bg: 'gold' }} testId="left" />
          </AppHeaderBar>,
          { useAllProviders: true },
        );
        cySmartGet('right').should('have.backgroundColor', 'gold');
        cySmartGet('left').should('have.backgroundColor', 'gold');
      });

      it('should correctly forward domRef props', () => {
        const leftButtconRef = cy.stub().as('leftButtconRef');
        cySmartGet('@leftButtconRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.LeftButtCon
              domRef={leftButtconRef}
              icon="ArrowBackward"
            />
          </AppHeaderBar>,
        );
        cySmartGet('@leftButtconRef').should('have.been.calledOnce');

        const titleRef = cy.stub().as('titleRef');
        cySmartGet('@titleRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.Title domRef={titleRef}>
              Some title text
            </AppHeaderBar.Title>
          </AppHeaderBar>,
        );
        cySmartGet('@titleRef').should('have.been.calledOnce');

        const vertMenuRef = cy.stub().as('vertMenuRef');
        cySmartGet('@vertMenuRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.OverflowPopoverMenu domRef={vertMenuRef}>
              <MenuItem>
                <MenuItem.Label>moo</MenuItem.Label>
              </MenuItem>
            </AppHeaderBar.OverflowPopoverMenu>
          </AppHeaderBar>,
          { useAllProviders: true },
        );
        cySmartGet('@vertMenuRef').should('have.been.calledOnce');

        const leftLogoRef = cy.stub().as('leftLogoRef');
        cySmartGet('@leftLogoRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.LeftLogo domRef={leftLogoRef} logo="GameStopSymbol" />
          </AppHeaderBar>,
        );
        cySmartGet('@leftLogoRef').should('have.been.calledOnce');

        const titleLogoRef = cy.stub().as('titleLogoRef');
        cySmartGet('@titleLogoRef').should('not.have.been.calledOnce');
        cyMountWithProviders(
          <AppHeaderBar>
            <AppHeaderBar.TitleLogo
              domRef={titleLogoRef}
              logo="ImmutableHorizontalLockup"
            />
          </AppHeaderBar>,
        );
        cySmartGet('@titleLogoRef').should('have.been.calledOnce');
      });
    });
  });
});
