import { Properties } from 'csstype';

import { InputTextAlign, InputValidationStatus } from '../../types/input';
import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getResponsiveSx, RenderSxProps } from '../../utils/styleHelpers';
import { INPUT_MIN_WIDTH } from '../TextInput/shared';
import { TextAreaSize } from './shared';

export const containerBaseSx = {
  position: 'relative',
  minWidth: INPUT_MIN_WIDTH,
  flexShrink: 0,
  borderRadius: 'base.borderRadius.x4',
  transitionProperty: 'box-shadow, background',
  transitionDuration: 'base.motion.normal.fast.cssDuration',
  transitionTimingFunction: 'base.motion.normal.fast.cssEase',

  '&:not(.disabled):hover': {
    boxShadow: 'base.shadow.200',
  },
};

export const baseTextAreaSx = {
  appearance: 'none',
  width: '100%',
  minWidth: '100%',
  maxWidth: '100%',
  border: 'none',
  borderRadius: 'base.borderRadius.x4',
  fontFamily: 'base.font.family.body.primary',
  fontSize: 'base.text.body.medium.regular.fontSize',
  lineHeight: 'base.text.body.medium.regular.lineHeight',
  fontWeight: 'base.text.body.medium.regular.fontWeight',
  background: 'transparent',
  padding: '0',
  color: 'base.color.text.primary',

  '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {
    // @NOTE: this hides the up and down arrows on number inputs
    display: 'none',
  },

  '&::placeholder': {
    color: 'base.color.text.secondary',
  },

  '&:not(:disabled):focus': {
    outline: 'none',
  },
};

export function getTextAreaSx({
  textAlign,
}: {
  size: TextAreaSize;
  theme: BiomeTheme;
  textAlign: InputTextAlign;
}) {
  return {
    textAlign,
  };
}

export const getResponsiveTextAreaSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<TextAreaSize>;
  textAlign: InputTextAlign;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getTextAreaSx as (
      props: RenderSxProps<TextAreaSize>,
    ) => Properties,
  });

export const clearValueButtonSx = {
  padding: '0',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  position: 'absolute',
  right: 'base.spacing.x3',
};

export function getContainerSx({
  validationStatus,
  theme,
  hasValue,
  size,
}: {
  validationStatus: InputValidationStatus | undefined;
  theme: BiomeTheme;
  size: TextAreaSize;
  hasValue: boolean;
}) {
  const gutter = theme.base.spacing.x3;
  const paddingY =
    size === 'large' ? theme.base.spacing.x5 : theme.base.spacing.x3;
  const paddingLeft = gutter;
  const paddingRight = `calc(${gutter} + (${gutter} * 2))`;
  const hoverShadow = theme.base.shadow[200];
  const emptyShadow = '0 0 0 rgba(0,0,0,0)';

  return {
    paddingY,
    paddingLeft,
    paddingRight,

    background: hasValue
      ? theme.base.color.translucent.emphasis[300]
      : theme.base.color.translucent.emphasis[100],

    boxShadow:
      validationStatus === 'error'
        ? `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.status.fatal.bright}`
        : hasValue
        ? `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[500]}`
        : `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[300]}`,

    '&:not(.disabled):hover': {
      background: hasValue
        ? theme.base.color.translucent.emphasis[300]
        : theme.base.color.translucent.emphasis[200],
      boxShadow:
        validationStatus === 'error'
          ? `${hoverShadow}, inset 0 0 0 1px ${theme.base.color.status.fatal.bright}`
          : `${hoverShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[600]}`,
    },

    '&:not(.disabled).focused': {
      outline: 'none',
      background: theme.base.color.translucent.emphasis[300],
      boxShadow:
        validationStatus === 'error'
          ? `${hoverShadow}, inset 0 0 0 2px ${theme.base.color.status.fatal.bright}`
          : `${hoverShadow}, inset 0 0 0 2px ${theme.base.color.brand[1]}`,
    },
  };
}

export const getResponsiveContainerSx = (props: {
  size: MakeResponsive<TextAreaSize>;
  validationStatus: InputValidationStatus | undefined;
  theme: BiomeTheme;
  hasValue: boolean;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getContainerSx as unknown as (
      props: RenderSxProps<TextAreaSize>,
    ) => Properties,
  });

export function getClearValueButtonSx({
  size,
  theme,
}: {
  size: TextAreaSize;
  theme: BiomeTheme;
}) {
  return {
    top: size === 'large' ? theme.base.spacing.x6 : theme.base.spacing.x4,
  };
}

export const getResponsiveClearValueButtonSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<TextAreaSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getClearValueButtonSx,
  });
