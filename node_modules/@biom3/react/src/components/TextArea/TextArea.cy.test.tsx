import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import { hexToRgbString } from '../../utils/colorHelpers';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { TextArea } from './TextArea';

function TextAreaWithInternalState() {
  const [currentValue, setCurrentValue] = useState('');

  return (
    <TextArea
      testId="moo"
      value={currentValue}
      onChange={ev => setCurrentValue(ev.target.value)}
    />
  );
}

describe('<TextArea />', () => {
  it('should render a plain text input by default', () => {
    cyMountWithProviders(<TextArea testId="moo" />);
    cyGetByTestId('moo').find('textarea').should('exist');
  });

  it('should render as a DIV by default, but as something else when neccissary', () => {
    cyMountWithProviders(
      <>
        <TextArea testId="default" placeholder="text" />
        <TextArea testId="section" placeholder="text" rc={<section />} />
      </>,
    );
    cySmartGet('default').its('0.nodeName').should('eq', 'DIV');
    cySmartGet('section').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should render an input with placeholder text, when necessary', () => {
    cyMountWithProviders(<TextArea testId="moo" placeholder="text" />);
    cySmartGet('moo__textarea').should('have.attr', 'placeholder', 'text');
  });

  it(`should allow the parent component to track when the user focuses an input`, () => {
    const onFocus = cy.stub().as('onFocusStub');
    cyMountWithProviders(<TextArea testId="moo" onFocus={onFocus} />);
    cySmartGet('@onFocusStub').should('not.have.been.called');
    cySmartGet('moo__textarea').click();
    cySmartGet('@onFocusStub').should('have.been.calledWithMatch', {
      type: 'focus',
    });
  });

  it(`should allow the parent component to track when the user blurs an input`, () => {
    const onBlur = cy.stub().as('onBlurStub');
    cyMountWithProviders(<TextArea testId="moo" onBlur={onBlur} />);
    cySmartGet('@onBlurStub').should('not.have.been.called');
    cySmartGet('moo__textarea').click();
    cy.get('body').click();
    cySmartGet('@onBlurStub').should('have.been.calledWithMatch', {
      type: 'blur',
    });
  });

  it('should render ui in an error state, where necessary', () => {
    cyMountWithProviders(<TextArea testId="moo" validationStatus="error" />);
    cySmartGet('moo').should(
      'have.css',
      'box-shadow',
      `rgba(0, 0, 0, 0) 0px 0px 0px 0px, ${hexToRgbString(
        smartPickTokenValue(designTokens, 'base.color.status.fatal.bright'),
      )} 0px 0px 0px 1px inset`,
    );
  });

  it('should visually indicate when the user focuses on an input', () => {
    cyMountWithProviders(<TextArea testId="moo" />);
    cySmartGet('moo__textarea').click();
    cySmartGet('moo')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(designTokens, 'base.color.brand.1'),
        )} 0px 0px 0px 2px inset`,
      );
  });

  it('should visually indicate when an input has a value', () => {
    cyMountWithProviders(<TextArea testId="moo" />);
    cySmartGet('moo')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.300',
          ),
        )} 0px 0px 0px 1px inset`,
      );
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );

    cySmartGet('moo__textarea').type('123').blur();

    cySmartGet('moo')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.500',
          ),
        )} 0px 0px 0px 1px inset`,
      );
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
  });

  it('should show the clear input button by default, when there is a value to be cleared', () => {
    cyMountWithProviders(<TextArea testId="moo" />);
    cySmartGet('moo__clearValueButton').should('not.exist');
    cySmartGet('moo__textarea').type('123');
    cySmartGet('moo__clearValueButton').should('be.visible');
  });

  it(`should correctly clear the input's value, when clicking the little (x) button`, () => {
    const onChange = cy.stub().as('onChangeStub');
    cyMountWithProviders(<TextArea testId="moo" onChange={onChange} />);
    cySmartGet('moo__textarea').type('123');
    cySmartGet('moo').realHover();
    cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
      type: 'change',
      target: Cypress.sinon.match({
        value: '123',
      }),
    });
    cySmartGet('moo__clearValueButton').click();
    cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
      type: 'change',
      target: Cypress.sinon.match({
        value: '',
      }),
    });
    cySmartGet('moo__textarea').its('0.value').should('be.empty');
  });

  it('should allow parent component to add custom styles to the TextArea', () => {
    cyMountWithProviders(<TextArea testId="moo" sx={{ m: '10px' }} />);
    cyGetByTestId('moo').should('have.css', 'margin', '10px');
  });

  it('should hide the clear value button, when neccissary', () => {
    cyMountWithProviders(
      <TextArea testId="moo" value="some value" hideClearValueButton />,
    );
    cyGetByTestId('moo__clearValueButton').should('not.exist');
  });

  it('should pass through a name attr prop, when neccissary', () => {
    cyMountWithProviders(<TextArea testId="moo" name="moo" />);
    cyGetByTestId('moo__textarea').should('have.attr', 'name', 'moo');
  });

  it('should correctly forward domRef and textAreaRef props', () => {
    const domRef = cy.stub().as('domRefStub');
    const textAreaRef = cy.stub().as('textAreaRefStub');
    cyMountWithProviders(
      <TextArea testId="moo" domRef={domRef} textAreaRef={textAreaRef} />,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
    cySmartGet('@textAreaRefStub').should('have.been.calledWithMatch', {
      nodeName: 'TEXTAREA',
    });
  });

  it('should not render hover fx, or allow internal buttons to be clicked, when the input is disabled', () => {
    const onClearValue = cy.stub().as('onClearValueStub');
    cyMountWithProviders(
      <TextArea
        testId="moo"
        defaultValue="moo"
        disabled
        onClearValue={onClearValue}
      />,
    );

    cyGetByTestId('moo__textarea').should('be.disabled');
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
    cySmartGet('moo').realHover();
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
    cySmartGet('moo__clearValueButton').click({
      force: true,
    });
    cySmartGet('@onClearValueStub').should('not.have.been.called');
  });

  context('Text align support', () => {
    it('should left align by default', () => {
      cyMountWithProviders(<TextArea testId="moo" />);
      cySmartGet('moo__textarea').should('have.css', 'text-align', 'left');
    });
    it('should align to the right, when neccissary', () => {
      cyMountWithProviders(<TextArea testId="moo" textAlign="right" />);
      cySmartGet('moo__textarea').should('have.css', 'text-align', 'right');
    });
  });

  context('Size support', () => {
    it('should render at "medium" size by default', () => {
      cy.viewport(300, 200);
      cyMountWithProviders(<TextArea testId="moo" />);
      cySmartGet('moo__textarea').should('have.css', 'width', '252px');
      cySmartGet('moo')
        .should('have.css', 'padding-top', '12px')
        .and('have.css', 'padding-bottom', '12px');
    });

    it('should render at "large" size, when neccissary', () => {
      cy.viewport(300, 200);
      cyMountWithProviders(<TextArea testId="moo" sizeVariant="large" />);
      cySmartGet('moo__textarea').should('have.css', 'width', '252px');
      cySmartGet('moo')
        .should('have.css', 'padding-top', '20px')
        .and('have.css', 'padding-bottom', '20px');
    });

    it('should allow responsive sizing', () => {
      cy.viewport(200, 200);
      cyMountWithProviders(
        <TextArea testId="moo" sizeVariant={['medium', null, 'large']} />,
      );
      cySmartGet('moo__textarea').should('have.css', 'width', '168px');
      cySmartGet('moo')
        .should('have.css', 'padding-top', '12px')
        .and('have.css', 'padding-bottom', '12px');

      cy.viewport(designTokens.base.breakpoint.medium, 200);
      cySmartGet('moo__textarea').should('have.css', 'width', '720px');
      cySmartGet('moo')
        .should('have.css', 'padding-top', '20px')
        .and('have.css', 'padding-bottom', '20px');
    });
  });

  context('Uncontrolled API', () => {
    it('should allow the input to be initialised with a value, but still be un-controlled', () => {
      cyMountWithProviders(<TextArea testId="moo" defaultValue="moo cow" />);
      cySmartGet('moo__textarea').its('0.value').should('eq', 'moo cow');
    });

    it(`should allow the parent component to track when an input's value changes`, () => {
      const onChange = cy.stub().as('onChangeStub');
      cyMountWithProviders(<TextArea testId="moo" onChange={onChange} />);
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__textarea').type('123');
      cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
        type: 'change',
        target: Cypress.sinon.match({
          value: '123',
        }),
      });
    });

    it(`should clear input's value, when the user clicks the clear value button`, () => {
      const onChange = cy
        .stub()
        .as('onChangeStub')
        .callsFake(e => {
          console.log('onChangeStub', e);
        });
      cyMountWithProviders(<TextArea testId="moo" onChange={onChange} />);
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__textarea').type('123');
      cySmartGet('moo__clearValueButton').click();
      cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
        type: 'change',
        target: Cypress.sinon.match({
          value: '',
        }),
      });
    });

    it('should allow the onClearValue prop to be called, even when the input is uncontrolled', () => {
      const onClearValue = cy.stub().as('onClearValueStub');
      cyMountWithProviders(
        <TextArea
          testId="moo"
          defaultValue="Moo"
          onClearValue={onClearValue}
        />,
      );
      cySmartGet('@onClearValueStub').should('not.have.been.calledOnce');
      cySmartGet('moo__clearValueButton').click();
      cySmartGet('@onClearValueStub').should('have.been.calledOnce');
    });
  });

  context('Controlled API', () => {
    it('should not update the input text, when the user types something in, but the input is controlled and not wired up correctly', () => {
      cyMountWithProviders(
        <TextArea testId="moo" value="some value" onChange={() => {}} />,
      );
      cySmartGet('moo__textarea').type('123');
      cySmartGet('moo__textarea').its('0.value').should('eq', 'some value');
    });

    it('should correctly update, when the parent component updates the value prop', () => {
      cyMountWithProviders(<TextAreaWithInternalState />);
      cySmartGet('moo__textarea').type('123');
      cySmartGet('moo__textarea').its('0.value').should('eq', '123');
    });

    it('should call onClearValue, when the input is controlled', () => {
      const onClearValue = cy.stub().as('onClearValueStub');
      cyMountWithProviders(
        <TextArea
          testId="moo"
          value="some value"
          onClearValue={onClearValue}
        />,
      );
      cySmartGet('@onClearValueStub').should('not.have.been.calledOnce');
      cySmartGet('moo__clearValueButton').click();
      cySmartGet('@onClearValueStub').should('have.been.calledOnce');
    });
  });
});
