import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import { BiomeCombinedProviders } from '../../providers';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { Modal } from './Modal';

function ControlledModal({ onCloseStub }: any) {
  const [visible, setVisible] = useState(false);
  return (
    <Modal visible={visible} onCloseModal={onCloseStub} testId="moo">
      <Modal.Target testId="button">
        <button type="button" onClick={() => setVisible(!visible)}>
          open
        </button>
      </Modal.Target>
      <Modal.Content testId="content">hello</Modal.Content>
    </Modal>
  );
}

function UncontrolledModal({ onCloseStub }: any) {
  return (
    <Modal onCloseModal={onCloseStub} testId="moo">
      <Modal.Target testId="button">
        <button type="button">open</button>
      </Modal.Target>
      <Modal.Content testId="content">hello</Modal.Content>
    </Modal>
  );
}

describe('<Modal />', () => {
  it('should correctly reveal modal content, when the button is clicked', () => {
    cyMountWithProviders(<UncontrolledModal />, {
      useAllProviders: true,
    });
    cySmartGet('button').should('exist');
    cySmartGet('content').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('content').should('exist');
  });

  it('should correctly forward the domRef of the target component', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(
      <Modal domRef={domRef}>
        <Modal.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Modal.Target>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should close the Modal by default, when the user clicks outside', () => {
    cyMountWithProviders(
      <Modal testId="moo">
        <Modal.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Modal.Target>
        <Modal.Content testId="content">hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('not.exist');
  });

  it('should not close the Modal, when the user clicks outside and outsideClicksClose is false', () => {
    cyMountWithProviders(
      <Modal outsideClicksClose={false} testId="moo">
        <Modal.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </Modal.Target>
        <Modal.Content testId="content">hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('exist');
  });

  it('should render a background overlay color, by default', () => {
    cyMountWithProviders(
      <Modal visible testId="moo">
        <Modal.Content testId="content">hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });

  it('should not render a background overlay color, when neccissary', () => {
    cyMountWithProviders(
      <Modal visible showBgOverlay={false} testId="moo">
        <Modal.Content testId="content">hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      'rgba(0,0,0,0)',
    );
  });

  it('should update visible Modal.Content, as the parent component re-renders', () => {
    function ModalWithCount() {
      const [count, setCount] = useState(0);
      return (
        <Modal visible>
          <Modal.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </Modal.Target>
          <Modal.Content testId="content">count: {count}</Modal.Content>
        </Modal>
      );
    }
    cyMountWithProviders(<ModalWithCount />, { useAllProviders: true });
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click({ force: true });
    cySmartGet('content').should('have.text', 'count: 1');
  });

  it('should update other props while the modal is open, if/when they change', () => {
    function ModalWithChangingBgSx() {
      const [visible, setVisible] = useState(false);
      return (
        <Modal
          visible
          bgOverlaySx={{ d: visible ? 'block' : 'none' }}
          testId="moo"
        >
          <Modal.Target testId="button">
            <button type="button" onClick={() => setVisible(old => !old)}>
              toggle
            </button>
          </Modal.Target>
          <Modal.Content sx={{ p: '10px', bg: 'gold' }}>
            visible: {`${visible}`}
          </Modal.Content>
        </Modal>
      );
    }
    cyMountWithProviders(<ModalWithChangingBgSx />, { useAllProviders: true });
    cySmartGet('moo__bgOverlay').should('have.css', 'display', 'none');
    cySmartGet('button').click({ force: true });
    cySmartGet('moo__bgOverlay').should('have.css', 'display', 'block');
  });

  it('should allow customisation of the bgOverlay via sx', () => {
    cyMountWithProviders(
      <Modal visible testId="moo" bgOverlaySx={{ background: 'gold' }}>
        <Modal.Content testId="content">hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should('have.backgroundColor', 'gold');
  });

  it('should allow the user to lock the modal full screen, when the screen width dips below, a given breakpoint', () => {
    cy.viewport(500, 500);
    cyMountWithProviders(
      <Modal visible testId="moo" fullScreenUntilBreakpoint="small">
        <Modal.Content testId="content" sx={{ w: '300px', bg: 'gold' }}>
          hello
        </Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('content').then($el => {
      const { top } = $el[0].getBoundingClientRect();
      expect(top).to.be.greaterThan(200);
    });
    cy.viewport(200, 500);
    // @NOTE: wait for css animations etc
    cy.wait(350);
    cySmartGet('content').then($el => {
      const { top } = $el[0].getBoundingClientRect();
      expect(top).to.be.lessThan(60);
    });
  });

  it('should not lock the modal full screen when the screen width dips below, if the prop is not provided', () => {
    cy.viewport(500, 500);
    cyMountWithProviders(
      <Modal visible testId="moo">
        <Modal.Content testId="content" sx={{ w: '300px', bg: 'gold' }}>
          hello
        </Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );
    cySmartGet('content').then($el => {
      const { top } = $el[0].getBoundingClientRect();
      expect(top).to.be.greaterThan(200);
    });
    cy.viewport(200, 500);
    cySmartGet('content').then($el => {
      const { top } = $el[0].getBoundingClientRect();
      expect(top).to.be.greaterThan(200);
    });
  });

  context('Controlled API', () => {
    it('should not toggle visibility of the Modal.Content, if the control is not properly wired up', () => {
      cyMountWithProviders(
        <Modal visible testId="moo">
          <Modal.Content testId="content">hello</Modal.Content>
        </Modal>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('exist');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('content').should('exist');

      cyMountWithProviders(
        <Modal visible={false}>
          <Modal.Target>
            <button type="button" data-testid="button">
              open
            </button>
          </Modal.Target>
          <Modal.Content testId="content">hello</Modal.Content>
        </Modal>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });
    it('should call onCloseModal prop function, when something is trying to close the Modal', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(<ControlledModal onCloseStub={onCloseStub} />, {
        useAllProviders: true,
      });
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('Uncontrolled API', () => {
    it('should open a modal, when the user clicks the target', () => {
      cyMountWithProviders(<UncontrolledModal />, {
        useAllProviders: true,
      });
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist');
    });
    it('should still fire onCloseModal prop function when a Modal is closed', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(<UncontrolledModal onCloseStub={onCloseStub} />, {
        useAllProviders: true,
      });
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  it('should allow the use of an external container, when neccissary', () => {
    cyMountWithProviders(
      <BiomeCombinedProviders modalContainerId="moo">
        <Box
          id="moo"
          sx={{
            position: 'absolute',
            width: '100%',
            height: 'calc(100% - 50px)',
            top: '50px',
            left: '0',
            bg: 'red',
          }}
        />
        <UncontrolledModal />
      </BiomeCombinedProviders>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('button').click();
    cySmartGet('#moo div[data-testid="content"]').should('exist');
    cySmartGet('content').should('exist');
  });

  it('should allow the custom positioning of the Modal.Content', () => {
    cyMountWithProviders(
      <Modal visible position={{ x: 'left', y: 'top' }}>
        <Modal.Content sx={{ bg: 'gold', p: 'base.icon.size.600' }}>
          hello
        </Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('modal__modalContent')
      .should('have.css', 'top', '48px')
      .and('have.css', 'left', '48px');

    cyMountWithProviders(
      <Modal visible position={{ x: 'right', y: 'bottom' }}>
        <Modal.Content>hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('modal__modalContent')
      .should('have.css', 'bottom', '48px')
      .and('have.css', 'right', '48px');

    cyMountWithProviders(
      <Modal visible position={{ x: 'center', y: 'bottom' }}>
        <Modal.Content>hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('modal__modalContent')
      .should('have.css', 'bottom', '48px')
      .and('have.css', 'left', '250px');

    cyMountWithProviders(
      <Modal visible position={{ x: 'left', y: 'center' }}>
        <Modal.Content>hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('modal__modalContent')
      .should('have.css', 'top', '250px')
      .and('have.css', 'left', '48px');

    cyMountWithProviders(
      <Modal visible position={{ x: 'center', y: 'center' }}>
        <Modal.Content>hello</Modal.Content>
      </Modal>,
      { useAllProviders: true },
    );

    cySmartGet('modal__modalContent')
      .should('have.css', 'top', '250px')
      .and('have.css', 'left', '250px');
  });
});
