import { DistributiveOmit } from '@emotion/react';
import { ReactElement, ReactNode, useCallback } from 'react';
import merge from 'ts-deepmerge';

import {
  CLOSE_MODAL,
  useOverlaysStore,
} from '../../providers/BiomeOverlaysProvider';
import { Box, BoxWithRCAndDomProps } from '../Box';

export type ModalContentProps<RC extends ReactElement | undefined = undefined> =
  DistributiveOmit<BoxWithRCAndDomProps<RC>, 'children'> & {
    children: ((props: { closeModal: () => void }) => ReactNode) | ReactNode;
    id?: string;
  };

export function ModalContent<RC extends ReactElement | undefined = undefined>({
  children,
  id = '',
  sx = {},
  className,
  ...props
}: ModalContentProps<RC>) {
  const { dispatchAction } = useOverlaysStore(state => state.modalList);

  const closeModal = useCallback(
    () =>
      dispatchAction({
        type: CLOSE_MODAL,
        payload: { id },
      }),
    [dispatchAction, id],
  );

  const renderedChildren =
    typeof children === 'function'
      ? children({
          closeModal,
        })
      : children;

  return (
    <Box
      {...props}
      sx={merge(
        {
          maxw: '100svw',
          maxh: '100svh',
          minh: '100%',
          overflow: 'auto',
        },
        sx,
      )}
      className={`${className ?? ''} ModalContent`}
    >
      {renderedChildren}
    </Box>
  );
}

ModalContent.displayName = 'Modal.Content';
