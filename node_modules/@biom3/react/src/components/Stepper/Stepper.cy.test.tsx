import { designTokens } from '@biom3/design-tokens';
import { useState } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Stepper } from './Stepper';

function StepperTestFixture({
  testId = 'moo',
  size = 'medium',
  children = (
    <>
      <Stepper.Step>Moo</Stepper.Step>
      <Stepper.Step>Cow</Stepper.Step>
    </>
  ),
  ...props
}: any) {
  return (
    <Stepper {...props} testId={testId} size={size}>
      {children}
    </Stepper>
  );
}

describe('<Stepper />', () => {
  it('should have correct displayName', () => {
    expect(Stepper.displayName).to.eq('Stepper');
  });

  it('should render inside a div by default, but override that when an rc prop is provided', () => {
    cyMountWithProviders(<StepperTestFixture />, {});
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(<StepperTestFixture rc={<section />} />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(<StepperTestFixture domRef={ref} />);
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(<StepperTestFixture sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <StepperTestFixture aria-atomic="true" data-moo="cow" />,
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should allow "future" step selection, by default', () => {
    cyMountWithProviders(<StepperTestFixture />);
    cySmartGet('moo__step').eq(1).should('not.have.attr', 'disabled');
  });

  it('should disable "future" step selection, when neccissary', () => {
    cyMountWithProviders(<StepperTestFixture disableFutureStepSelect />);
    cySmartGet('moo__step').eq(1).should('have.attr', 'disabled');
  });

  context('Variants', () => {
    it('should render a horizontal variant stepper by default', () => {
      cyMountWithProviders(<StepperTestFixture />);
      cySmartGet('moo').should('have.css', 'flex-direction', 'row');
    });

    it('should render a vertical variant stepper, when neccissary', () => {
      cyMountWithProviders(<StepperTestFixture variant="vertical" />);
      cySmartGet('moo').should('have.css', 'flex-direction', 'column');
    });

    it('should correctly render active, future & complete steps for vertical variant', () => {
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" defaultStep={2}>
          <Stepper.Step>Complete</Stepper.Step>
          <Stepper.Step>Active</Stepper.Step>
          <Stepper.Step>Future</Stepper.Step>
        </StepperTestFixture>,
      );

      cy.contains('Complete')
        .find('.StepperStep__duoCon')
        .find(':first-child')
        .should('have.css', 'fill', 'rgb(171, 247, 144)');

      cy.contains('Complete').then(($el: any) => {
        cy.window().then(win => {
          const after = win.getComputedStyle($el[0], '::after');
          expect(after.getPropertyValue('width')).to.equal('1px');
          expect(after.getPropertyValue('height')).to.equal('24px');
        });
      });

      cy.contains('Active')
        .find('.StepperStep__badge')
        .should('have.css', 'background-color', 'rgb(13, 13, 13)')
        .and('have.text', '2');

      cy.contains('Future')
        .find('.StepperStep__badge')
        .should('have.css', 'background-color', 'rgba(13, 13, 13, 0.04)')
        .and('have.text', '3');
    });

    it('should correctly render active, future & complete steps for horizontal variant', () => {
      cy.viewport(600, 200);
      cyMountWithProviders(
        <StepperTestFixture defaultStep={2}>
          <Stepper.Step>Complete</Stepper.Step>
          <Stepper.Step>Active</Stepper.Step>
          <Stepper.Step>Future</Stepper.Step>
        </StepperTestFixture>,
      );

      cy.contains('Complete')
        .find('.StepperStep__duoCon')
        .find(':first-child')
        .should('have.css', 'fill', 'rgb(171, 247, 144)');

      cy.contains('Complete').then(($el: any) => {
        cy.window().then(win => {
          const after = win.getComputedStyle($el[0], '::after');
          expect(after.getPropertyValue('content')).not.to.equal('');
          expect(after.getPropertyValue('width')).to.equal('32px');
          expect(after.getPropertyValue('height')).to.equal('1px');
        });
      });

      cy.contains('Active')
        .find('.StepperStep__badge')
        .should('have.css', 'background-color', 'rgb(13, 13, 13)')
        .and('have.text', '2');

      cy.contains('Active').then(($el: any) => {
        cy.window().then(win => {
          const after = win.getComputedStyle($el[0], '::after');
          expect(after.getPropertyValue('content')).to.equal('""');
        });
      });

      cy.contains('Future')
        .find('.StepperStep__badge')
        .should('have.css', 'background-color', 'rgba(13, 13, 13, 0.04)')
        .and('have.text', '3');
    });

    it('should allow variant to be defined responsively', () => {
      cy.viewport(200, 400);
      cyMountWithProviders(
        <StepperTestFixture variant={['vertical', null, 'horizontal']} />,
      );
      cySmartGet('moo').should('have.class', 'Stepper--vertical');

      cy.viewport(designTokens.base.breakpoint.medium, 200);
      cySmartGet('moo').should('have.class', 'Stepper--horizontal');
    });
  });

  context('Sizes', () => {
    it('should render a medium sized stepper by default', () => {
      cyMountWithProviders(<StepperTestFixture />);
      cySmartGet('moo').should('have.css', 'gap', '48px');
      cySmartGet('moo__step').should('have.css', 'padding-left', '56px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '32px')
        .and('have.css', 'height', '32px');
    });

    it('should correctly render a small horizontal stepper, when neccissary', () => {
      cyMountWithProviders(<StepperTestFixture size="small" />);
      cySmartGet('moo').should('have.css', 'gap', '48px');
      cySmartGet('moo__step').should('have.css', 'padding-left', '36px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '24px')
        .and('have.css', 'height', '24px');
    });

    it('should correctly render a small vertical stepper, when neccissary', () => {
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" size="small" />,
      );
      cySmartGet('moo').should('have.css', 'gap', '32px');
      cySmartGet('moo__step').should('have.css', 'padding-left', '36px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '24px')
        .and('have.css', 'height', '24px');
    });

    it('should correctly render a medium vertical stepper, when neccissary', () => {
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" size="medium" />,
      );
      cySmartGet('moo').should('have.css', 'gap', '40px');
      cySmartGet('moo__step').should('have.css', 'padding-left', '56px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '32px')
        .and('have.css', 'height', '32px');
    });

    it('should allow size to be defined responsively', () => {
      cy.viewport(200, 400);
      cyMountWithProviders(
        <StepperTestFixture
          size={['small', null, 'medium']}
          variant="vertical"
        />,
      );
      cySmartGet('moo').should('have.css', 'gap', '32px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '24px')
        .and('have.css', 'height', '24px');

      cy.viewport(designTokens.base.breakpoint.medium, 200);
      cySmartGet('moo').should('have.css', 'gap', '40px');
      cySmartGet('moo__step__badge')
        .should('have.css', 'width', '32px')
        .and('have.css', 'height', '32px');
    });
  });

  context('Uncontrolled API', () => {
    it('should change current step, as user clicks on steps', () => {
      cyMountWithProviders(<StepperTestFixture variant="vertical" />);
      cySmartGet('moo__step').eq(0).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step')
        .eq(1)
        .should('not.have.class', 'StepperStep--active');

      cySmartGet('moo__step').eq(1).click();
      cySmartGet('moo__step').eq(1).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step')
        .eq(0)
        .should('not.have.class', 'StepperStep--active');

      cySmartGet('moo__step').eq(0).click();
      cySmartGet('moo__step').eq(0).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step')
        .eq(1)
        .should('not.have.class', 'StepperStep--active');
    });
    it('should still call onStepChange, even when in uncontrolled mode', () => {
      const onStepChange = cy.stub().as('onStepChange');
      cyMountWithProviders(
        <StepperTestFixture
          variant="vertical"
          onStepChange={onStepChange}
          defaultStep={1}
        />,
      );
      cySmartGet('moo__step').eq(1).click();
      cySmartGet('@onStepChange').should('have.been.calledOnce');
      cySmartGet('@onStepChange').should('have.been.calledWith', 2);
    });
  });

  context('Controlled API', () => {
    it('should not change active step, when not hooked up properly', () => {
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" currentStep={1} />,
      );
      cySmartGet('moo__step').eq(0).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step')
        .eq(1)
        .should('not.have.class', 'StepperStep--active');
      cySmartGet('moo__step').eq(1).click();
      cySmartGet('moo__step').eq(0).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step')
        .eq(1)
        .should('not.have.class', 'StepperStep--active');
    });

    it('should render warning when user tries to pass in an invalid currentStep prop', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" currentStep={-1} />,
      );
      cySmartGet('@consoleWarn').should(
        'have.been.calledWithMatch',
        /Stepper recieved an invalid currentStep property \(-1\)/,
      );
      cyMountWithProviders(
        <StepperTestFixture variant="vertical" currentStep={0} />,
      );
      cySmartGet('@consoleWarn').should(
        'have.been.calledWithMatch',
        /Stepper recieved an invalid currentStep property \(0\)/,
      );
    });

    it('should function correctly, when connected up properly', () => {
      function TestFixture() {
        const [currentStep, setCurrentStep] = useState(1);
        return (
          <StepperTestFixture
            variant="vertical"
            currentStep={currentStep}
            onStepChange={setCurrentStep}
          />
        );
      }
      cyMountWithProviders(<TestFixture />);
      cySmartGet('moo__step').eq(0).should('have.class', 'StepperStep--active');
      cySmartGet('moo__step').eq(1).click();
      cySmartGet('moo__step').eq(1).should('have.class', 'StepperStep--active');
    });
  });
});
