import { designTokens } from '@biom3/design-tokens';

import { DUMMY_RASTER_IMAGE_2_URL } from '../../utils';
import {
  cyMountWithProviders,
  cySmartGet,
  getSrcsetSizes,
} from '../../utils/testHelpers';
import { Avatar } from './Avatar';

function AvatarTestFixture({
  testId = 'moo',
  initials = 'TST',
  ...props
}: any) {
  return <Avatar {...props} testId={testId} initials={initials} />;
}

describe('<Avatar />', () => {
  beforeEach(() => {
    cy.viewport(200, 200);
  });

  it('should have correct displayName', () => {
    expect(Avatar.displayName).to.eq('Avatar');
  });

  it('should render inside a div by default, but override that when an rc prop is provided', () => {
    cyMountWithProviders(<AvatarTestFixture />, { useAllProviders: true });
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(<AvatarTestFixture rc={<section />} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(<AvatarTestFixture domRef={ref} />, {
      useAllProviders: true,
    });
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(<AvatarTestFixture sx={{ bg: 'gold' }} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <AvatarTestFixture aria-atomic="true" data-moo="cow" />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should render initials text, when neccissary', () => {
    cyMountWithProviders(<AvatarTestFixture sx={{ bg: 'gold' }} />, {
      useAllProviders: true,
    });
    cySmartGet('moo__text').should('have.text', 'TST');
  });

  it('should render an avatar image, when necccissary', () => {
    cyMountWithProviders(
      <AvatarTestFixture imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'srcset',
    );
  });

  it('should render in "medium" size, by default', () => {
    cyMountWithProviders(<AvatarTestFixture />, { useAllProviders: true });
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');
  });

  it('should render the correct sizes', () => {
    cyMountWithProviders(<AvatarTestFixture size="xLarge" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '64px');
    cySmartGet('moo').should('have.css', 'height', '64px');

    cyMountWithProviders(<AvatarTestFixture size="large" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '48px');
    cySmartGet('moo').should('have.css', 'height', '48px');

    cyMountWithProviders(<AvatarTestFixture size="medium" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');

    cyMountWithProviders(<AvatarTestFixture size="small" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '24px');
    cySmartGet('moo').should('have.css', 'height', '24px');
  });

  it('should render in responsive sizing, where neccissary', () => {
    cy.viewport(200, 400);
    cyMountWithProviders(
      <AvatarTestFixture size={['small', 'medium', 'large', 'xLarge']} />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.css', 'width', '24px');
    cySmartGet('moo').should('have.css', 'height', '24px');
    cySmartGet('moo__text').should('have.css', 'font-size', '10px');

    cy.viewport(designTokens.base.breakpoint.small, 400);
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');
    cySmartGet('moo__text').should('have.css', 'font-size', '12px');

    cy.viewport(designTokens.base.breakpoint.medium, 400);
    cySmartGet('moo').should('have.css', 'width', '48px');
    cySmartGet('moo').should('have.css', 'height', '48px');
    cySmartGet('moo__text').should('have.css', 'font-size', '16px');

    cy.viewport(designTokens.base.breakpoint.large, 400);
    cySmartGet('moo').should('have.css', 'width', '64px');
    cySmartGet('moo').should('have.css', 'height', '64px');
    cySmartGet('moo__text').should('have.css', 'font-size', '16px');
  });

  it('should render correct responsiveImageSizes for each avatar size', () => {
    cyMountWithProviders(
      <AvatarTestFixture size="xLarge" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
        expect(sizes).to.contain(256);
      });

    cyMountWithProviders(
      <AvatarTestFixture size="large" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
      });

    cyMountWithProviders(
      <AvatarTestFixture size="medium" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
      });

    cyMountWithProviders(
      <AvatarTestFixture size="small" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
      });
  });

  it('should render correct relativeImageSizeInLayout, when neccissary', () => {
    cyMountWithProviders(
      <AvatarTestFixture size="xLarge" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '64px',
    );

    cyMountWithProviders(
      <AvatarTestFixture size="large" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '48px',
    );

    cyMountWithProviders(
      <AvatarTestFixture size="medium" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '32px',
    );

    cyMountWithProviders(
      <AvatarTestFixture size="small" imageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '24px',
    );
  });

  it('should choose the right relativeImageSizeInLayout and responsiveImageSizes, when "size" prop is responsive', () => {
    cyMountWithProviders(
      <AvatarTestFixture
        size={['small', null, 'xLarge']}
        imageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '24px',
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
      });

    cy.viewport(designTokens.base.breakpoint.medium, 400);

    cySmartGet('moo__framedImage__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '64px',
    );
    cySmartGet('moo__framedImage__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
        expect(sizes).to.contain(256);
      });
  });
});
