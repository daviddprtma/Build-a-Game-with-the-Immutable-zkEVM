import merge from 'ts-deepmerge';

import { useGetCurrentSizeClass, useTheme } from '../../hooks';
import {
  useGetRelativeImageSizeInLayout,
  useGetResponsiveImageSizes,
} from '../../hooks/responsiveImageSizeHooks';
import {
  DEFAULT_IMAGE_SIZE_VARIANT,
  IMAGE_SIZE_VARIANTS,
  ImageSizeVariant,
} from '../../types/image';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from '../../types/shared';
import { hFlex } from '../../utils';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { CloudImageProps } from '../CloudImage/CloudImage';
import { FramedImage } from '../FramedImage';
import {
  getContainerSx,
  getResponsiveContainerSx,
  getResponsiveTextSx,
  getTextSx,
} from './styles';

export type AvatarProps = StandardComponentWithProps<
  HTMLDivElement,
  {
    size?: MakeResponsive<ImageSizeVariant>;
    initials?: string;
  } & Omit<CloudImageProps, 'responsiveSizes' | 'relativeImageSizeInLayout'>
>;

export function Avatar<RC extends string | undefined>({
  initials,
  imageUrl,
  size = DEFAULT_IMAGE_SIZE_VARIANT,
  imageResizeServiceUrl,
  defaultImageClassName,
  defaultImageUrl,
  loading,
  testId = 'Avatar',
  className,
  sx = {},
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & AvatarProps
  : AvatarProps & { rc: RC }) {
  const theme = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );
  const currentSizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );
  const containerSx = merge(
    {
      ...hFlex,
      borderRadius: '50%',
      overflow: 'hidden',
      alignItems: 'center',
      justifyContent: 'center',
      pos: 'relative',
      ...(initials
        ? {
            bg: 'base.color.accent.3',
          }
        : {}),
    },
    getContainerSx({ theme, size: startingSize }),
    getResponsiveContainerSx({ theme, size }),
    sx,
  );

  const textSx = merge(
    getTextSx({ theme, size: startingSize }),
    getResponsiveTextSx({ theme, size }),
  );

  const responsiveSizes = useGetResponsiveImageSizes(size, 'Avatar');
  const relativeImageSizeInLayout = useGetRelativeImageSizeInLayout(
    size,
    'Avatar',
  );

  return (
    <Box
      {...props}
      testId={testId}
      className={`${className ?? ''} Avatar Avatar--${currentSizeClass}`}
      sx={containerSx}
    >
      {imageUrl ? (
        <FramedImage
          testId={`${testId}__framedImage`}
          circularFrame
          imageUrl={imageUrl}
          className="Avatar__image"
          relativeImageSizeInLayout={relativeImageSizeInLayout}
          imageResizeServiceUrl={imageResizeServiceUrl}
          responsiveSizes={responsiveSizes}
          defaultImageClassName={defaultImageClassName}
          defaultImageUrl={defaultImageUrl}
          loading={loading}
        />
      ) : initials ? (
        <Box
          sx={textSx}
          testId={`${testId}__text`}
          rc={<span />}
          className="Avatar__initials"
        >
          {initials}
        </Box>
      ) : null}
    </Box>
  );
}

Avatar.displayName = 'Avatar';
