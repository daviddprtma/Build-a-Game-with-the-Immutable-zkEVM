import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { Ref } from 'react';

import {
  DUMMY_RASTER_IMAGE_URL,
  DUMMY_VECTOR_IMAGE_URL,
} from '../../utils/dummyImages';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import {
  CloudImage,
  DARK_ON_LIGHT_DEFAULT_IMAGE,
  LIGHT_ON_DARK_DEFAULT_IMAGE,
} from './CloudImage';

describe('<CloudImage />', () => {
  it('should have correct displayName', () => {
    expect(CloudImage.displayName).to.eq('CloudImage');
  });
  it('should render a default image, when no image is supplied', () => {
    cyMountWithProviders(<CloudImage testId="moo" />);
    cySmartGet('moo').should('not.exist');
    cySmartGet('moo--defaultImage').should('exist').and('have.attr', 'src');
  });

  it('should render a default image, when an invalid image is supplied', () => {
    cyMountWithProviders(
      <CloudImage imageUrl="https://some-bad-image.com" testId="moo" />,
    );
    cySmartGet('moo').should('not.exist');
    cySmartGet('moo--defaultImage').should('exist');
  });

  it('should select the correct default image, depending on the current theme color mode', () => {
    cyMountWithProviders(
      <CloudImage imageUrl="https://some-bad-image.com" testId="moo" />,
      {
        theme: {
          base: {
            ...designTokens.base,
            colorMode: 'lightOnDark',
          },
        },
      },
    );

    cySmartGet('moo--defaultImage').should(
      'have.attr',
      'src',
      LIGHT_ON_DARK_DEFAULT_IMAGE,
    );

    cyMountWithProviders(
      <CloudImage imageUrl="https://some-bad-image.com" testId="moo" />,
      {
        theme: {
          base: {
            ...designTokens.base,
            colorMode: 'darkOnLight',
          },
        },
      },
    );

    cySmartGet('moo--defaultImage').should(
      'have.attr',
      'src',
      DARK_ON_LIGHT_DEFAULT_IMAGE,
    );
  });

  it('should not render srcset attr, when the image is a vector', () => {
    cyMountWithProviders(
      <CloudImage imageUrl={DUMMY_VECTOR_IMAGE_URL} testId="moo" />,
    );
    cySmartGet('moo').should('not.have.attr', 'srcset');
  });

  it('should render srcset attr, when the image is raster', () => {
    cyMountWithProviders(
      <CloudImage imageUrl={DUMMY_RASTER_IMAGE_URL} testId="moo" />,
    );
    cySmartGet('moo').should('have.attr', 'srcset');
  });

  it('should render with default srcset sizes, when no responsiveSizes are supplied', () => {
    cyMountWithProviders(
      <CloudImage imageUrl={DUMMY_RASTER_IMAGE_URL} testId="moo" />,
    );
    cySmartGet('moo')
      .should('have.attr', 'srcset')
      .then(srcset => {
        expect(srcset).to.match(/&w=32\s52w,/);
        expect(srcset).to.match(/&w=64\s84w,/);
        expect(srcset).to.match(/&w=128\s148w,/);
        expect(srcset).to.match(/=&w=256\s276w,/);
      });
  });

  it('should correctly forward domRef property', () => {
    const ref = cy.stub().as('refStub') as unknown as Ref<HTMLImageElement>;

    cyMountWithProviders(<CloudImage testId="moo" domRef={ref} />);

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'IMG',
    });
  });

  it('should correctly pass down sx style props', () => {
    cyMountWithProviders(
      <CloudImage testId="moo" sx={{ width: '100%', height: '100%' }} />,
    );

    cySmartGet('moo--defaultImage').should('have.css', {
      width: '100%',
      height: '100%',
    });

    cyMountWithProviders(
      <CloudImage imageUrl={DUMMY_RASTER_IMAGE_URL} testId="moo" />,
    );

    cySmartGet('moo').should('have.css', {
      width: '100%',
      height: '100%',
    });
  });

  it('should correctly pass down theme-aware sx style props', () => {
    cyMountWithProviders(
      <CloudImage testId="moo" sx={{ bgc: 'base.color.accent.4' }} />,
    );
    cySmartGet('moo--defaultImage').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.accent.4'),
    );
  });

  it('should correctly pass down the new experimental <img> "loading" attr', () => {
    cyMountWithProviders(
      <CloudImage
        imageUrl={DUMMY_RASTER_IMAGE_URL}
        testId="moo"
        loading="eager"
      />,
    );
    cySmartGet('moo').should('have.attr', 'loading', 'eager');

    cyMountWithProviders(
      <CloudImage
        imageUrl={DUMMY_RASTER_IMAGE_URL}
        testId="moo"
        loading="lazy"
      />,
    );
    cySmartGet('moo').should('have.attr', 'loading', 'lazy');
  });

  it('should allow the parent to pass down a className prop', () => {
    cyMountWithProviders(
      <CloudImage
        imageUrl={DUMMY_RASTER_IMAGE_URL}
        testId="moo"
        className="cow"
      />,
    );

    cySmartGet('moo').should('have.class', 'cow');
  });

  it('should allow use of a different image service, where neccissary', () => {
    const DUMMY_IMAGE_SERVICE = 'https://dummy-image.immutable.com';
    const interceptStub = cy
      .stub()
      .as('interceptStub')
      .returns({ statusCode: 404 });
    cy.intercept(`${DUMMY_IMAGE_SERVICE}/url=aHR0*`, interceptStub).as(
      'imageStub',
    );
    cySmartGet('@interceptStub').should('not.have.been.called');
    cyMountWithProviders(
      <CloudImage
        imageUrl={DUMMY_RASTER_IMAGE_URL}
        testId="moo"
        imageResizeServiceUrl={DUMMY_IMAGE_SERVICE}
      />,
    );
    cySmartGet('moo--defaultImage').should('exist');
    // @NOTE: called once to get the HEAD, then once for the main GET
    cySmartGet('@interceptStub').should('have.been.calledTwice');
  });

  it('should render an image with the correct sizes attr, where neccissary', () => {
    cyMountWithProviders(
      <CloudImage
        imageUrl={DUMMY_RASTER_IMAGE_URL}
        testId="moo"
        responsiveSizes={[32, 64, 128]}
      />,
    );
    cySmartGet('moo')
      .should('have.attr', 'srcset')
      .then(srcset => {
        expect(srcset).to.match(/&w=32\s52w,/);
        expect(srcset).to.match(/&w=64\s84w,/);
        expect(srcset).to.match(/&w=128\s148w,/);
      });
  });
});
