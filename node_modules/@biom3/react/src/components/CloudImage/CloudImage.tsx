import { Interpolation } from '@emotion/react';
import { useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  useConvertSxToEmotionStyles,
  useDetectBadImage,
  useDetectSvgImage,
  useTheme,
} from '../../hooks';
import { ResponsiveSizes } from '../../types/image';
import { StandardComponentWithProps } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { base64UrlEncode } from '../../utils/encodeHelpers';

export const DARK_ON_LIGHT_DEFAULT_IMAGE =
  'https://design-system.immutable.com/hosted-for-ds/images/defaultTokenImage--darkOnLight.svg';
export const LIGHT_ON_DARK_DEFAULT_IMAGE =
  'https://design-system.immutable.com/hosted-for-ds/images/defaultTokenImage--lightOnDark.svg';

export type CloudImageProps = Omit<
  StandardComponentWithProps<
    HTMLImageElement,
    {
      imageUrl?: string | null;
      defaultImageUrl?: string;
      defaultImageClassName?: string;
      responsiveSizes?: ResponsiveSizes;
      relativeImageSizeInLayout?: string;
      imageResizeServiceUrl?: string;
      // @NOTE: because its still experimental, the loading type does not yet
      // exist on the HTMLImageElement type.
      // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-loading
      loading?: 'lazy' | 'eager';
      // @NOTE: for some reason, DetailedHTMLProps<HTMLAttributes<HTMLImageElement>, HTMLImageElement>
      // does not include the alt attribute, so we have to add it here. :facepalm:
      alt?: string;
    }
  >,
  'rc'
>;

export const generateBaseImageUrl = ({
  imageUrl,
  imageResizeServiceUrl,
}: {
  imageResizeServiceUrl: string;
  imageUrl?: string | null;
}) =>
  imageUrl
    ? `${imageResizeServiceUrl}/url=${base64UrlEncode(imageUrl)}`
    : undefined;

export const generateResizedImageUrl = ({
  width,
  height,
  imageUrl,
  imageResizeServiceUrl,
  isSvg,
}: {
  width?: number;
  height?: number;
  imageUrl?: string | null;
  imageResizeServiceUrl: string;
  isSvg?: boolean;
}) =>
  imageUrl
    ? `${generateBaseImageUrl({ imageResizeServiceUrl, imageUrl })}${
        width && !isSvg ? `&w=${width}` : height && !isSvg ? `&h=${height}` : ''
      }`
    : undefined;

const pickMinimumSize = (sizes?: ResponsiveSizes) => sizes?.sort()[0];
export const DEFAULT_IMAGE_SIZE = 256;

export function CloudImage({
  testId,
  className,
  domRef,
  defaultImageClassName,
  imageUrl,
  defaultImageUrl,
  responsiveSizes = [32, 64, 128, 256],
  relativeImageSizeInLayout = `${pickMinimumSize(responsiveSizes)}px`,
  loading = 'lazy',
  imageResizeServiceUrl = 'https://image-resizer-cache.dev.immutable.com',
  sx = {},
  alt,
  ...props
}: CloudImageProps) {
  const theme = useTheme();
  const pickedDefaultImage = useMemo(() => {
    return (
      defaultImageUrl ||
      (theme.base.colorMode === 'lightOnDark'
        ? LIGHT_ON_DARK_DEFAULT_IMAGE
        : DARK_ON_LIGHT_DEFAULT_IMAGE)
    );
  }, [theme, defaultImageUrl]);
  const customStyles = useConvertSxToEmotionStyles(sx);
  const imageIsSvg = useDetectSvgImage({
    imageUrl: generateBaseImageUrl({ imageUrl, imageResizeServiceUrl }),
  });
  const imageIsValid = useDetectBadImage({
    imageUrl: generateResizedImageUrl({
      imageUrl,
      imageResizeServiceUrl,
      // @NOTE: to see if an exists, only try to get a tiny version of it (dont get the fullsized image)
      width: 32,
    }),
  });
  const srcSet = useMemo(
    () =>
      responsiveSizes?.reduce(
        (accum, current) =>
          `${accum}${generateResizedImageUrl({
            imageUrl,
            imageResizeServiceUrl,
            width: current,
            isSvg: false,
          })} ${current + 20}w, `,
        // @NOTE add some ^ buffer on here to slightly increase the
        // threshold with which a larger image is selected by the browser
        // this allows for things like sub-pixel rounding and scrollbars
        '',
      ),
    [responsiveSizes, imageUrl, imageResizeServiceUrl],
  );

  const srcAttrs = useMemo(
    () =>
      imageIsSvg
        ? {
            src: generateResizedImageUrl({
              imageUrl,
              imageResizeServiceUrl,
              isSvg: true,
            }),
          }
        : srcSet
        ? {
            srcSet,
            sizes: relativeImageSizeInLayout,
          }
        : {
            src: generateResizedImageUrl({
              imageUrl,
              imageResizeServiceUrl,
              width: DEFAULT_IMAGE_SIZE,
              isSvg: false,
            }),
          },
    [
      imageIsSvg,
      imageUrl,
      imageResizeServiceUrl,
      srcSet,
      relativeImageSizeInLayout,
    ],
  );

  return imageIsValid ? (
    <img
      {...props}
      {...srcAttrs}
      alt={alt}
      className={`${className ?? ''} CloudImage`}
      css={customStyles}
      data-testid={testId}
      loading={loading}
      ref={domRef}
    />
  ) : (
    <img
      {...props}
      ref={domRef}
      alt={alt}
      className={`${className ?? ''} ${
        defaultImageClassName ?? ''
      } CloudImage CloudImage--defaultImage`}
      data-testid={`${testId}--defaultImage`}
      loading={loading}
      src={pickedDefaultImage}
      css={merge(customStyles, {
        objectFit: 'contain',
        objectPosition: 'center',
      } satisfies Interpolation<BiomeTheme>)}
    />
  );
}

CloudImage.displayName = 'CloudImage';
