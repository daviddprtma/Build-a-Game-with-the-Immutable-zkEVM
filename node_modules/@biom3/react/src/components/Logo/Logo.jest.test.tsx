import { describe, expect, it } from '@jest/globals';
import { render, screen, waitFor } from '@testing-library/react';

import {
  AllLogoKeys,
  immutableSymbolLogos,
  lockupLogos,
  Logo,
  otherSymbolLogos,
} from './Logo';

export type { SvgIconProps } from '../SvgIcon/SvgIcon';
export { SvgIcon } from '../SvgIcon/SvgIcon';

// @NOTE: normally, because these component tests involve DOM,
// they would be run in cypress. However, because of the sheer number
// of icons, this results in increased cost for the business.
// Thus, these tests are instead run in jest.
// This is an exception to the rule, and should not be used as an example.
// any test which results in the rendering of DOM elements, should still
// be done using cypress
describe('Lockup <Logo />', () => {
  Object.keys(lockupLogos)
    .map(key => ({
      key,
    }))
    .forEach(({ key }) => {
      const logoKey = key as keyof typeof lockupLogos;

      it(`<${key} />: renders the correct container by default`, async () => {
        render(<Logo logo={logoKey} testId="moo" />);
        await waitFor(async () => {
          const g = await screen.findByTestId('moo__g');
          const paths = g.children;
          expect(paths.length).toBeGreaterThan(0);
          expect(paths[0].nodeName).toMatch(/path|circle|defs/);
        });
        expect(screen.getByTestId('moo').nodeName).toBe('svg');
      });

      it(`<${key} />: should correctly allow parent component to specify custom className`, async () => {
        render(<Logo logo={logoKey} className="cow" testId="moo" />);
        expect(screen.getByTestId('moo').classList).toContain('cow');
      });

      it(`<${key} />: should allow icon to recieve custom SX styles`, async () => {
        render(<Logo logo={logoKey} testId="moo" sx={{ bg: 'gold' }} />);
        expect(screen.getByTestId('moo')).toHaveStyle('background-color: gold');
      });

      it(`<${key} />: should correctly render sx width, when supplied`, async () => {
        const fixture = render(
          <Logo testId="moo" logo={logoKey} sx={{ w: '100px' }} />,
        );
        expect(screen.getByTestId('moo')).toHaveStyle('width: 100px');

        fixture.rerender(
          <Logo testId="moo" logo={logoKey} sx={{ width: '200px' }} />,
        );
        expect(screen.getByTestId('moo')).toHaveStyle('width: 200px');
      });
    });
});

describe('Symbol <Logo />', () => {
  Object.keys({ ...immutableSymbolLogos, ...otherSymbolLogos })
    .map(key => ({
      key,
    }))
    .forEach(({ key }) => {
      const logoKey = key as AllLogoKeys;

      it(`<${key} />: renders the correct container by default`, async () => {
        render(<Logo logo={logoKey} testId="moo" />);
        await waitFor(async () => {
          const g = await screen.findByTestId('moo__g');
          const paths = g.children;
          expect(paths.length).toBeGreaterThan(0);
          expect(paths[0].nodeName).toMatch(/path|circle|defs/);
        });
        expect(screen.getByTestId('moo').nodeName).toBe('svg');
      });

      it(`<${key} />: should correctly allow parent component to specify custom className for ${key}`, async () => {
        render(<Logo logo={logoKey} className="cow" testId="moo" />);
        expect(screen.getByTestId('moo').classList).toContain('cow');
      });

      it(`<${key} />: should allow icon to recieve custom SX styles`, async () => {
        render(<Logo logo={logoKey} testId="moo" sx={{ bg: 'gold' }} />);
        expect(screen.getByTestId('moo')).toHaveStyle('background-color: gold');
      });

      it(`<${key} />: should correctly render sx width, when supplied`, async () => {
        const fixture = render(
          <Logo testId="moo" logo={logoKey} sx={{ w: '100px' }} />,
        );
        expect(screen.getByTestId('moo')).toHaveStyle('width: 100px');

        fixture.rerender(
          <Logo testId="moo" logo={logoKey} sx={{ width: '200px' }} />,
        );
        expect(screen.getByTestId('moo')).toHaveStyle('width: 200px');
      });
    });
});
