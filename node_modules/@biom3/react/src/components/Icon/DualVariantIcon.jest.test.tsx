import { describe, expect, it } from '@jest/globals';
import { render, screen, waitFor } from '@testing-library/react';

import { AllIconKeys } from '.';
import { dualVariantIcons, Icon } from './Icon';

export type { SvgIconProps } from '../SvgIcon/SvgIcon';
export { SvgIcon } from '../SvgIcon/SvgIcon';

// @NOTE: normally, because these component tests involve DOM,
// they would be run in cypress. However, because of the sheer number
// of icons, this results in increased cost for the business.
// Thus, these tests are instead run in jest.
// This is an exception to the rule, and should not be used as an example.
// any test which results in the rendering of DOM elements, should still
// be done using cypress

describe('DualVariant <Icon />', () => {
  Object.keys(dualVariantIcons).forEach(key => {
    const iconKey = key as AllIconKeys;

    it(`"${key}": renders the correct children + container by default`, async () => {
      render(<Icon icon={iconKey} testId="moo" />);
      await waitFor(async () => {
        const g = await screen.findByTestId('moo__g');
        const paths = g.children;
        expect(paths.length).toBeGreaterThan(0);
        expect(paths[0].nodeName).toMatch(/path|circle/);
      });
      expect(screen.getByTestId('moo').nodeName).toBe('svg');
    });

    it(`"${key}": should correctly allow parent component to specify custom className`, async () => {
      render(<Icon icon={iconKey} testId="moo" className="cow" />);
      expect(screen.getByTestId('moo').classList).toContain('cow');
    });

    it(`"${key}": should allow icon to recieve custom SX styles`, async () => {
      render(<Icon icon={iconKey} testId="moo" sx={{ bg: 'gold' }} />);
      expect(screen.getByTestId('moo')).toHaveStyle('background-color: gold');
    });

    it(`"${key}": should render "regular" variant by default`, async () => {
      render(<Icon icon={iconKey} testId="moo" />);
      expect(screen.getByTestId('moo').getAttribute('data-variant')).toBe(
        'regular',
      );
    });

    it(`"${key}": should render "bold" variant when neccissary`, async () => {
      render(<Icon icon={iconKey} testId="moo" variant="bold" />);
      expect(screen.getByTestId('moo').getAttribute('data-variant')).toBe(
        'bold',
      );
    });

    it(`"${key}": should correctly render sx width, when supplied`, async () => {
      const fixture = render(
        <Icon icon={iconKey} testId="moo" sx={{ w: '100px' }} />,
      );
      expect(screen.getByTestId('moo')).toHaveStyle('width: 100px');

      fixture.rerender(
        <Icon icon={iconKey} testId="moo" sx={{ width: '200px' }} />,
      );
      expect(screen.getByTestId('moo')).toHaveStyle('width: 200px');
    });
  });
});
