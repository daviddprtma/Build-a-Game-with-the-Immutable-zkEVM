import { keyframes } from '@emotion/react';
import { ReactElement, useContext, useEffect, useRef, useState } from 'react';
import merge from 'ts-deepmerge';

import { usePrevious } from '../../hooks/usePrevious';
import { useUpdateEffect } from '../../hooks/useUpdateEffect';
import { DualVariantIconProps } from '../../types/icon';
import { DomPropsWithDomRef } from '../../types/shared';
import { fetchIconContent } from '../../utils/svgHelpers';
import { SvgIcon } from '../SvgIcon';
import { TooltipComponentContext } from '../Tooltip/shared';

// @TODO: should eventually maybe turn this into a simple array of strings
export const dualVariantIcons = {
  Add: null,
  Alert: null,
  AirDrop: null,
  ArrowBackward: null,
  ArrowForward: null,
  Authenticated: null,
  Calendar: null,
  Cart: null,
  ChevronBackward: null,
  ChevronCollapse: null,
  ChevronExpand: null,
  ChevronForward: null,
  CircleRightArrow: null,
  CircleDownArrow: null,
  Close: null,
  CloseWithCircle: null,
  Coins: null,
  CopyText: null,
  Countdown: null,
  Dashboard: null,
  DevContracts: null,
  DevExplorer: null,
  Document: null,
  Documents: null,
  Dollar: null,
  Education: null,
  Edit: null,
  EmailAddress: null,
  EmbedCode: null,
  ESports: null,
  EthToken: null,
  Exclamation: null,
  Expand: null,
  Faucet: null,
  Fullscreen: null,
  FullscreenExit: null,
  Home: null,
  HidePassword: null,
  ImageAdd: null,
  Immutable: null,
  ImxRewards: null,
  ImxToken: null,
  Information: null,
  Instagram: null,
  JumpTo: null,
  Logout: null,
  Lock: null,
  Menu: null,
  Minting: null,
  Minus: null,
  More: null,
  MoreVertical: null,
  Notification: null,
  PancakeSwap: null,
  People: null,
  ReturnKeyboard: null,
  Search: null,
  Security: null,
  SettingsCog: null,
  Shield: null,
  ShowPassword: null,
  SocialShare: null,
  SoundOn: null,
  SoundOff: null,
  Sparkle: null,
  Swatch: null,
  TickWithCircle: null,
  Tags: null,
  Tick: null,
  Tokens: null,
  TreasureChest: null,
  Trophy: null,
  ViewList: null,
  Wallet: null,
  Profile: null,
  Items: null,
  BankCard: null,
} as const;

// @TODO: should eventually maybe turn this into a simple array of strings
export const singleVariantIcons = {
  Apple: null,
  DevSdk: null,
  Discord: null,
  Email: null,
  Exchange: null,
  GraphPerformance: null,
  Google: null,
  InformationCircle: null,
  JumpTo: null,
  LinkedIn: null,
  Loading: null,
  Pause: null,
  Percentage: null,
  Play: null,
  Preferences: null,
  Reddit: null,
  Refresh: null,
  Sort: null,
  SushiSwap: null,
  Swap: null,
  Flip: null,
  Sword: null,
  Telegram: null,
  ThemeDark: null,
  ThemeLight: null,
  Twitter: null,
  UniSwap: null,
  Unity: null,
  ViewGrid: null,
  WalletConnect: null,
  WalletDisconnect: null,
  YouTube: null,
  Overview: null,
} as const;

export const allIcons = {
  ...dualVariantIcons,
  ...singleVariantIcons,
};

export type AllIconKeys = keyof typeof allIcons;

const spin = keyframes`
  from { 
    rotate: 0deg; 
  } 
  to { 
    rotate: 360deg; 
  }
`;

type IconBaseProps = DualVariantIconProps & {
  icon: AllIconKeys;
};

export type IconProps<RC extends ReactElement | undefined = undefined> =
  RC extends undefined
    ? DomPropsWithDomRef<'svg'> & IconBaseProps
    : IconBaseProps & { rc: RC };

export function Icon<RC extends ReactElement | undefined = undefined>({
  icon,
  variant = 'regular',
  sx = {},
  testId,
  className,
  ...props
}: IconProps<RC>) {
  const { triggerDomRecrawl } = useContext(TooltipComponentContext);
  const [svgContent, setSvgContent] = useState<string[] | null>(null);
  const isFetching = useRef(false);
  const previousIcon = usePrevious(icon);
  const modifiedSx =
    icon === 'Loading'
      ? merge(
          {
            animation: `${spin} 1s linear infinite`,
            transformOrigin: '50% 50%',
          },
          sx,
        )
      : sx;

  useEffect(() => {
    async function fetchContent() {
      isFetching.current = true;
      const content = await fetchIconContent(icon, variant);
      isFetching.current = false;
      if (content) setSvgContent(content);
    }
    // @NOTE: ONLY fetch the icon content if it hasn't already been fetched
    if (!svgContent && !isFetching.current) fetchContent();
  }, [icon, variant, svgContent]);

  useEffect(() => {
    triggerDomRecrawl?.();
  }, [triggerDomRecrawl, svgContent]);

  useUpdateEffect(() => {
    if (previousIcon !== icon) setSvgContent(null);
  }, [icon, previousIcon]);

  return (
    <SvgIcon
      {...props}
      testId={testId}
      sx={modifiedSx}
      data-icon={icon}
      data-variant={variant}
      className={`${className ?? ''} Icon`}
    >
      {svgContent && (
        <g
          data-testid={`${testId}__g`}
          dangerouslySetInnerHTML={{ __html: svgContent.join('') }}
        />
      )}
    </SvgIcon>
  );
}

Icon.displayName = 'Icon';
