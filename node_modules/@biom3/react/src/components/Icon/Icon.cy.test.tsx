import { useState } from 'react';

import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Icon } from './Icon';

describe('<Icon />', () => {
  it('should have correct displayName', () => {
    expect(Icon.displayName).to.eq('Icon');
  });

  it('should be able to render a gradient filled icon', () => {
    cyMountWithProviders(
      <Icon
        testId="icon"
        sx={{ fill: 'base.gradient.1', w: 'base.icon.size.500' }}
        icon="ESports"
      />,
    );

    cyGetByTestId('icon')
      .find('defs > linearGradient')
      .children()
      .should('have.length', 2)
      .then(children => {
        expect(children[0].getAttribute('stop-color')).to.eq('#F191FA');
        expect(children[1].getAttribute('stop-color')).to.eq('#83E3F0');
      });
  });

  it('should correctly fetch icon, only when it doesnt already exist in cache', () => {
    cy.intercept(
      'GET',
      '**/icons/AirDrop.json',
      cy.spy().as('fetchAirDropSpy'),
    ).as('fetchAirDrop');
    cy.intercept(
      'GET',
      '**/icons/Discord.json',
      cy.spy().as('fetchDiscordSpy'),
    ).as('fetchDiscord');
    function ToggleIconDemoApp() {
      const [swapIcon, setSwapIcon] = useState(false);
      return (
        <Icon
          onClick={() => setSwapIcon(old => !old)}
          icon={swapIcon ? 'AirDrop' : 'Discord'}
          sx={{ w: 'base.icon.size.600' }}
          testId="moo"
        />
      );
    }

    cyMountWithProviders(<ToggleIconDemoApp />);
    cySmartGet('@fetchDiscordSpy').its('callCount').should('equal', 1);
    cySmartGet('@fetchAirDropSpy').its('callCount').should('equal', 0);
    cySmartGet('moo').click();
    cySmartGet('@fetchAirDropSpy').its('callCount').should('equal', 1);
    cySmartGet('moo').click();
    cySmartGet('moo').click();
    cySmartGet('moo').click();
    cySmartGet('moo').click();
    cySmartGet('@fetchAirDropSpy').its('callCount').should('equal', 1);
    cySmartGet('@fetchDiscordSpy').its('callCount').should('equal', 1);
  });
});
