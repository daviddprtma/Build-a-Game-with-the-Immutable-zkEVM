import merge from 'ts-deepmerge';

import { BaseClickableWithRCAndDomProps } from '../../types/clickable';
import { IconReactElement } from '../../types/icon';
import { lineClamp } from '../../utils/sxChunks';
import { BaseClickable } from '../Clickable';
import { SmartClone } from '../SmartClone';
import { Body } from '../Text';
import {
  renderTabIconStyles,
  renderTabStyles,
  renderTabTextStyles,
} from './styles';
import { useTabsContext } from './TabsContext';

export type TabProps = BaseClickableWithRCAndDomProps<undefined> & {
  icon?: IconReactElement;
  value: string;
};

export function Tab({
  testId = 'Tabs__Tab',
  value = '',
  disabled = false,
  children,
  icon,
  sx = {},
  ...props
}: TabProps) {
  const { currentTabValue, onTabChange } = useTabsContext();

  const isActive = currentTabValue === value;
  const tabStyles = renderTabStyles({ isActive, disabled });
  const tabIconStyles = icon ? renderTabIconStyles({ isActive, disabled }) : {};
  const tabTextStyles = renderTabTextStyles({ isActive, disabled });

  const allStyles = merge(
    {
      background: 'transparent',
      border: 'none',
      cursor: 'pointer',
      display: 'flex',
      padding: '0',
    },
    tabStyles,
    sx,
  );

  const onTabClick = disabled ? () => null : () => onTabChange(value);

  return (
    <BaseClickable
      {...props}
      testId={testId}
      onClick={onTabClick}
      sx={allStyles}
    >
      {icon && (
        <SmartClone
          sx={merge(tabIconStyles, icon.props.sx ? icon.props.sx : {})}
        >
          {icon}
        </SmartClone>
      )}

      <Body sx={merge(tabTextStyles, lineClamp(2))}>{children}</Body>
    </BaseClickable>
  );
}

Tab.displayName = 'Tab';
