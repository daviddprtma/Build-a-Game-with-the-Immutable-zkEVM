import { useState } from 'react';

import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Tabs } from './Tabs';

function TabsWithState() {
  const [currentTabValue, setCurrentTabValue] = useState('tab1');

  return (
    <Tabs currentTabValue={currentTabValue} onTabChange={setCurrentTabValue}>
      <Tabs.List>
        <Tabs.Tab testId="moo1" value="tab1">
          hello
        </Tabs.Tab>
        <Tabs.Tab testId="moo2" value="tab2">
          hello
        </Tabs.Tab>
      </Tabs.List>
      <Tabs.Panel value="tab1">im the first panel</Tabs.Panel>
      <Tabs.Panel value="tab2">im the second panel</Tabs.Panel>
    </Tabs>
  );
}

const ACTIVE_TAB_BORDER_COLOR = 'rgb(19, 19, 19)';

describe('<Tabs />', () => {
  it('should render a div by default', () => {
    cyMountWithProviders(<Tabs testId="moo" defaultTabValue="test" />);

    cyGetByTestId('moo', {
      domElement: 'div',
    }).should('exist');
  });

  it('should render a custom element when specified', () => {
    cyMountWithProviders(
      <Tabs testId="moo" defaultTabValue="" rc={<span />} />,
    );

    cyGetByTestId('moo', {
      domElement: 'span',
    }).should('exist');
  });

  it('should render a tab as disabled when specified', () => {
    cyMountWithProviders(
      <Tabs defaultTabValue="moo1" rc={<span />}>
        <Tabs.List>
          <Tabs.Tab value="moo1">moo</Tabs.Tab>
          <Tabs.Tab testId="moo" value="moo2" disabled>
            moo
          </Tabs.Tab>
        </Tabs.List>
      </Tabs>,
    );

    cyGetByTestId('moo').should('have.css', 'cursor', 'not-allowed');
  });

  it('should accept styling via the sx prop', () => {
    cyMountWithProviders(
      <Tabs testId="moo" defaultTabValue="test" sx={{ color: 'red' }} />,
    );

    cyGetByTestId('moo').should('have.css', 'color', 'rgb(255, 0, 0)');
  });

  context('Controlled API', () => {
    it('should support a custom onTabChange handler', () => {
      const onTabChange = cy.stub().as('onTabChange');
      cyMountWithProviders(
        <Tabs currentTabValue="test" onTabChange={onTabChange}>
          <Tabs.List>
            <Tabs.Tab testId="moo" value="tab">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('@onTabChange').should('not.have.been.called');
      cySmartGet('moo').click();
      cySmartGet('@onTabChange').should('have.been.calledOnce');
    });

    it('should keep the same tab selected when another tab is clicked if onTabChange doesnt change currentTabValue', () => {
      const onTabChange = cy.stub().as('onTabChange');
      cyMountWithProviders(
        <Tabs currentTabValue="tab1" onTabChange={onTabChange}>
          <Tabs.List>
            <Tabs.Tab testId="moo1" value="tab1">
              hello
            </Tabs.Tab>
            <Tabs.Tab testId="moo2" value="tab2">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('@onTabChange').should('not.have.been.called');
      cySmartGet('moo2').click();
      cySmartGet('@onTabChange').should('have.been.calledOnce');

      cySmartGet('moo1').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );
    });

    it('should change tabs when another tab is clicked if onTabChange changes currentTabValue', () => {
      cyMountWithProviders(<TabsWithState />);
      cySmartGet('moo1').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );

      cySmartGet('moo2').click();
      cySmartGet('moo2').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );
    });

    it('should support displaying and hiding active panels', () => {
      cyMountWithProviders(<TabsWithState />);

      cy.contains('im the first panel').should('exist');
      cy.contains('im the second panel').should('not.exist');

      cySmartGet('moo2').click();

      cy.contains('im the first panel').should('not.exist');
      cy.contains('im the second panel').should('exist');
    });
  });

  context('Uncontrolled API', () => {
    it('should set the active tab to the tab matching defaultTabValue by default', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="tab2">
          <Tabs.List>
            <Tabs.Tab testId="moo1" value="tab1">
              hello
            </Tabs.Tab>
            <Tabs.Tab testId="moo2" value="tab2">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('moo2').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );
    });

    it('should change the active tab when another tab is clicked', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="tab1">
          <Tabs.List>
            <Tabs.Tab testId="moo1" value="tab1">
              hello
            </Tabs.Tab>
            <Tabs.Tab testId="moo2" value="tab2">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('moo1').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );

      cySmartGet('moo2').click();

      cySmartGet('moo2').should(
        'have.css',
        'border-top-color',
        ACTIVE_TAB_BORDER_COLOR,
      );
    });

    it('should support displaying and hiding active panels', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="tab1">
          <Tabs.List>
            <Tabs.Tab value="tab1">hello</Tabs.Tab>
            <Tabs.Tab testId="moo" value="tab2">
              hello
            </Tabs.Tab>
          </Tabs.List>
          <Tabs.Panel value="tab1">im a brown cow</Tabs.Panel>
          <Tabs.Panel value="tab2">im a purple cow</Tabs.Panel>
        </Tabs>,
      );

      cy.contains('im a brown cow').should('exist');
      cy.contains('im a purple cow').should('not.exist');

      cySmartGet('moo').click();

      cy.contains('im a brown cow').should('not.exist');
      cy.contains('im a purple cow').should('exist');
    });

    it('should still support onTabChange prop, even when using the uncontrolled API', () => {
      const onTabChange = cy.stub().as('onTabChange');
      cyMountWithProviders(
        <Tabs defaultTabValue="tab1" onTabChange={onTabChange}>
          <Tabs.List>
            <Tabs.Tab testId="moo1" value="tab1">
              hello
            </Tabs.Tab>
            <Tabs.Tab testId="moo2" value="tab2">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('@onTabChange').should('not.have.been.called');
      cySmartGet('moo1').click();
      cySmartGet('@onTabChange').should('have.been.calledOnce');
    });
  });

  context('Subcomponents', () => {
    it('should never render any child that is not a subcomponent', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="test">
          <Tabs.List testId="list">some label text</Tabs.List>
          <div data-testid="not-a-subcomponent">some other text</div>
          <>im a fragment</>
          invisible text
        </Tabs>,
      );
      cySmartGet('not-a-subcomponent').should('not.exist');
      cy.contains('im a fragment').should('not.exist');
      cy.contains('invisible text').should('not.exist');
      cySmartGet('list').should('exist');
    });

    it('should render tabs with a list, when necessary', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="test">
          <Tabs.List testId="moo" />
        </Tabs>,
      );

      cySmartGet('moo').should('exist');
    });

    it('should render tabs with a panel, when necessary', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="test">
          <Tabs.Panel testId="moo" value="test" />
        </Tabs>,
      );

      cySmartGet('moo').should('exist');
    });

    it('should render tabs with an individual tab, when necessary', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="test">
          <Tabs.List>
            <Tabs.Tab testId="moo" value="test">
              hello
            </Tabs.Tab>
          </Tabs.List>
        </Tabs>,
      );

      cySmartGet('moo').should('exist');
    });

    it('should allow all subcomponents accept styling via the sx prop', () => {
      cyMountWithProviders(
        <Tabs defaultTabValue="test">
          <Tabs.List
            testId="moo1"
            sx={{
              zIndex: '1',
            }}
          >
            <Tabs.Tab
              sx={{
                zIndex: '2',
              }}
              testId="moo2"
              value="test"
            >
              hello
            </Tabs.Tab>
          </Tabs.List>
          <Tabs.Panel
            sx={{
              zIndex: '3',
            }}
            testId="moo3"
            value="test"
          >
            hi
          </Tabs.Panel>
        </Tabs>,
      );

      cySmartGet('moo1').should('have.css', 'zIndex', '1');
      cySmartGet('moo2').should('have.css', 'zIndex', '2');
      cySmartGet('moo3').should('have.css', 'zIndex', '3');
    });

    // @TODO: write these tests
    it('should render a tab with an icon when specified', () => {});
  });
});
