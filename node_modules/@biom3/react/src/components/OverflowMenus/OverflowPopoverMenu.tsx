import {
  Children,
  isValidElement,
  MouseEvent,
  useCallback,
  useEffect,
  useState,
} from 'react';

import { useWindowSizeStore } from '../../providers';
import { ButtCon } from '../Clickable';
import { Popover } from '../Popover';
import { SmartClone } from '../SmartClone';
import { VerticalMenu } from '../VerticalMenu';
import { OverflowPopoverMenuProps } from './types';

export function OverflowPopoverMenu({
  children,
  domRef,
  testId,
  icon = 'MoreVertical',
  size = 'medium',
  variant = 'tertiary',
  onClick,
  ...buttConProps
}: OverflowPopoverMenuProps) {
  const [popoverVisible, setPopoverVisible] = useState(false);
  const { state: windowSize } = useWindowSizeStore(store => store);
  useEffect(() => setPopoverVisible(false), [windowSize]);
  const handleTargetClick = useCallback(
    (event: MouseEvent<HTMLButtonElement>) => {
      event.preventDefault();
      event.stopPropagation();
      setPopoverVisible(!popoverVisible);
      onClick?.(event);
    },
    [onClick, popoverVisible],
  );
  return (
    <Popover
      position={{ x: 'right', y: 'below' }}
      visible={popoverVisible}
      onOutsideClick={() => setPopoverVisible(false)}
      domRef={domRef}
    >
      <Popover.Target>
        <ButtCon
          {...buttConProps}
          testId={testId}
          icon={icon}
          size={size}
          variant={variant}
          onClick={handleTargetClick}
        />
      </Popover.Target>
      <Popover.Content>
        <VerticalMenu
          testId={`${testId}__overflowPopoverMenu`}
          emphasized
          sx={{
            // @NOTE: if VerticalMenu is nested inside another
            // VerticalMenu, we want to not keep making the parent
            // VerticalMenu's larger as each child opens. :P
            '& .VerticalMenu': {
              minw: 'unset',
            },
          }}
        >
          {Children.map(children, child => {
            const shouldCloneWithOnClick =
              isValidElement(child) &&
              (Boolean(child.props.onClick) || Boolean(child.props.rc));

            return shouldCloneWithOnClick ? (
              <SmartClone
                onClick={event => {
                  event.stopPropagation();
                  setPopoverVisible(false);
                }}
              >
                {child}
              </SmartClone>
            ) : (
              child
            );
          })}
        </VerticalMenu>
      </Popover.Content>
    </Popover>
  );
}

OverflowPopoverMenu.displayName = 'OverflowPopoverMenu';
