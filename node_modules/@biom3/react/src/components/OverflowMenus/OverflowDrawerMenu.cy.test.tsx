import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { MenuItem } from '../MenuItem';
import { OverflowDrawerMenu } from './OverflowDrawerMenu';

function SimpleExample({ sx = {}, domRef }: any) {
  return (
    <OverflowDrawerMenu
      headerBarTitle="test title"
      testId="moo"
      sx={sx}
      domRef={domRef}
    >
      <MenuItem onClick={() => console.log('@@@@@ CLICKED')}>
        <MenuItem.Label>something here</MenuItem.Label>
      </MenuItem>
      <MenuItem>
        <MenuItem.Label>another thing</MenuItem.Label>
      </MenuItem>
    </OverflowDrawerMenu>
  );
}

describe('<OverflowDrawerMenu />', () => {
  it('should render a ButtCon which when clicked, opens a bottom sheet menu', () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo__overflowDrawerMenu').should('not.exist');
    cySmartGet('moo').click();
    cySmartGet('moo__overflowDrawerMenu').should('exist');
  });

  it('should accept custom sx to style the ButtCon', () => {
    cyMountWithProviders(<SimpleExample sx={{ bg: 'gold' }} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it(`should correctly forward ButtCon's domRef`, () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.called');
    cyMountWithProviders(<SimpleExample sx={{ bg: 'gold' }} domRef={ref} />, {
      useAllProviders: true,
    });
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it(`should close the bottom sheet menu, when clicking outside`, () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo').click();
    cySmartGet('moo__bgOverlay').should('exist');
    cySmartGet('moo__bgOverlay').click(100, 25, { force: true });
    cySmartGet('moo__overflowDrawerMenu').should('not.exist');
  });

  it(`should close the bottom sheet menu, when clicking a MenuItem`, () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo').click();
    cySmartGet('moo__overflowDrawerMenu').should('exist');
    cySmartGet('moo__overflowDrawerMenu').children().eq(0).click();
    cySmartGet('moo__overflowDrawerMenu').should('not.exist');
  });

  it(`should only render MenuItem children inside of the VerticalMenu`, () => {
    cyMountWithProviders(
      <OverflowDrawerMenu testId="moo" headerBarTitle="test title">
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
        <div data-testid="div">will not render</div>
        <>also will not render</>
      </OverflowDrawerMenu>,
      { useAllProviders: true },
    );
    cySmartGet('moo').click();
    cy.contains('will not render').should('not.exist');
    cySmartGet('div').should('not.exist');
    cySmartGet('menuItem').should('exist');
  });

  it(`should call onClick prop, when the ButtCon is clicked`, () => {
    const onClick = cy.stub().as('onClick');
    cyMountWithProviders(
      <OverflowDrawerMenu
        testId="moo"
        onClick={onClick}
        headerBarTitle="test title"
      >
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
        <div data-testid="div">will not render</div>
        <>also will not render</>
      </OverflowDrawerMenu>,
      { useAllProviders: true },
    );

    cySmartGet('@onClick').should('not.have.been.called');
    cySmartGet('moo').click();
    cySmartGet('@onClick').should('have.been.calledOnce');
  });

  it(`should not render child MenuItems as <button>'s, when no onClick action is attached`, () => {
    cyMountWithProviders(
      <OverflowDrawerMenu testId="moo" headerBarTitle="test title">
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
      </OverflowDrawerMenu>,
      { useAllProviders: true },
    );

    cySmartGet('moo').click();
    cySmartGet('menuItem').its('0.nodeName').should('equal', 'ARTICLE');
  });
});
