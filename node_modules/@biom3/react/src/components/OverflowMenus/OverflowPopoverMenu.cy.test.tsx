import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
import NextLink from 'next/link';
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';

import { BiomeCombinedProviders } from '../../providers';
import { vFlex } from '../../utils/sxChunks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { MenuItem } from '../MenuItem';
import { OverflowPopoverMenu } from './OverflowPopoverMenu';

function SimpleExample({ sx = {}, domRef }: any) {
  return (
    <OverflowPopoverMenu testId="moo" sx={sx} domRef={domRef}>
      <MenuItem onClick={() => console.log('CLICKED')}>
        <MenuItem.Label>something here</MenuItem.Label>
      </MenuItem>
      <MenuItem>
        <MenuItem.Label>another thing</MenuItem.Label>
      </MenuItem>
    </OverflowPopoverMenu>
  );
}

class HelloWorld extends HTMLElement {
  connectedCallback() {
    this.renderWidget();
  }

  renderWidget() {
    const shadowRoot = this.attachShadow({ mode: 'open' });

    const cache = createCache({
      key: 'css',
      container: shadowRoot,
    });

    // shadow DOM as react root
    const reactRoot = createRoot(shadowRoot);

    // render react element inside shadow DOM
    reactRoot.render(
      <StrictMode>
        <CacheProvider value={cache}>
          <BiomeCombinedProviders shadowRoot={shadowRoot}>
            <Box
              sx={{
                ...vFlex,
                border: '5px dashed gold',
                p: 'base.spacing.x3',
              }}
            >
              <OverflowPopoverMenu testId="moo">
                <MenuItem onClick={() => console.log('@@@ aww snap')}>
                  <MenuItem.Label>Something</MenuItem.Label>
                </MenuItem>
                <MenuItem onClick={() => console.log('@@@ aww snap')}>
                  <MenuItem.Label>Else</MenuItem.Label>
                </MenuItem>
              </OverflowPopoverMenu>
            </Box>
          </BiomeCombinedProviders>
        </CacheProvider>
      </StrictMode>,
    );
  }
}

if (!customElements.get('hello-world')) {
  customElements.define('hello-world', HelloWorld);
}

describe('<OverflowPopoverMenu />', () => {
  it('should render a ButtCon which when clicked, opens a popover menu', () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo__overflowPopoverMenu').should('not.exist');
    cySmartGet('moo').click();
    cySmartGet('moo__overflowPopoverMenu').should('exist');
  });

  it('should accept custom sx to style the ButtCon', () => {
    cyMountWithProviders(<SimpleExample sx={{ bg: 'gold' }} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it(`should correctly forward ButtCon's domRef`, () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.called');
    cyMountWithProviders(<SimpleExample sx={{ bg: 'gold' }} domRef={ref} />, {
      useAllProviders: true,
    });
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it(`should close the popover menu, when clicking outside`, () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo').click();
    cySmartGet('moo__overflowPopoverMenu').should('exist');
    cySmartGet('html > body').click(100, 400);
    cySmartGet('moo__overflowPopoverMenu').should('not.exist');
  });

  it(`should close the popover menu, when clicking a MenuItem`, () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo').click();
    cySmartGet('moo__overflowPopoverMenu').should('exist');
    cySmartGet('moo__overflowPopoverMenu').children().eq(0).click();
    cySmartGet('moo__overflowPopoverMenu').should('not.exist');
  });

  it(`should close the popover menu, when resizing the page`, () => {
    cyMountWithProviders(<SimpleExample />, { useAllProviders: true });
    cySmartGet('moo').click();
    cySmartGet('moo__overflowPopoverMenu').should('exist');
    cy.viewport(300, 300);
    cySmartGet('moo__overflowPopoverMenu').should('not.exist');
  });

  it(`should only render MenuItem children inside of the VerticalMenu`, () => {
    cyMountWithProviders(
      <OverflowPopoverMenu testId="moo">
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
        <div data-testid="div">will not render</div>
        <>also will not render</>
      </OverflowPopoverMenu>,
      { useAllProviders: true },
    );
    cySmartGet('moo').click();
    cy.contains('will not render').should('not.exist');
    cySmartGet('div').should('not.exist');
    cySmartGet('menuItem').should('exist');
  });

  it(`should call onClick prop, when the ButtCon is clicked`, () => {
    const onClick = cy.stub().as('onClick');
    cyMountWithProviders(
      <OverflowPopoverMenu testId="moo" onClick={onClick}>
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
        <div data-testid="div">will not render</div>
        <>also will not render</>
      </OverflowPopoverMenu>,
      { useAllProviders: true },
    );

    cySmartGet('@onClick').should('not.have.been.called');
    cySmartGet('moo').click();
    cySmartGet('@onClick').should('have.been.calledOnce');
  });

  it(`should not render child MenuItems as <button>'s, when no onClick action is attached`, () => {
    cyMountWithProviders(
      <OverflowPopoverMenu testId="moo">
        <MenuItem testId="menuItem">
          <MenuItem.Label>something here</MenuItem.Label>
        </MenuItem>
      </OverflowPopoverMenu>,
      { useAllProviders: true },
    );

    cySmartGet('moo').click();
    cySmartGet('menuItem').its('0.nodeName').should('equal', 'ARTICLE');
  });

  it('should allow an <Link> tag to be passed as a child MenuItem, and clicking that <Link> should update the router', () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <OverflowPopoverMenu testId="moo">
        <MenuItem testId="menuItem" rc={<NextLink href="/" />}>
          <MenuItem.Label>next link</MenuItem.Label>
        </MenuItem>
      </OverflowPopoverMenu>,
      { useAllProviders: true, mockRouterProps: { pushStub: onPushStub } },
    );

    cySmartGet('@onPushStub').should('not.have.been.called');
    cySmartGet('moo').click();
    cySmartGet('menuItem').click();
    cySmartGet('@onPushStub').should('have.been.calledOnce');
  });

  it('should still correctly toggle the menu on and off, when used within a shadowRoot', () => {
    cyMountWithProviders(<hello-world />);
    cy.get('hello-world').shadow().as('shadowRoot');
    cySmartGet('@shadowRoot')
      .find('[data-testid="moo__overflowPopoverMenu"]')
      .should('not.exist');
    cySmartGet('@shadowRoot').find('[data-testid="moo"]').click();
    cySmartGet('@shadowRoot')
      .find('[data-testid="moo__overflowPopoverMenu"]')
      .should('exist');
    cySmartGet('@shadowRoot').find('[data-testid="moo"]').click();
    cySmartGet('@shadowRoot')
      .find('[data-testid="moo__overflowPopoverMenu"]')
      .should('not.exist');
  });
});
