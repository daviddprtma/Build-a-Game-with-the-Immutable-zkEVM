import { designTokens } from '@biom3/design-tokens';
import { useState } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { Popover } from './Popover';

// @TODO: add test to check for property changes (just like modal)

function PopoverWithState() {
  const [visible, setVisible] = useState(false);
  return (
    <Popover visible={visible}>
      <Popover.Target testId="button">
        <button onClick={() => setVisible(!visible)} type="button">
          moo
        </button>
      </Popover.Target>
      <Popover.Content testId="content">hello</Popover.Content>
    </Popover>
  );
}

const WAIT_FOR_ANIMATIONS =
  designTokens.base.motion.normal.fast.jsDuration * 1100;

describe('<Popover />', () => {
  beforeEach(() => {
    cy.viewport(200, 200);
  });

  it('should correctly fwd the target domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <Popover domRef={domRefStub}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should allow parent to set custom verticalGap inbetween the Popover target and content', () => {
    cyMountWithProviders(
      <Popover verticalGap={16}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { top } = $content[0].getBoundingClientRect();
      expect(top).to.be.within(34, 38);
    });
  });

  it('should position popover content x: center, y: below by default', () => {
    cyMountWithProviders(
      <Popover>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { top } = $content[0].getBoundingClientRect();
      expect(top).to.be.within(22, 26);
    });
  });

  it('should below align the popover content, when its set to above, but is "unsafe" to do so', () => {
    cyMountWithProviders(
      <Popover position={{ x: 'center', y: 'above' }}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { top } = $content[0].getBoundingClientRect();
      expect(top).to.be.within(22, 26);
    });
  });

  it('should above align the popover content, when its set to below, but is "unsafe" to do so', () => {
    cyMountWithProviders(
      <Popover position={{ x: 'center', y: 'below' }}>
        <Popover.Target testId="button" sx={{ mt: '85vh' }}>
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { top } = $content[0].getBoundingClientRect();
      expect(top).to.be.within(146, 149);
    });
  });

  it('should position the popover content above the trigger, when its "safe" to do so', () => {
    cyMountWithProviders(
      <Popover position={{ x: 'center', y: 'above' }}>
        <Popover.Target testId="button" sx={{ mt: '24px' }}>
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );
    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { top } = $content[0].getBoundingClientRect();
      expect(top).to.be.within(0, 3);
    });
  });

  it('should right align the popover content, when its "safe" to do so', () => {
    cyMountWithProviders(
      <Popover position={{ x: 'right', y: 'below' }}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );
    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { left } = $content[0].getBoundingClientRect();
      expect(left).to.be.within(8, 11);
    });
  });

  it('should left align the popover content, when its set to right, but is "unsafe" to do so', () => {
    cyMountWithProviders(
      <Popover position={{ x: 'right', y: 'below' }}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content" sx={{ width: '100px', bg: 'gold' }}>
          hello
        </Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );
    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { left } = $content[0].getBoundingClientRect();
      expect(left).to.eq(0);
    });
  });

  it('should right align the popover content, when its set to left, but is "unsafe" to do so', () => {
    cyMountWithProviders(
      <Box sx={{ d: 'flex' }}>
        <Popover position={{ x: 'left', y: 'below' }}>
          <Popover.Target testId="button" sx={{ ml: 'auto' }}>
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content" sx={{ width: '100px', bg: 'gold' }}>
            hello
          </Popover.Content>
        </Popover>
      </Box>,
      { useAllProviders: true },
    );
    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('content').then($content => {
      const { left } = $content[0].getBoundingClientRect();
      expect(left).to.eq(100);
    });
  });

  it(`should correctly forward on the target's domRef`, () => {
    const refStub = cy.stub().as('refStub');
    cyMountWithProviders(
      <Popover domRef={refStub}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content">hello</Popover.Content>
      </Popover>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
      innerHTML: Cypress.sinon.match('moo'),
    });
  });

  it('should allow parent component to track when the user clicks outside of the Popover.Target & Popover.Content', () => {
    const onOutsideClickStub = cy.stub().as('onOutsideClickStub');
    cyMountWithProviders(
      <Popover onOutsideClick={onOutsideClickStub}>
        <Popover.Target testId="button">
          <button type="button">moo</button>
        </Popover.Target>
        <Popover.Content testId="content" sx={{ width: '100px', bg: 'gold' }}>
          hello
        </Popover.Content>
      </Popover>,
      { useAllProviders: true },
    );
    cySmartGet('button').click();
    cy.wait(WAIT_FOR_ANIMATIONS);
    cySmartGet('@onOutsideClickStub').should('not.been.calledOnce');
    cy.get('body').click(150, 190);
    cySmartGet('@onOutsideClickStub').should('have.been.calledOnce');
  });

  it('should update visible Popover.Content, as the parent component re-renders', () => {
    function PopoverWithCount() {
      const [count, setCount] = useState(0);
      return (
        <Popover visible>
          <Popover.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </Popover.Target>
          <Popover.Content testId="content">count: {count}</Popover.Content>
        </Popover>
      );
    }
    cyMountWithProviders(<PopoverWithCount />, { useAllProviders: true });
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click();
    cySmartGet('content').should('have.text', 'count: 1');
  });

  context('Subcomponents', () => {
    it('should allow sx to be passed into child subcomponents', () => {
      cyMountWithProviders(
        <Popover>
          <Popover.Target testId="button" sx={{ bg: 'gold' }}>
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content" sx={{ bg: 'gold' }}>
            hello
          </Popover.Content>
        </Popover>,
        { useAllProviders: true },
      );

      cySmartGet('button').should('have.backgroundColor', 'gold').click();
      cySmartGet('content').should('have.backgroundColor', 'gold');
    });
  });

  context('Uncontrolled API', () => {
    it('should close an open uncontrolled popover, when the window is resized', () => {
      cyMountWithProviders(
        <Popover>
          <Popover.Target testId="button">
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content">hello</Popover.Content>
        </Popover>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist').and('be.visible');
      cy.viewport(250, 250);
      cySmartGet('content').should('not.exist');
    });

    it('should toggle display of popover content when the target is clicked', () => {
      cyMountWithProviders(
        <Popover>
          <Popover.Target testId="button">
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content">hello</Popover.Content>
        </Popover>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist').and('be.visible');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });

    it('should close the popover, when clicking outside of it', () => {
      cyMountWithProviders(
        <Popover>
          <Popover.Target testId="button">
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content">hello</Popover.Content>
        </Popover>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist').and('be.visible');
      cy.get('body').click(150, 180);
      cySmartGet('content').should('not.exist');
    });
  });

  context('Controlled API', () => {
    it('should not toggle visibility of the popover content, when not wired up correctly', () => {
      cyMountWithProviders(
        <Popover visible>
          <Popover.Target testId="button">
            <button type="button">moo</button>
          </Popover.Target>
          <Popover.Content testId="content">hello</Popover.Content>
        </Popover>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('exist');
      cySmartGet('button').click();
      cySmartGet('content').should('still.exist');
    });

    it('should toggle visibility of the popover content, when wired up correctly', () => {
      cyMountWithProviders(<PopoverWithState />, { useAllProviders: true });
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist').and('be.visible');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });

    it('should keep controlled popovers open, when clicking outside', () => {
      cyMountWithProviders(
        <>
          <Popover visible>
            <Popover.Target testId="controlledButton">
              <button type="button">controlled</button>
            </Popover.Target>
            <Popover.Content testId="controlledContent">
              controlled
            </Popover.Content>
          </Popover>

          <Popover>
            <Popover.Target testId="uncontrolledButton">
              <button type="button">moo</button>
            </Popover.Target>
            <Popover.Content testId="uncontrolledContent">
              hello
            </Popover.Content>
          </Popover>
        </>,
        { useAllProviders: true },
      );

      cySmartGet('controlledContent').should('exist');
      cySmartGet('uncontrolledButton').click();
      cySmartGet('uncontrolledContent').should('exist').and('be.visible');
      cySmartGet('controlledContent').should('exist');
      cy.get('body').click(150, 180);
      cySmartGet('uncontrolledContent').should('not.exist');
      cySmartGet('controlledContent').should('exist');
    });
  });
});
