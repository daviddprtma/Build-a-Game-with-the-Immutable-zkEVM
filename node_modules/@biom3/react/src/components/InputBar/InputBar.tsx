import { ClassNames } from '@emotion/react';
import {
  Children,
  cloneElement,
  ReactElement,
  ReactNode,
  Ref,
  useId,
} from 'react';
import merge from 'ts-deepmerge';

import { useForwardLocalDomRef, useResizeObserver } from '../../hooks';
import {
  InputTextAlign,
  StandardInputComponentWithProps,
} from '../../types/input';
import { MakeResponsive } from '../../types/shared';
import { isChildSubcomponent } from '../../utils';
import { Box } from '../Box';
import { Checkbox } from '../Checkbox';
import { MenuItem } from '../MenuItem';
import { MenuItemCaption } from '../MenuItem/MenuItemCaption';
import { MenuItemFramedIcon } from '../MenuItem/MenuItemFramedIcon';
import { MenuItemFramedImage } from '../MenuItem/MenuItemFramedImage';
import { MenuItemFramedLogo } from '../MenuItem/MenuItemFramedLogo';
import { MenuItemIcon } from '../MenuItem/MenuItemIcon';
import { MenuItemLabel } from '../MenuItem/MenuItemLabel';
import { MenuItemSize } from '../MenuItem/shared';
import { baseStyles as baseMenuItemStyles } from '../MenuItem/styles';
import { Radio } from '../Radio/Radio';
import { Toggle } from '../Toggle';

export type InputBarProps = Omit<
  StandardInputComponentWithProps<
    'input',
    {
      inputRef?: Ref<HTMLInputElement>;
      emphasized?: boolean;
      children: ReactNode;
      inputType?: 'checkbox' | 'radio' | 'toggle';
      textAlign?: InputTextAlign;
    }
  >,
  'size' | 'type'
> & { size?: MakeResponsive<MenuItemSize> };

export function InputBar<RC extends ReactElement | undefined = undefined>({
  children,
  checked,
  size,
  emphasized,
  disabled,
  id: idProp,
  inputType = 'toggle',
  domRef = { current: null },
  inputRef = { current: null },
  onChange,
  testId,
  defaultChecked,
  sx = {},
  textAlign,
  rc,
  ...inputProps
}: RC extends undefined ? InputBarProps : InputBarProps & { rc: RC }) {
  const fallbackId = useId();
  const id = idProp || fallbackId;
  const localRef = useForwardLocalDomRef(domRef);
  const localInputRef = useForwardLocalDomRef(inputRef);
  const { width, height } = useResizeObserver(localRef);

  const inputStyles = {
    position: 'absolute',
    width: '100%',
    height: '100%',

    '& .actualInput': {
      width: `${width}px`,
      height: `${height}px`,
      zIndex: 1,
    },

    '& .toggleContainer, & .checkContainer, & .radioContainer': {
      position: 'absolute',
      right: 'base.spacing.x4',
      top: '50%',
      translate: '0 -50%',
    },
  };

  const allInputProps = {
    ...inputProps,
    id,
    testId: `${testId}__biomeInput`,
    onChange,
    defaultChecked,
    checked,
    disabled,
    sx: inputStyles,
    inputRef: localInputRef,
  };

  return (
    <ClassNames>
      {({ cx }) => (
        <Box
          rc={rc}
          sx={merge(
            {
              position: 'relative',
              d: 'flex',
              width: '100%',

              '&:has(.actualInput:checked) .menuItem': {
                ...baseMenuItemStyles['&.selected'],
              },

              '&:not(.disabled):has(.actualInput:checked):hover .menuItem': {
                ...baseMenuItemStyles['&.selected:not(article).hover'],
              },

              '&:not(.disabled):hover .menuItem': {
                ...baseMenuItemStyles['&:not(article).hover'],
              },
            },
            sx,
          )}
          testId={testId}
          className={cx({ disabled })}
          domRef={localRef}
        >
          {inputType === 'toggle' && <Toggle {...allInputProps} />}
          {inputType === 'checkbox' && <Checkbox {...allInputProps} />}
          {inputType === 'radio' && <Radio {...allInputProps} />}

          <MenuItem
            className="menuItem"
            size={size}
            emphasized={emphasized}
            textAlign={textAlign}
            testId={`${testId}__menuItem`}
            sx={{
              pr:
                inputType === 'toggle'
                  ? 'base.spacing.x15'
                  : inputType === 'checkbox'
                  ? 'base.spacing.x9'
                  : 'base.spacing.x9',
            }}
          >
            {Children.map(children, child => {
              if (isChildSubcomponent(child, MenuItemLabel)) {
                return cloneElement(child, {
                  htmlFor: id,
                  rc: <label />,
                });
              }
              return child;
            })}
          </MenuItem>
        </Box>
      )}
    </ClassNames>
  );
}

InputBar.displayName = 'InputBar';

InputBar.Icon = MenuItemIcon;
InputBar.FramedIcon = MenuItemFramedIcon;
InputBar.FramedImage = MenuItemFramedImage;
InputBar.FramedLogo = MenuItemFramedLogo;
InputBar.Label = MenuItemLabel;
InputBar.Caption = MenuItemCaption;
