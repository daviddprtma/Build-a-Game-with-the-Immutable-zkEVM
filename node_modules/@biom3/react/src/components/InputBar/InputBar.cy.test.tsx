import {
  designTokens,
  onLightBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';
import { useState } from 'react';

import { DUMMY_RASTER_IMAGE_URL, hexToRgbString } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Icon } from '../Icon';
import { InputBar } from './InputBar';

const TEST_FIXTURE = (
  <InputBar testId="moo">
    <InputBar.Icon icon="Discord" />
    <InputBar.Label testId="label">moo cow</InputBar.Label>
  </InputBar>
);

describe('<InputBar />', () => {
  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <InputBar domRef={domRefStub} testId="moo">
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
      innerHTML: Cypress.sinon.match('moo cow'),
    });
  });

  it('should correctly forward the inputRef', () => {
    const inputRef = cy.stub().as('inputRef');
    cyMountWithProviders(
      <InputBar inputRef={inputRef} testId="moo">
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('@inputRef').should('have.been.calledWithMatch', {
      nodeName: 'INPUT',
      type: 'checkbox',
    });
  });

  it(`should correctly render a <div> tag, by default, but allow the root note to be customised`, () => {
    cyMountWithProviders(TEST_FIXTURE);
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(
      <InputBar testId="moo" rc={<section />}>
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should not render anything but subcomponent children', () => {
    cyMountWithProviders(
      <InputBar>
        <div data-testid="not-a-subcomponent">some other text</div>
      </InputBar>,
    );
    cySmartGet('not-a-subcomponent').should('exist');

    cyMountWithProviders(
      <InputBar>
        <>how now brown cow</>
      </InputBar>,
    );
    cy.contains('how now brown cow').should('exist');

    cyMountWithProviders(
      <InputBar>
        <Icon icon="Discord" testId="moo" />
      </InputBar>,
    );
    cySmartGet('moo').should('exist');

    cyMountWithProviders(
      <InputBar>
        <InputBar.Label testId="moo">moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo').should('exist');
  });

  it('should "emphasize" the menuItem, when neccissary', () => {
    cyMountWithProviders(
      <InputBar testId="moo" emphasized>
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );
  });

  it('should not use "checked" styles, by default', () => {
    cyMountWithProviders(
      <InputBar testId="moo">
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      'rgba(0, 0, 0, 0)',
    );
    cySmartGet('moo__menuItem').should('have.css', 'box-shadow', 'none');
  });

  it('should indicate "checked" state via some MenuItem styles, when neccissary', () => {
    cyMountWithProviders(
      <InputBar testId="moo" checked>
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo__menuItem')
      .should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onLightBase },
          'base.color.translucent.emphasis.200',
        ),
      )
      .and('have.css', 'border-width', '2px')
      .and(
        'have.css',
        'border-color',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.1000',
          ),
        ),
      );
  });

  it('should not show hover FX or input checks when disabled', () => {
    cyMountWithProviders(
      <InputBar testId="moo" disabled>
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );

    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      'rgba(0, 0, 0, 0)',
    );
    cySmartGet('moo__menuItem').should('have.css', 'box-shadow', 'none');

    cySmartGet('moo__biomeInput__input').realHover();

    cySmartGet('moo__menuItem')
      .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
      .and('have.css', 'box-shadow', `none`);
  });

  it(`should set InputBar.Label to be 'label' node type, and assign the right id`, () => {
    cyMountWithProviders(
      <InputBar testId="moo" inputType="toggle" id="moo-cow">
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );

    cySmartGet('moo__biomeInput__input').should('have.attr', 'id', 'moo-cow');
    cySmartGet('moo__menuItem__label').its('0.nodeName').should('eq', 'LABEL');
    cySmartGet('moo__menuItem__label').should('have.attr', 'for', 'moo-cow');
  });

  it('should "emphasize" the InputBar, when neccissary', () => {
    cyMountWithProviders(
      <InputBar testId="moo" emphasized>
        <InputBar.Label>moo cow</InputBar.Label>
      </InputBar>,
    );
    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );
  });

  it('should render the menuItem in "medium" sizing by default', () => {
    cyMountWithProviders(
      <InputBar testId="moo">
        <InputBar.Icon icon="Discord" />
      </InputBar>,
    );

    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '22px');
  });

  it('should render the menuItem in "small" sizing, when neccissary', () => {
    cyMountWithProviders(
      <InputBar testId="moo" size="small">
        <InputBar.Icon icon="Discord" />
      </InputBar>,
    );

    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '10px');
  });

  it('should responsively change the size of the menuItem, when neccissary', () => {
    cy.viewport(onLightBase.breakpoint.small - 10, 200);
    cyMountWithProviders(
      <InputBar testId="moo" size={['small', null, 'medium']}>
        <InputBar.Icon icon="Discord" />
      </InputBar>,
    );

    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '10px');

    cy.viewport(onLightBase.breakpoint.medium, 200);

    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '22px');
  });

  context('Input types', () => {
    context('Toggle', () => {
      it('Should correctly render out toggle component', () => {
        cyMountWithProviders(
          <InputBar testId="moo" inputType="toggle" checked>
            <InputBar.Label>moo cow</InputBar.Label>
          </InputBar>,
        );
        cySmartGet('moo__biomeInput__input').should(
          'have.attr',
          'type',
          'checkbox',
        );
        cySmartGet('moo__biomeInput__input').should('have.attr', 'checked');
      });

      context('Uncontrolled', () => {
        it('should start off checked, when neccissary', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="toggle" defaultChecked>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should correctly toggle between checked and unchecked states', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="toggle">
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should still let the parent tap into input state changes', () => {
          const onChangeStub = cy.stub().as('onChangeStub');
          cyMountWithProviders(
            <InputBar testId="moo" inputType="toggle" onChange={onChangeStub}>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );

          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
            target: { checked: true },
          });
        });
      });

      context('Controlled', () => {
        it('should not change the checked state, when clicked - but not wired up correctly', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="toggle" checked>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );

          cySmartGet('moo__biomeInput__input').should('be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should change the checked state, when clicked and wired up correctly', () => {
          function ControlledFixture() {
            const [checked, setChecked] = useState(false);
            return (
              <InputBar
                testId="moo"
                inputType="toggle"
                checked={checked}
                onChange={ev => setChecked(ev.target.checked)}
              >
                <InputBar.Label>moo cow</InputBar.Label>
              </InputBar>
            );
          }

          cyMountWithProviders(<ControlledFixture />);

          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });
      });
    });

    context('Checkbox', () => {
      it('Should correctly render out Checkbox component', () => {
        cyMountWithProviders(
          <InputBar testId="moo" inputType="checkbox" checked>
            <InputBar.Label>moo cow</InputBar.Label>
          </InputBar>,
        );
        cySmartGet('moo__biomeInput__input').should(
          'have.attr',
          'type',
          'checkbox',
        );
        cySmartGet('moo__biomeInput__input').should('have.attr', 'checked');
      });

      context('Uncontrolled', () => {
        it('should start off checked, when neccissary', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="checkbox" defaultChecked>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should correctly toggle between checked and unchecked states', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="checkbox">
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should still let the parent tap into input state changes', () => {
          const onChangeStub = cy.stub().as('onChangeStub');
          cyMountWithProviders(
            <InputBar testId="moo" inputType="checkbox" onChange={onChangeStub}>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );

          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
            target: { checked: true },
          });
        });
      });

      context('Controlled', () => {
        it('should not change the checked state, when clicked - but not wired up correctly', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="checkbox" checked>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );

          cySmartGet('moo__biomeInput__input').should('be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should change the checked state, when clicked and wired up correctly', () => {
          function ControlledFixture() {
            const [checked, setChecked] = useState(false);
            return (
              <InputBar
                testId="moo"
                inputType="checkbox"
                checked={checked}
                onChange={ev => setChecked(ev.target.checked)}
              >
                <InputBar.Label>moo cow</InputBar.Label>
              </InputBar>
            );
          }

          cyMountWithProviders(<ControlledFixture />);

          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });
      });
    });

    context('Radio', () => {
      it('Should correctly render out radio component', () => {
        cyMountWithProviders(
          <InputBar testId="moo" inputType="radio" checked>
            <InputBar.Label>moo cow</InputBar.Label>
          </InputBar>,
        );
        cySmartGet('moo__biomeInput__input').should(
          'have.attr',
          'type',
          'radio',
        );
        cySmartGet('moo__biomeInput__input').should('have.attr', 'checked');
      });

      context('Uncontrolled', () => {
        it('should start off checked, when neccissary', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="radio" defaultChecked>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should correctly toggle between checked and unchecked states', () => {
          cyMountWithProviders(
            <InputBar testId="moo" inputType="radio">
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );
          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });

        it('should still let the parent tap into input state changes', () => {
          const onChangeStub = cy.stub().as('onChangeStub');
          cyMountWithProviders(
            <InputBar testId="moo" inputType="radio" onChange={onChangeStub}>
              <InputBar.Label>moo cow</InputBar.Label>
            </InputBar>,
          );

          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
            target: { checked: true },
          });
        });
      });

      context('Controlled', () => {
        it('should change the checked state, when clicked and wired up correctly', () => {
          function ControlledFixture() {
            const [checked, setChecked] = useState(false);
            return (
              <InputBar
                testId="moo"
                inputType="radio"
                checked={checked}
                onChange={ev => setChecked(ev.target.checked)}
              >
                <InputBar.Label>moo cow</InputBar.Label>
              </InputBar>
            );
          }

          cyMountWithProviders(<ControlledFixture />);

          cySmartGet('moo__biomeInput__input').should('not.be.checked');
          cySmartGet('moo__biomeInput__input').click();
          cySmartGet('moo__biomeInput__input').should('be.checked');
        });
      });
    });
  });

  context('Subcomponents', () => {
    it('all child components should accept sx styles', () => {
      cyMountWithProviders(
        <InputBar testId="moo" inputType="radio" sx={{ bg: 'gold' }}>
          <InputBar.Label sx={{ bg: 'gold' }} testId="label">
            moo cow
          </InputBar.Label>
          <InputBar.Caption sx={{ bg: 'gold' }} testId="caption">
            moo cow
          </InputBar.Caption>
          <InputBar.Icon icon="AirDrop" sx={{ bg: 'gold' }} testId="icon" />
        </InputBar>,
      );

      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('label').should('have.backgroundColor', 'gold');
      cySmartGet('caption').should('have.backgroundColor', 'gold');
      cySmartGet('icon').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <InputBar inputType="radio">
          <InputBar.FramedIcon
            icon="AirDrop"
            sx={{ bg: 'gold' }}
            testId="framedIcon"
          />
        </InputBar>,
      );
      cySmartGet('framedIcon').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <InputBar inputType="radio">
          <InputBar.FramedLogo
            logo="MagicSymbol"
            sx={{ bg: 'gold' }}
            testId="framedLogo"
          />
        </InputBar>,
      );
      cySmartGet('framedLogo').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <InputBar inputType="radio">
          <InputBar.FramedImage
            imageUrl={DUMMY_RASTER_IMAGE_URL}
            sx={{ bg: 'gold' }}
            testId="framedImage"
          />
        </InputBar>,
      );
      cySmartGet('framedImage').should('have.backgroundColor', 'gold');
    });

    it(`should correctly forward domRef for all subcomponents`, () => {
      cyMountWithProviders(
        <InputBar.FramedLogo
          logo="PassportSymbol"
          domRef={cy.stub().as('framedLogoRef')}
        />,
      );
      cySmartGet('@framedLogoRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <InputBar.Icon icon="Cart" domRef={cy.stub().as('iconRef')} />,
      );
      cySmartGet('@iconRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });

      cyMountWithProviders(
        <InputBar.FramedIcon
          icon="Cart"
          domRef={cy.stub().as('framedIconRef')}
        />,
      );
      cySmartGet('@framedIconRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <InputBar.FramedImage
          imageUrl="https://placekitten.com/200/150"
          domRef={cy.stub().as('framedImageRef')}
        />,
      );
      cySmartGet('@framedImageRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <InputBar.Label domRef={cy.stub().as('labelRef')}>
          some text
        </InputBar.Label>,
      );
      cySmartGet('@labelRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <InputBar.Caption domRef={cy.stub().as('captionRef')}>
          some text
        </InputBar.Caption>,
      );
      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
    });
  });
});
