import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { keyframes } from '@emotion/react';

import { BiomeTheme } from '../../types/theme';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Box } from './Box';

describe('<Box />', () => {
  it('should have correct displayName', () => {
    expect(Box.displayName).to.eq('Box');
  });
  it('should render a box with flex: 0', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          flex: 0,
        }}
      >
        dsads
      </Box>,
    );

    cyGetByTestId('box').should('have.css', 'flex', '0 1 0%');
  });
  it('should render a box with some padding', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          p: 'base.spacing.x6',
        }}
      >
        dsads
      </Box>,
    );

    cyGetByTestId('box').should('have.css', 'padding', '24px');
  });

  it('should correctly render nested sx styles', () => {
    cyMountWithProviders(
      <Box
        testId="parent"
        sx={{
          p: 'base.spacing.x6',
          '&:hover': {
            c: 'blue',
          },
          '& > article': {
            c: 'red',
          },
        }}
      >
        parent content
        <Box rc={<article />} testId="child">
          child content
        </Box>
      </Box>,
    );

    cyGetByTestId('parent').should('have.css', 'padding', '24px');
    cySmartGet('child').should('have.color', 'red');
    cySmartGet('parent').realHover();
    cySmartGet('parent').should('have.color', 'blue');
  });

  it('should render a box with a backgroundColor', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          bgc: 'base.color.accent.1',
        }}
      >
        dsads
      </Box>,
    );

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.accent.1'),
    );
  });

  it('should allow consumer to use a custom css color', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          bgc: 'dodgerblue',
        }}
      >
        dsads
      </Box>,
    );

    cyGetByTestId('box').should('have.backgroundColor', 'dodgerblue');
  });

  it('should render text gradient coloring, when neccissary', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          p: '20vw',
          c: 'base.gradient.1',
        }}
      >
        How now brown cow? The quick brown fox jumped over the lazy dog.
      </Box>,
    );

    cyGetByTestId('box')
      .should('have.css', 'backgroundImage')
      .and('match', /linear-gradient/);
    cyGetByTestId('box').should(
      'have.css',
      '-webkit-text-fill-color',
      'rgba(0, 0, 0, 0)',
    );
    cyGetByTestId('box').should('have.css', '-webkit-background-clip', 'text');
  });

  it('should render background gradients, when neccissary', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          width: '100vw',
          height: '100vh',
          bg: 'base.gradient.1',
        }}
      />,
    );

    cyGetByTestId('box')
      .should('have.css', 'backgroundImage')
      .and('match', /linear-gradient/);
    cyGetByTestId('box').should(
      'have.css',
      'background-blend-mode',
      smartPickTokenValue(designTokens, 'base.gradient.1.blendMode'),
    );

    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          width: '100vw',
          height: '100vh',
          bg: 'base.gradient.2',
        }}
      />,
    );

    cyGetByTestId('box')
      .should('have.css', 'backgroundImage')
      .and('match', /radial-gradient/);
    cyGetByTestId('box').should(
      'have.css',
      'background-blend-mode',
      smartPickTokenValue(designTokens, 'base.gradient.2.blendMode'),
    );

    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          width: '100vw',
          height: '100vh',
          bg: 'base.gradient.3',
        }}
      />,
    );

    cyGetByTestId('box')
      .should('have.css', 'backgroundImage')
      .and('match', /radial-gradient/);
    cyGetByTestId('box').should(
      'have.css',
      'background-blend-mode',
      smartPickTokenValue(designTokens, 'base.gradient.3.blendMode'),
    );
  });

  it('should render background-image gradients, when neccissary', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          width: '100vw',
          height: '100vh',
          bgi: 'base.gradient.1',
        }}
      />,
    );

    cyGetByTestId('box')
      .should('have.css', 'backgroundImage')
      .and('match', /linear-gradient/);
  });

  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      >
        dsads
      </Box>,
    );

    cyGetByTestId('box').should('have.css', 'padding', '8px 16px');
  });

  it('should render <Box /> as a <section> tag', () => {
    cyMountWithProviders(
      <Box testId="box" rc={<section />}>
        dsads
      </Box>,
    );

    cyGetByTestId('box').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <Box testId="box" rc={<div ref={ref} />}>
        dsads
      </Box>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
      innerHTML: Cypress.sinon.match('dsads'),
    });
  });

  it('should correctly render 3 level nested sx styles', () => {
    cy.viewport(300, 200);
    cyMountWithProviders(
      <Box
        testId="moo"
        sx={{
          border: '2px dashed gold',

          '&::before': {
            content: "''",
            width: '40px',
            height: '40px',
            display: 'flex',
            background: 'gold',
          },

          '@media (min-width: 420px)': {
            '&::before': {
              background: 'red',
            },
          },
        }}
      />,
    );
    cySmartGet('moo').then($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal('rgb(255, 215, 0)');
      });
    });

    cy.viewport(430, 200);
    cySmartGet('moo').then($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal('rgb(255, 0, 0)');
      });
    });
  });

  it('should correctly render array responsive styles for descendent selectors', () => {
    cy.viewport(200, 200);
    cyMountWithProviders(
      <Box
        testId="moo"
        sx={{
          border: '2px dashed gold',

          '&::before': {
            content: "''",
            width: '40px',
            height: '40px',
            display: 'flex',
            background: ['gold', 'red'],
          },
        }}
      />,
    );
    cySmartGet('moo').then($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal('rgb(255, 215, 0)');
      });
    });

    cy.viewport(designTokens.base.breakpoint.small, 200);
    cySmartGet('moo').then($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal('rgb(255, 0, 0)');
      });
    });
  });

  it('should correctly render @emotion/react keyframe animations', () => {
    const fadeIn = keyframes`
      0% {
        opacity: 0;
        scale: 0.95;
      }
      100% {
        opacity: 1;
        scale: 1;
      }
    `;

    cyMountWithProviders(
      <Box
        sx={{
          border: '2px dashed gold',

          '& div': {
            content: "''",
            width: '40px',
            height: '40px',
            display: 'flex',
            background: 'gold',
            animationName: fadeIn,
            animationDuration: 'base.motion.normal.fast.cssDuration',
            animationIterationCount: 'infinite',
          },
        }}
      >
        <Box testId="moo" />
      </Box>,
    );

    cySmartGet('moo')
      .should('have.css', 'animation-name')
      .and('match', /animation-/);
  });

  it('should correctly apply responsive backgroundColor', () => {
    cy.viewport(base.breakpoint.small - 100, 200);
    cyMountWithProviders(
      <Box
        testId="box"
        sx={{
          w: '80vw',
          h: '100vh',
          bg: [
            'base.color.brand.1',
            'base.color.brand.2',
            'base.color.brand.3',
            'base.color.brand.4',
            'base.color.brand.5',
            'base.color.brand.6',
          ],
        }}
      />,
    );

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.1'),
    );

    cy.viewport(base.breakpoint.small + 1, 200);

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.2'),
    );

    cy.viewport(base.breakpoint.medium + 1, 200);

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.3'),
    );

    cy.viewport(base.breakpoint.large + 1, 200);

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.4'),
    );

    cy.viewport(base.breakpoint.xLarge + 1, 200);

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.5'),
    );

    cy.viewport(base.breakpoint.xxLarge + 1, 200);

    cyGetByTestId('box').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.6'),
    );
  });
});
