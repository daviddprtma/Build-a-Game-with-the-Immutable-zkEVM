import NextLink from 'next/link';
import {
  createMemoryRouter,
  Link as RrLink,
  RouterProvider,
} from 'react-router-dom';

import { MockNextRouter } from '../../../mocks';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { BaseClickable } from './BaseClickable';

describe(`<BaseClickable />`, () => {
  it(`should have correct displayName`, () => {
    expect(BaseClickable.displayName).to.eq('BaseClickable');
  });
  it(`should allow rendering a next/link, when neccissary`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <BaseClickable testId="moo" rc={<NextLink href="/moo/cow" />}>
          moo
        </BaseClickable>
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it(`should allow rendering a next/link href object, when neccissary`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <BaseClickable
          testId="moo"
          rc={<NextLink href={{ pathname: '/moo/cow' }} />}
        >
          moo
        </BaseClickable>
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it(`should allow rendering a react-router-dom/link, when neccissary`, () => {
    const router = createMemoryRouter(
      [
        {
          path: '*',
          element: (
            <BaseClickable testId="moo" rc={<RrLink to="/moo" />}>
              moo
            </BaseClickable>
          ),
        },
      ],
      {
        initialEntries: ['/'],
      },
    );
    const onRouteChange = cy.stub().as('onRouteChange');
    router.subscribe(onRouteChange);
    cyMountWithProviders(<RouterProvider router={router} />);

    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cySmartGet('@onRouteChange').should('have.been.calledWithMatch', {
      historyAction: 'PUSH',
      location: {
        pathname: '/moo',
      },
    });
  });

  it('should allow disabled attr, when rendering as a button', () => {
    cyMountWithProviders(
      <BaseClickable testId="moo" disabled>
        moo
      </BaseClickable>,
    );
    cySmartGet('moo').should('have.attr', 'disabled');
  });

  it('should render as a button by default', () => {
    cyMountWithProviders(<BaseClickable testId="moo">moo</BaseClickable>);
    cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
  });

  it('should render a classname, when neccissary', () => {
    cyMountWithProviders(
      <BaseClickable testId="moo" className="moo">
        moo
      </BaseClickable>,
    );
    cySmartGet('moo').should('have.class', 'moo');
  });

  it('should support the "type" property, when neccissary', () => {
    cyMountWithProviders(
      <BaseClickable testId="moo" type="submit">
        moo
      </BaseClickable>,
    );
    cySmartGet('moo').should('have.attr', 'type', 'submit');
  });
});
