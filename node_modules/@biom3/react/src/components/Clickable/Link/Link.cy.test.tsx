/* eslint-disable jsx-a11y/anchor-is-valid */
import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { Ref } from 'react';

import { LinkSize, LinkVariant } from '../../../types/clickable';
import { hexToRgbString } from '../../../utils/colorHelpers';
import {
  arrayOfAll,
  cyMountWithProviders,
  cySmartGet,
} from '../../../utils/testHelpers';
import { Caption, Heading } from '../../Text';
import { Link } from './Link';

describe('<Link />', () => {
  it('should have correct displayName', () => {
    expect(Link.displayName).to.eq('Link');
  });
  it('should render correctly with plain text', () => {
    cyMountWithProviders(<Link testId="moo">Some link text</Link>);
    cySmartGet('moo__text').should('have.text', 'Some link text');
    cySmartGet('moo__text__icon').should('not.exist');
    cySmartGet('moo__text').should(
      'have.color',
      smartPickTokenValue(designTokens, 'base.color.accent.1'),
    );
    cySmartGet('moo__text')
      .should('have.css', 'font-family')
      .and('match', /Roboto, sans-serif/);
  });

  it('should render correctly with text and an icon', () => {
    cyMountWithProviders(
      <Link testId="moo">
        <Link.Icon icon="ArrowForward" />
        Some link text
      </Link>,
    );
    cySmartGet('moo__text').should('have.text', 'Some link text');
    cySmartGet('moo__text__icon').should('exist');
    cySmartGet('moo__text__icon').should(
      'have.css',
      'fill',
      hexToRgbString(smartPickTokenValue(designTokens, 'base.color.accent.1')),
    );
  });

  it('should render all sizes correctly', () => {
    const arrayOfAllLinkSizes = arrayOfAll<LinkSize>();
    const allLinkSizes = arrayOfAllLinkSizes([
      'xxSmall',
      'xSmall',
      'small',
      'medium',
      'large',
    ]);

    const linkTextSizes = {
      xxSmall: '10px',
      xSmall: '12px',
      small: '14px',
      medium: '16px',
      large: '20px',
    };
    const linkIconSizeMatch = {
      xxSmall: /11px/,
      xSmall: /13\./,
      small: /15\./,
      medium: /17\./,
      large: /22px/,
    };

    allLinkSizes.forEach(size => {
      cyMountWithProviders(
        <Link testId="moo" size={size}>
          <Link.Icon icon="ArrowForward" />
          hello there
        </Link>,
      );
      cySmartGet('moo__text').should(
        'have.css',
        'font-size',
        linkTextSizes[size],
      );

      cySmartGet('moo__text__icon')
        .should('have.css', 'width')
        .and('match', linkIconSizeMatch[size]);
    });
  });

  it('should render all variants correctly', () => {
    const arrayOfAllLinkVariants = arrayOfAll<LinkVariant>();
    const allLinkVariants = arrayOfAllLinkVariants(['primary', 'secondary']);
    const linkVariantStyles = {
      primary: {
        textColor: 'base.color.text.link.primary',
        iconColor: 'base.color.text.link.primary',
      },
      secondary: {
        textColor: 'base.color.text.link.secondary',
        iconColor: 'base.color.text.link.secondary',
      },
    };

    allLinkVariants.forEach(variant => {
      cyMountWithProviders(
        <Link testId="moo" variant={variant}>
          <Link.Icon icon="ArrowForward" />
          text
        </Link>,
      );

      cySmartGet('moo__text').should(
        'have.color',
        smartPickTokenValue(designTokens, linkVariantStyles[variant].textColor),
      );
      cySmartGet('moo__text__icon').should(
        'have.css',
        'fill',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            linkVariantStyles[variant].iconColor,
          ),
        ),
      );
    });
  });

  it('should render regular font-weight by default', () => {
    cyMountWithProviders(<Link testId="moo">Some link text</Link>);
    cySmartGet('moo__text').should('have.css', 'font-weight', '400');
  });

  it('should allow bold text to be used, where neccissary', () => {
    cyMountWithProviders(
      <Link testId="moo" weight="bold">
        Some link text
      </Link>,
    );
    cySmartGet('moo__text').should('have.css', 'font-weight', '500');
  });

  it('should render responsive sizes correctly', () => {
    cy.viewport(base.breakpoint.small - 100, 200);
    cyMountWithProviders(
      <Link testId="moo" size={['xxSmall', 'xSmall', 'small', 'medium']}>
        Some link text
      </Link>,
    );

    cySmartGet('moo__text').should(
      'have.css',
      'font-size',
      smartPickTokenValue(
        designTokens,
        `base.text.body.xxSmall.regular.fontSize`,
      ),
    );

    cy.viewport(base.breakpoint.medium - 100, 200);

    cySmartGet('moo__text').should(
      'have.css',
      'font-size',
      smartPickTokenValue(
        designTokens,
        `base.text.body.xSmall.regular.fontSize`,
      ),
    );

    cy.viewport(base.breakpoint.large - 100, 200);

    cySmartGet('moo__text').should(
      'have.css',
      'font-size',
      smartPickTokenValue(
        designTokens,
        `base.text.body.small.regular.fontSize`,
      ),
    );

    cy.viewport(base.breakpoint.xLarge - 100, 200);

    cySmartGet('moo__text').should(
      'have.css',
      'font-size',
      smartPickTokenValue(
        designTokens,
        `base.text.body.medium.regular.fontSize`,
      ),
    );
  });

  it('should render responsive weights correctly', () => {
    cy.viewport(base.breakpoint.small - 100, 200);
    cyMountWithProviders(
      <Link testId="moo" weight={['regular', 'bold']}>
        Some link text
      </Link>,
    );

    cySmartGet('moo__text').should(
      'have.css',
      'font-weight',
      `${smartPickTokenValue(
        designTokens,
        'base.text.body.medium.regular.fontWeight',
      )}`,
    );

    cy.viewport(base.breakpoint.medium - 100, 200);

    cySmartGet('moo__text').should(
      'have.css',
      'font-weight',
      `${smartPickTokenValue(
        designTokens,
        'base.text.body.medium.bold.fontWeight',
      )}`,
    );
  });

  it('should not render anything that is not a simple primitive (string, number, bool), or a subcomponent', () => {
    cyMountWithProviders(
      <Link testId="moo">
        Some link text
        <div data-testid="moo__div">Some div</div>
        <Caption testId="moo__caption">mooo</Caption>
      </Link>,
    );
    cySmartGet('moo__div').should('not.exist');
    cySmartGet('moo__caption').should('not.exist');
  });

  it('should allow custom sx styles to be passed in', () => {
    cyMountWithProviders(
      <Link testId="moo" sx={{ m: '20px' }}>
        Some link text
      </Link>,
    );
    cySmartGet('moo').should('have.css', 'margin', '20px');
  });

  it('should allow custom sx styles to be passed into Link.Icon', () => {
    cyMountWithProviders(
      <Link>
        <Link.Icon icon="ArrowForward" sx={{ m: '20px' }} testId="moo" />
        Some link text
      </Link>,
    );
    cySmartGet('moo').should('have.css', 'margin', '20px');
  });

  it('should allow user to render icon sub-component with a "bold" icon variant', () => {
    cyMountWithProviders(
      <Link>
        <Link.Icon icon="ArrowForward" iconVariant="bold" testId="moo" />
        Some link text
      </Link>,
    );
    cySmartGet('moo').should('have.attr', 'data-variant', 'bold');
  });

  it('should allow parent to customise link text color', () => {
    cyMountWithProviders(
      <Link sx={{ color: 'base.color.accent.4' }} testId="moo">
        Some link text
      </Link>,
    );
    cySmartGet('moo__text').should(
      'have.color',
      smartPickTokenValue(designTokens, 'base.color.accent.4'),
    );
  });

  it('should not show hover fx, when the button is disabled', () => {
    cyMountWithProviders(
      <Link disabled testId="moo">
        link Text
      </Link>,
    );
    cySmartGet('moo__text').should('have.css', 'cursor', 'default');
    cySmartGet('moo__text').realHover();
    cySmartGet('moo__text').should(
      'have.color',
      smartPickTokenValue(designTokens, 'base.color.text.link.primary'),
    );
  });

  it('should not show click fx, when the button is disabled', () => {
    cyMountWithProviders(
      <Link disabled testId="moo">
        link Text
      </Link>,
    );
    cySmartGet('moo__text').should('have.css', 'cursor', 'default');
    cySmartGet('moo__text').realMouseDown();
    cySmartGet('moo__text').should(
      'have.color',
      smartPickTokenValue(designTokens, 'base.color.text.link.primary'),
    );
  });

  it('should pass through domRef correctly', () => {
    const ref = cy.stub().as('refStub') as unknown as Ref<SVGSVGElement>;

    cyMountWithProviders(
      <Link>
        Button Text <Link.Icon testId="moo" domRef={ref} icon="AirDrop" />
      </Link>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'svg',
    });
  });

  it('should allow user to pass in rc prop', () => {
    cyMountWithProviders(<Link rc={<a />} testId="moo" />);
    cySmartGet('moo').its('0.nodeName').should('equal', 'A');
  });

  it('should allow user to pass in use prop', () => {
    cyMountWithProviders(
      <Link use={<Heading />} testId="moo">
        Some text
      </Link>,
    );
    cySmartGet('moo__text')
      .should('have.css', 'font-family')
      .and('match', /Suisse-Intl, sans-serif/);
    cySmartGet('moo__text').should('have.css', 'font-size', '28px');

    cyMountWithProviders(
      <Link use={<Caption />} testId="moo">
        Some text
      </Link>,
    );
    cySmartGet('moo__text')
      .should('have.css', 'font-family')
      .and('match', /Roboto, sans-serif/);
    cySmartGet('moo__text').should('have.css', 'font-size', '14px');
  });

  it('should still allow user to pass in size, even when they use an `rc` prop', () => {
    cyMountWithProviders(
      <Link rc={<a href="#" />} testId="moo" size="large">
        Some text
      </Link>,
    );
    cySmartGet('moo__text').should('have.css', 'font-size', '20px');
  });
});
