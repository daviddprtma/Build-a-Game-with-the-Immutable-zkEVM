import { BodySize, BodyWeight } from '@biom3/design-tokens';
import { Children, cloneElement, ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../../hooks';
import { LinkProps } from '../../../types/clickable';
import { cloneElementWithCssProp } from '../../../utils';
import { setDefaultSxTextColor } from '../../../utils/styleHelpers';
import { isChildSubcomponent } from '../../../utils/subcomponentHelpers';
import { hFlex } from '../../../utils/sxChunks';
import { Body } from '../../Text';
import { BaseClickable } from '../BaseClickable/BaseClickable';
import { LinkIcon } from './LinkIcon';
import { renderLinkVariantStyles } from './styles';

export const DEFAULT_LINK_SIZE = 'medium';
export const DEFAULT_LINK_WEIGHT = 'regular';

export function Link<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined = undefined,
>({
  variant = 'primary',
  sx = {},
  children,
  testId,
  rc = <button />,
  ...props
}: LinkProps<RC, Use>) {
  const { use, ...baseClickableProps } =
    'use' in props ? props : { ...props, use: undefined };

  const { size } = 'size' in props ? props : { size: DEFAULT_LINK_SIZE };
  const { weight } =
    'weight' in props ? props : { weight: DEFAULT_LINK_WEIGHT };

  const themeProps = useTheme();
  const allStyles = merge(
    setDefaultSxTextColor(sx, 'base.color.text.link.primary'),
    renderLinkVariantStyles(variant, themeProps),
    sx,
  );

  const textContent = useMemo(
    () =>
      cloneElementWithCssProp(
        use || <Body size={size as BodySize} weight={weight as BodyWeight} />,
        {
          testId: `${testId}__text`,
          className: 'inner',
          sx: {
            ...hFlex,
            color: 'inherit',
            alignItems: 'center',
            gap: '0.2em',
          },
          children: Children.map(children, child => {
            if (isChildSubcomponent(child, LinkIcon)) {
              // @NOTE: render sub-component children, with some special extra props
              return cloneElement(child, {
                size,
                variant,
                className: 'Link__icon',
                testId: child.props.testId
                  ? child.props.testId
                  : `${testId}__text__icon`,
                sx: merge(
                  {
                    width: '1.1em',
                  },
                  child.props.sx || {},
                ),
              });
            }
            if (typeof child !== 'object') {
              // Otherwise render simple children as Body text:
              return child;
            }

            return null;
          }),
        },
      ),
    [children, size, testId, use, variant, weight],
  );

  return (
    <BaseClickable
      {...baseClickableProps}
      sx={allStyles}
      rc={rc}
      testId={testId}
    >
      {textContent}
    </BaseClickable>
  );
}

Link.displayName = 'Link';
Link.Icon = LinkIcon;
