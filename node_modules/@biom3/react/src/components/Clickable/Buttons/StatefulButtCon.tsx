import { DistributiveOmit } from '@emotion/react';
import { ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../../hooks';
import { ButtConProps, IconVariant } from '../../../types';
import { BiomeTheme } from '../../../types/theme';
import { AllIconKeys } from '../../Icon';
import { ButtCon } from './ButtCon';

export type StatefulButtConState = 'initial' | 'loading' | 'success' | 'fatal';

export type StatefulButtConProps<
  RC extends ReactElement | undefined = undefined,
> = DistributiveOmit<ButtConProps<RC>, 'variant'> & {
  state?: StatefulButtConState;
};

const getButtConSx = ({ state }: { state: StatefulButtConState }) => {
  switch (state) {
    case 'success':
      return {
        bg: 'base.color.status.success.bright',
      };

    case 'fatal':
      return {
        bg: 'base.color.status.fatal.bright',
      };

    case 'initial':
    case 'loading':
    default:
      return {};
  }
};

const getIconSx = ({
  state,
  theme,
}: {
  state: StatefulButtConState;
  theme: BiomeTheme;
}) => {
  switch (state) {
    case 'success':
    case 'fatal':
      return {
        fill:
          theme.base.colorMode === 'lightOnDark'
            ? 'base.color.text.inverse.primary'
            : 'base.color.text.primary',
      };

    case 'initial':
    case 'loading':
    default:
      return {};
  }
};

export function StatefulButtCon<
  RC extends ReactElement | undefined = undefined,
>({
  state = 'initial',
  iconVariant = 'regular',
  sx = {},
  ...props
}: StatefulButtConProps<RC>) {
  const { icon } = 'icon' in props ? props : { icon: undefined };
  const theme = useTheme();
  const currentIcon: { icon: AllIconKeys | undefined; variant: IconVariant } =
    useMemo(() => {
      switch (state) {
        case 'loading':
          return { icon: 'Loading', variant: 'regular' };
        case 'success':
          return { icon: 'Tick', variant: 'bold' };
        case 'fatal':
          return { icon: 'Exclamation', variant: 'bold' };
        case 'initial':
        default:
          return { icon, variant: iconVariant };
      }
    }, [state, icon, iconVariant]);

  const buttConSx = merge(
    {
      transitionProperty: 'background, box-shadow',
      transitionDuration: ({ base }: BiomeTheme) =>
        `${base.motion.normal.gentle.cssDuration}, ${base.motion.normal.fast.cssDuration}`,
      transitionTimingFunction: ({ base }: BiomeTheme) =>
        `${base.motion.normal.gentle.cssEase}, ${base.motion.normal.fast.cssEase}`,
    },
    getButtConSx({ state }),
    sx,
  );
  const iconSx = getIconSx({ state, theme });
  return (
    <ButtCon
      {...props}
      variant="tertiary"
      sx={buttConSx}
      iconSx={iconSx}
      icon={currentIcon.icon}
      iconVariant={currentIcon.variant}
    />
  );
}

StatefulButtCon.displayName = 'StatefulButtCon';
