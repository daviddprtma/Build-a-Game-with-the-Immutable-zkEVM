import {
  base,
  designTokens,
  onDarkBase,
  onLightBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';
import NextLink from 'next/link';
import { Ref } from 'react';

import { MockNextRouter } from '../../../mocks';
import { hexToRgbString } from '../../../utils/colorHelpers';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { Box } from '../../Box';
import { Icon } from '../../Icon';
import { Button } from './Button';

// @TODO: these tests seem a little bit extraneous, this suite could
// probably use some cleanup / refactor work...
describe(`<Button />`, () => {
  it(`should have correct displayName`, () => {
    expect(Button.displayName).to.eq('Button');
  });
  it(`should correctly render a <button> tag, by default`, () => {
    cyMountWithProviders(<Button testId="moo">test</Button>);
    cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
  });

  it(`should render as an <a> when a href is passed in`, () => {
    cyMountWithProviders(
      <Button testId="moo" rc={<a href="#/" />}>
        <Icon icon="ArrowForward" />
      </Button>,
    );

    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
  });

  it(`should allow next/link component to be passed in as the 'as' prop`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <Button testId="moo" rc={<NextLink href="/moo/cow" />}>
          asdadsdsa asd asd
        </Button>
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it(`should allow next/link style href props`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <Button testId="moo" rc={<NextLink href={{ pathname: '/moo/cow' }} />}>
          <Icon icon="ArrowForward" />
        </Button>
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it('should allow href and onClick property to both be supplied and used', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <Button testId="moo" rc={<a onClick={onClickStub} href="#/moo/cow" />}>
        <Icon icon="ArrowForward" />
      </Button>,
    );
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow the use of HTMLButton attr props', () => {
    cyMountWithProviders(
      <Button testId="moo" rc={<a href="#/moo/cow" id="moo" />}>
        <Icon icon="ArrowForward" />
      </Button>,
    );
    cySmartGet('moo').should('have.attr', 'id', 'moo');
  });

  it('should allow href and onClick property to both be supplied and used with next/link', () => {
    const onPushStub = cy.stub().as('onPushStub');
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <Button
          testId="moo"
          rc={<NextLink href="/moo/cow" onClick={onClickStub} />}
        >
          some button text
        </Button>
      </MockNextRouter>,
    );
    cySmartGet('@onPushStub').should('not.have.been.calledOnce');
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onPushStub').should('have.been.calledOnce');
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should render a responsively sized button, when required', () => {
    cy.viewport(base.breakpoint.small - 10, 400);
    cyMountWithProviders(
      <Button
        variant="primary"
        testId="moo"
        size={['small', 'medium', 'large']}
      >
        Button Text
      </Button>,
    );
    cySmartGet('moo').should('have.css', 'padding-left', '16px');
    cy.viewport(base.breakpoint.small, 400);
    cySmartGet('moo').should('have.css', 'padding-left', '24px');
    cy.viewport(base.breakpoint.medium, 400);
    cySmartGet('moo').should('have.css', 'padding-left', '32px');
  });

  it('should render a large sized button, when required', () => {
    cyMountWithProviders(
      <Button variant="tertiary" testId="moo" size="large">
        Button Text
      </Button>,
    );
    cySmartGet('moo').should('have.css', 'padding-left', '32px');
  });

  it('should not show hover fx, when the button is disabled', () => {
    cyMountWithProviders(
      <Button disabled testId="moo">
        Button Text
      </Button>,
    );
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo').realHover();
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.1'),
    );
  });

  it('should not show click fx, when the button is disabled', () => {
    cyMountWithProviders(
      <Button disabled testId="moo">
        Button Text
      </Button>,
    );
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo').realMouseDown();
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.1'),
    );
  });

  it('should render a medium sized button, by default', () => {
    cyMountWithProviders(<Button testId="moo">Button Text</Button>);
    cySmartGet('moo').should('have.css', 'padding-left', '24px');
  });

  it('should render a small sized button, when required', () => {
    cyMountWithProviders(
      <Button testId="moo" size="small">
        Button Text
      </Button>,
    );
    cySmartGet('moo').should('have.css', 'padding-left', '16px');
  });

  context('Primary Variant', () => {
    it('should correctly indicate HOVER state', () => {
      cyMountWithProviders(
        <Button variant="primary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo')
        .should('have.css', 'background-color', 'rgba(0, 0, 0, 0)')
        .and('have.css', 'box-shadow', 'rgb(19, 19, 19) 0px 0px 0px 3px inset');
    });

    it('should correctly indicate PRESS state', () => {
      cyMountWithProviders(
        <Button variant="primary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
      cySmartGet('moo').realMouseDown();
      cySmartGet('moo')
        .should('have.css', 'background-color', 'rgba(0, 0, 0, 0)')
        .and('have.css', 'box-shadow', 'rgb(19, 19, 19) 0px 0px 0px 3px inset');
    });
  });

  context('Primary/inverse Variant', () => {
    context('light theme', () => {
      it('should correctly indicate HOVER state', () => {
        cyMountWithProviders(
          <Box sx={{ bg: 'black', p: '20px' }}>
            <Button variant="primary/inverse" testId="moo">
              Button Text
            </Button>
          </Box>,
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral.500'),
        );
        cySmartGet('moo').realHover();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          `rgb(255, 255, 255) 0px 0px 0px 3px inset`,
        );
      });

      it('should correctly indicate PRESS state', () => {
        cyMountWithProviders(
          <Box sx={{ bg: 'black', p: '20px' }}>
            <Button variant="primary/inverse" testId="moo">
              Button Text
            </Button>
          </Box>,
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(designTokens, 'base.color.neutral.500'),
        );
        cySmartGet('moo').realMouseDown();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          `rgb(255, 255, 255) 0px 0px 0px 3px inset`,
        );
      });
    });

    context('dark theme', () => {
      it('should correctly indicate HOVER state', () => {
        cyMountWithProviders(
          <Button variant="primary/inverse" testId="moo">
            Button Text
          </Button>,
          { theme: { base: onDarkBase } },
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            { base: onDarkBase },
            'base.color.translucent.inverse.1000',
          ),
        );
        cySmartGet('moo').realHover();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          `rgb(13, 13, 13) 0px 0px 0px 3px inset`,
        );
      });

      it('should correctly indicate PRESS state', () => {
        cyMountWithProviders(
          <Button variant="primary/inverse" testId="moo">
            Button Text
          </Button>,
          { theme: { base: onDarkBase } },
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            { base: onDarkBase },
            'base.color.translucent.inverse.1000',
          ),
        );
        cySmartGet('moo').realMouseDown();
        cySmartGet('moo').should(
          'have.css',
          'box-shadow',
          `rgb(13, 13, 13) 0px 0px 0px 3px inset`,
        );
      });
    });
  });

  context('Primary/Destructive Variant', () => {
    context('dark theme', () => {
      it('should correctly indicate HOVER state', () => {
        cyMountWithProviders(
          <Button variant="primary/destructive" testId="moo">
            <Button.Icon icon="Discord" />
            Button Text
          </Button>,
          { theme: { base: onDarkBase } },
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        );
        cySmartGet('moo').should(
          'have.color',
          smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
        );
        cySmartGet('moo__icon').should(
          'have.css',
          'fill',
          `${hexToRgbString(
            smartPickTokenValue(
              { base: onDarkBase },
              'base.color.text.primary',
            ),
          )}`,
        );
        cySmartGet('moo').realHover();
        cySmartGet('moo')
          .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
          .and(
            'have.css',
            'box-shadow',
            `${hexToRgbString(
              smartPickTokenValue(
                designTokens,
                'base.color.status.destructive.bright',
              ),
            )} 0px 0px 0px 3px inset`,
          );
        cySmartGet('moo').should(
          'have.color',
          smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
        );
        cySmartGet('moo__icon').should(
          'have.css',
          'fill',
          `${hexToRgbString(
            smartPickTokenValue(
              { base: onDarkBase },
              'base.color.text.primary',
            ),
          )}`,
        );
      });

      it('should correctly indicate PRESS state', () => {
        cyMountWithProviders(
          <Button variant="primary/destructive" testId="moo">
            Button Text
          </Button>,
          { theme: { base: onDarkBase } },
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        );
        cySmartGet('moo').realMouseDown();
        cySmartGet('moo')
          .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
          .and(
            'have.css',
            'box-shadow',
            `${hexToRgbString(
              smartPickTokenValue(
                designTokens,
                'base.color.status.destructive.bright',
              ),
            )} 0px 0px 0px 3px inset`,
          );
      });
    });

    context('light theme', () => {
      it('should correctly indicate HOVER state', () => {
        cyMountWithProviders(
          <Button variant="primary/destructive" testId="moo">
            <Button.Icon icon="Discord" />
            Button Text
          </Button>,
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        );
        cySmartGet('moo').should(
          'have.color',
          smartPickTokenValue(
            { base: onLightBase },
            'base.color.text.inverse.primary',
          ),
        );
        cySmartGet('moo__icon').should(
          'have.css',
          'fill',
          `${hexToRgbString(
            smartPickTokenValue(
              { base: onLightBase },
              'base.color.text.inverse.primary',
            ),
          )}`,
        );
        cySmartGet('moo').realHover();
        cySmartGet('moo')
          .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
          .and(
            'have.css',
            'box-shadow',
            `${hexToRgbString(
              smartPickTokenValue(
                designTokens,
                'base.color.status.destructive.bright',
              ),
            )} 0px 0px 0px 3px inset`,
          );
        cySmartGet('moo').should(
          'have.color',
          smartPickTokenValue(
            { base: onLightBase },
            'base.color.text.inverse.primary',
          ),
        );
        cySmartGet('moo__icon').should(
          'have.css',
          'fill',
          `${hexToRgbString(
            smartPickTokenValue(
              { base: onLightBase },
              'base.color.text.inverse.primary',
            ),
          )}`,
        );
      });

      it('should correctly indicate PRESS state', () => {
        cyMountWithProviders(
          <Button variant="primary/destructive" testId="moo">
            Button Text
          </Button>,
        );
        cySmartGet('moo').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        );
        cySmartGet('moo').realMouseDown();
        cySmartGet('moo')
          .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
          .and(
            'have.css',
            'box-shadow',
            `${hexToRgbString(
              smartPickTokenValue(
                designTokens,
                'base.color.status.destructive.bright',
              ),
            )} 0px 0px 0px 3px inset`,
          );
      });
    });
  });

  context('Secondary Variant', () => {
    it('should correctly indicate HOVER state', () => {
      cyMountWithProviders(
        <Button variant="secondary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });

    it('should correctly indicate PRESS state', () => {
      cyMountWithProviders(
        <Button variant="secondary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
      cySmartGet('moo').realMouseDown();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });
  });

  context('Secondary/Destructive Variant', () => {
    it('should correctly indicate HOVER state', () => {
      cyMountWithProviders(
        <Button variant="secondary/destructive" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.color',
        smartPickTokenValue(
          designTokens,
          'base.color.status.destructive.bright',
        ),
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        )} 0px 0px 0px 3px inset`,
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo')
        .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
        .and(
          'have.css',
          'box-shadow',
          `${hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.destructive.bright',
            ),
          )} 0px 0px 0px 3px inset`,
        );
    });

    it('should correctly indicate PRESS state', () => {
      cyMountWithProviders(
        <Button variant="secondary/destructive" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should(
        'have.color',
        smartPickTokenValue(
          designTokens,
          'base.color.status.destructive.bright',
        ),
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        )} 0px 0px 0px 3px inset`,
      );
      cySmartGet('moo').realMouseDown();
      cySmartGet('moo')
        .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
        .and(
          'have.css',
          'box-shadow',
          `${hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.destructive.bright',
            ),
          )} 0px 0px 0px 3px inset`,
        );
    });
  });

  context('Tertiary Variant', () => {
    it('should correctly indicate HOVER state', () => {
      cyMountWithProviders(
        <Button variant="tertiary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').realHover();
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });

    it('should correctly indicate PRESS state', () => {
      cyMountWithProviders(
        <Button variant="tertiary" testId="moo">
          Button Text
        </Button>,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').realMouseDown();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });
  });

  context('Tertiary/Inverse Variant', () => {
    it('should correctly indicate HOVER state', () => {
      cyMountWithProviders(
        <Box
          sx={{
            bg: 'base.color.translucent.standard.700',
            p: 'base.spacing.x2',
          }}
        >
          <Button variant="tertiary/inverse" testId="moo">
            Button Text
          </Button>
        </Box>,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').realHover();
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgb(255, 255, 255) 0px 0px 0px 3px inset',
      );
    });

    it('should correctly indicate PRESS state', () => {
      cyMountWithProviders(
        <Box
          sx={{
            bg: 'base.color.translucent.standard.700',
            p: 'base.spacing.x2',
          }}
        >
          <Button variant="tertiary/inverse" testId="moo">
            Button Text
          </Button>
        </Box>,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').realMouseDown();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(255, 255, 255) 0px 0px 0px 3px inset',
      );
    });
  });

  context('Subcomponents', () => {
    it('should correctly render an icon BEFORE the button text, when neccissary', () => {
      cyMountWithProviders(
        <Button testId="moo">
          <Button.Icon icon="AirDrop" testId="icon" />
          Button Text
        </Button>,
      );
      cySmartGet('icon').its('0.nextSibling.nodeName').should('eq', '#text');
    });

    it('should correctly render an icon AFTER the button text, when neccissary', () => {
      cyMountWithProviders(
        <Button testId="moo">
          Button Text
          <Button.Icon icon="AirDrop" testId="icon" />
        </Button>,
      );
      cySmartGet('icon')
        .its('0.previousSibling.nodeName')
        .should('eq', '#text');
    });

    it('should correctly render a logo BEFORE the button text, when neccissary', () => {
      cyMountWithProviders(
        <Button testId="moo">
          <Button.Logo logo="PassportSymbol" testId="logo" />
          Button Text
        </Button>,
      );
      cySmartGet('logo').its('0.nextSibling.nodeName').should('eq', '#text');
    });

    it('should correctly render a logo AFTER the button text, when neccissary', () => {
      cyMountWithProviders(
        <Button testId="moo">
          Button Text
          <Button.Logo logo="PassportSymbol" testId="logo" />
        </Button>,
      );
      cySmartGet('logo')
        .its('0.previousSibling.nodeName')
        .should('eq', '#text');
    });

    it('should allow sx to be passed down to all subcomponents', () => {
      cyMountWithProviders(
        <Button testId="moo">
          <Button.Icon icon="AirDrop" testId="icon" sx={{ bg: 'gold' }} />
          <Button.Logo
            logo="PassportSymbol"
            testId="logo"
            sx={{ bg: 'gold' }}
          />
          Button Text
        </Button>,
      );
      cySmartGet('icon').should('have.backgroundColor', 'gold');
      cySmartGet('logo').should('have.backgroundColor', 'gold');
    });
  });

  context('<Button.Icon />', () => {
    it('should pass through sx correctly', () => {
      cyMountWithProviders(
        <Button variant="tertiary" size="small">
          Button Text{' '}
          <Button.Icon testId="moo" sx={{ fill: 'black' }} icon="AirDrop" />
        </Button>,
      );
      cySmartGet('moo').should('have.css', 'fill', 'rgb(0, 0, 0)');
    });

    it('should pass through domRef correctly', () => {
      const ref = cy.stub().as('refStub') as unknown as Ref<SVGSVGElement>;

      cyMountWithProviders(
        <Button>
          Button Text <Button.Icon testId="moo" domRef={ref} icon="AirDrop" />
        </Button>,
      );

      cy.get('@refStub').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });
    });

    it('should correctly size and position Button.Icon', () => {
      cyMountWithProviders(
        <Button size="small" className="moo">
          Button Text <Button.Icon testId="moo" icon="AirDrop" />
        </Button>,
      );

      cySmartGet('.moo > span').and('have.css', 'gap', '8px');
      cySmartGet('moo').and('have.css', 'width', '12px');

      cyMountWithProviders(
        <Button size="medium" className="moo">
          Button Text <Button.Icon testId="moo" icon="AirDrop" />
        </Button>,
      );
      cySmartGet('.moo > span').and('have.css', 'gap', '8px');
      cySmartGet('moo').and('have.css', 'width', '16px');

      cyMountWithProviders(
        <Button size="large" className="moo">
          Button Text <Button.Icon testId="moo" icon="AirDrop" />
        </Button>,
      );
      cySmartGet('.moo > span').and('have.css', 'gap', '16px');
      cySmartGet('moo').and('have.css', 'width', '20px');
    });
  });
});
