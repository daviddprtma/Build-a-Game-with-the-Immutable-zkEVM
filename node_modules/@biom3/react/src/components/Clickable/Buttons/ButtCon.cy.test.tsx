import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import NextLink from 'next/link';

import { MockNextRouter } from '../../../mocks';
import { hexToRgbString } from '../../../utils/colorHelpers';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { Box } from '../../Box';
import { ButtCon } from './ButtCon';

// @TODO: these tests seem a little bit extraneous, this suite could
// probably use some cleanup / refactor work...
describe(`<ButtCon />`, () => {
  it(`should have correct displayName`, () => {
    expect(ButtCon.displayName).to.eq('ButtCon');
  });
  it(`should correctly render a <button> tag, by default`, () => {
    cyMountWithProviders(<ButtCon testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
  });

  it(`should allow an <a> to be rendered where necessary`, () => {
    cyMountWithProviders(
      <ButtCon testId="moo" icon="ArrowForward" rc={<a href="#/" />} />,
    );

    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
  });

  it(`should allow next/link component to be passed in as the 'as' prop`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <ButtCon
          testId="moo"
          rc={<NextLink href="/moo/cow" />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it(`should allow next/link style href props`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <ButtCon
          testId="moo"
          rc={<NextLink href={{ pathname: '/moo/cow' }} />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it('should allow href and onClick property to both be supplied and used', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <ButtCon
        testId="moo"
        rc={<a href="#/" onClick={onClickStub} />}
        icon="ArrowForward"
      />,
    );
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow href and onClick property to both be supplied and used with next/link', () => {
    const onPushStub = cy.stub().as('onPushStub');
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <ButtCon
          testId="moo"
          rc={<NextLink href="/moo/cow" onClick={onClickStub} />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('@onPushStub').should('not.have.been.calledOnce');
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onPushStub').should('have.been.calledOnce');
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow the icon to use the bold variant, where neccissary', () => {
    cyMountWithProviders(
      <ButtCon testId="moo" icon="ArrowForward" iconVariant="bold" />,
    );

    cySmartGet('moo__icon').should('have.attr', 'data-variant', 'bold');

    cyMountWithProviders(
      <ButtCon testId="moo" icon="ArrowForward" iconVariant="regular" />,
    );

    cySmartGet('moo__icon').should('have.attr', 'data-variant', 'regular');
  });

  it('should render a responsively sized button, when required', () => {
    cy.viewport(base.breakpoint.small - 10, 400);
    cyMountWithProviders(
      <ButtCon
        variant="secondary"
        testId="moo"
        size={['small', 'medium', 'large']}
        icon="ArrowForward"
      />,
    );
    cySmartGet('moo').should('have.css', 'width', '32px');
    cy.viewport(base.breakpoint.small, 400);
    cySmartGet('moo').should('have.css', 'width', '48px');
    cy.viewport(base.breakpoint.medium, 400);
    cySmartGet('moo').should('have.css', 'width', '64px');
  });

  it('should not show hover fx, when the buttcon is disabled', () => {
    cyMountWithProviders(<ButtCon disabled testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo')
      .realHover()
      .should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
  });

  it('should not show click fx, when the buttcon is disabled', () => {
    cyMountWithProviders(<ButtCon disabled testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo').realMouseDown();
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.brand.1'),
    );
  });

  it('should allow custom sx to be passed in for the icon element', () => {
    cyMountWithProviders(
      <ButtCon testId="moo" icon="ArrowForward" iconSx={{ bg: 'gold' }} />,
    );
    cySmartGet('moo__icon').should('have.backgroundColor', 'gold');
  });

  it('should render a medium sized ButtCon, by default', () => {
    cyMountWithProviders(<ButtCon testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').should('have.css', 'width', '48px');
  });

  it('should render a small sized ButtCon, when required', () => {
    cyMountWithProviders(
      <ButtCon testId="moo" size="small" icon="ArrowForward" />,
    );
    cySmartGet('moo').should('have.css', 'width', '32px');
  });

  it('should render a large sized ButtCon, when required', () => {
    cyMountWithProviders(
      <ButtCon testId="moo" size="large" icon="ArrowForward" />,
    );
    cySmartGet('moo').should('have.css', 'width', '64px');
  });

  it('should allow the rendering of any kind of child element, in lieue of an icon', () => {
    cyMountWithProviders(
      <ButtCon testId="moo" size="large">
        text
      </ButtCon>,
    );
    cySmartGet('moo').should('have.text', 'text');
  });

  it('should allow the rendering of a SvgIcon subcomponent, in lieue of an icon', () => {
    cyMountWithProviders(
      <ButtCon size="large">
        <ButtCon.SvgIcon viewBox="0 0 40 40" testId="moo">
          <path
            d="M29.6 20.2273C29.6 19.5182 29.5364 18.8364 29.4182 18.1818H20V22.05H25.3818C25.15 23.3 24.4455 24.3591 23.3864 25.0682V27.5773H26.6182C28.5091 25.8364 29.6 23.2727 29.6 20.2273Z"
            fill="#4285F4"
          />
          <path
            d="M20 30C22.7 30 24.9636 29.1045 26.6181 27.5773L23.3863 25.0682C22.4909 25.6682 21.3454 26.0227 20 26.0227C17.3954 26.0227 15.1909 24.2636 14.4045 21.9H11.0636V24.4909C12.7091 27.7591 16.0909 30 20 30Z"
            fill="#34A853"
          />
          <path
            d="M14.4045 21.9C14.2045 21.3 14.0909 20.6591 14.0909 20C14.0909 19.3409 14.2045 18.7 14.4045 18.1V15.5091H11.0636C10.3864 16.8591 10 18.3864 10 20C10 21.6136 10.3864 23.1409 11.0636 24.4909L14.4045 21.9Z"
            fill="#FBBC04"
          />
          <path
            d="M20 13.9773C21.4681 13.9773 22.7863 14.4818 23.8227 15.4727L26.6909 12.6045C24.9591 10.9909 22.6954 10 20 10C16.0909 10 12.7091 12.2409 11.0636 15.5091L14.4045 18.1C15.1909 15.7364 17.3954 13.9773 20 13.9773Z"
            fill="#E94235"
          />
        </ButtCon.SvgIcon>
      </ButtCon>,
    );
    cySmartGet('moo').children().should('have.length', 4);
  });

  it('should give a SvgIcon subcomponent, default sizing', () => {
    cyMountWithProviders(
      <ButtCon size="large">
        <ButtCon.SvgIcon viewBox="0 0 40 40" testId="moo">
          <path
            d="M29.6 20.2273C29.6 19.5182 29.5364 18.8364 29.4182 18.1818H20V22.05H25.3818C25.15 23.3 24.4455 24.3591 23.3864 25.0682V27.5773H26.6182C28.5091 25.8364 29.6 23.2727 29.6 20.2273Z"
            fill="#4285F4"
          />
          <path
            d="M20 30C22.7 30 24.9636 29.1045 26.6181 27.5773L23.3863 25.0682C22.4909 25.6682 21.3454 26.0227 20 26.0227C17.3954 26.0227 15.1909 24.2636 14.4045 21.9H11.0636V24.4909C12.7091 27.7591 16.0909 30 20 30Z"
            fill="#34A853"
          />
          <path
            d="M14.4045 21.9C14.2045 21.3 14.0909 20.6591 14.0909 20C14.0909 19.3409 14.2045 18.7 14.4045 18.1V15.5091H11.0636C10.3864 16.8591 10 18.3864 10 20C10 21.6136 10.3864 23.1409 11.0636 24.4909L14.4045 21.9Z"
            fill="#FBBC04"
          />
          <path
            d="M20 13.9773C21.4681 13.9773 22.7863 14.4818 23.8227 15.4727L26.6909 12.6045C24.9591 10.9909 22.6954 10 20 10C16.0909 10 12.7091 12.2409 11.0636 15.5091L14.4045 18.1C15.1909 15.7364 17.3954 13.9773 20 13.9773Z"
            fill="#E94235"
          />
        </ButtCon.SvgIcon>
      </ButtCon>,
    );
    cySmartGet('moo').should('have.css', 'width', '20px');
  });

  it('should allow a SvgIcon subcomponent, to specify its own size', () => {
    cyMountWithProviders(
      <ButtCon size="large">
        <ButtCon.SvgIcon testId="moo" viewBox="0 0 40 40" sx={{ w: '40px' }}>
          <path
            d="M29.6 20.2273C29.6 19.5182 29.5364 18.8364 29.4182 18.1818H20V22.05H25.3818C25.15 23.3 24.4455 24.3591 23.3864 25.0682V27.5773H26.6182C28.5091 25.8364 29.6 23.2727 29.6 20.2273Z"
            fill="#4285F4"
          />
          <path
            d="M20 30C22.7 30 24.9636 29.1045 26.6181 27.5773L23.3863 25.0682C22.4909 25.6682 21.3454 26.0227 20 26.0227C17.3954 26.0227 15.1909 24.2636 14.4045 21.9H11.0636V24.4909C12.7091 27.7591 16.0909 30 20 30Z"
            fill="#34A853"
          />
          <path
            d="M14.4045 21.9C14.2045 21.3 14.0909 20.6591 14.0909 20C14.0909 19.3409 14.2045 18.7 14.4045 18.1V15.5091H11.0636C10.3864 16.8591 10 18.3864 10 20C10 21.6136 10.3864 23.1409 11.0636 24.4909L14.4045 21.9Z"
            fill="#FBBC04"
          />
          <path
            d="M20 13.9773C21.4681 13.9773 22.7863 14.4818 23.8227 15.4727L26.6909 12.6045C24.9591 10.9909 22.6954 10 20 10C16.0909 10 12.7091 12.2409 11.0636 15.5091L14.4045 18.1C15.1909 15.7364 17.3954 13.9773 20 13.9773Z"
            fill="#E94235"
          />
        </ButtCon.SvgIcon>
      </ButtCon>,
    );
    cySmartGet('moo').should('have.css', 'width', '40px');

    cyMountWithProviders(
      <ButtCon size="large">
        <ButtCon.SvgIcon
          testId="moo"
          viewBox="0 0 40 40"
          sx={{ width: '45px' }}
        >
          <path
            d="M29.6 20.2273C29.6 19.5182 29.5364 18.8364 29.4182 18.1818H20V22.05H25.3818C25.15 23.3 24.4455 24.3591 23.3864 25.0682V27.5773H26.6182C28.5091 25.8364 29.6 23.2727 29.6 20.2273Z"
            fill="#4285F4"
          />
          <path
            d="M20 30C22.7 30 24.9636 29.1045 26.6181 27.5773L23.3863 25.0682C22.4909 25.6682 21.3454 26.0227 20 26.0227C17.3954 26.0227 15.1909 24.2636 14.4045 21.9H11.0636V24.4909C12.7091 27.7591 16.0909 30 20 30Z"
            fill="#34A853"
          />
          <path
            d="M14.4045 21.9C14.2045 21.3 14.0909 20.6591 14.0909 20C14.0909 19.3409 14.2045 18.7 14.4045 18.1V15.5091H11.0636C10.3864 16.8591 10 18.3864 10 20C10 21.6136 10.3864 23.1409 11.0636 24.4909L14.4045 21.9Z"
            fill="#FBBC04"
          />
          <path
            d="M20 13.9773C21.4681 13.9773 22.7863 14.4818 23.8227 15.4727L26.6909 12.6045C24.9591 10.9909 22.6954 10 20 10C16.0909 10 12.7091 12.2409 11.0636 15.5091L14.4045 18.1C15.1909 15.7364 17.3954 13.9773 20 13.9773Z"
            fill="#E94235"
          />
        </ButtCon.SvgIcon>
      </ButtCon>,
    );
    cySmartGet('moo').should('have.css', 'width', '45px');
  });

  context('Variants', () => {
    it('should correctly indicate Primary hover state', () => {
      cyMountWithProviders(
        <ButtCon variant="primary" testId="moo" icon="ArrowForward" />,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo')
        .should('have.css', 'background-color', 'rgba(0, 0, 0, 0)')
        .and('have.css', 'box-shadow', 'rgb(19, 19, 19) 0px 0px 0px 3px inset');
    });

    it('should correctly indicate Primary/Destructive hover state', () => {
      cyMountWithProviders(
        <ButtCon
          variant="primary/destructive"
          testId="moo"
          icon="ArrowForward"
        />,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.status.destructive.bright',
        ),
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo')
        .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
        .and(
          'have.css',
          'box-shadow',
          `${hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.destructive.bright',
            ),
          )} 0px 0px 0px 3px inset`,
        );
    });

    it('should correctly indicate Secondary/Destructive hover state', () => {
      cyMountWithProviders(
        <ButtCon
          variant="secondary/destructive"
          testId="moo"
          icon="ArrowForward"
        />,
      );
      cySmartGet('moo').should(
        'have.color',
        smartPickTokenValue(
          designTokens,
          'base.color.status.destructive.bright',
        ),
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.status.destructive.bright',
          ),
        )} 0px 0px 0px 3px inset`,
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo')
        .should('have.backgroundColor', 'rgba(0, 0, 0, 0)')
        .and(
          'have.css',
          'box-shadow',
          `${hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.destructive.bright',
            ),
          )} 0px 0px 0px 3px inset`,
        );
    });

    it('should correctly indicate Secondary hover state', () => {
      cyMountWithProviders(
        <ButtCon variant="secondary" testId="moo" icon="ArrowForward" />,
      );
      cySmartGet('moo').should(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });

    it('should correctly indicate Tertiary/Inverse hover state', () => {
      cyMountWithProviders(
        <Box
          sx={{
            bg: 'base.color.translucent.standard.800',
            p: 'base.spacing.x2',
          }}
        >
          <ButtCon
            variant="tertiary/inverse"
            testId="moo"
            icon="ArrowForward"
          />
        </Box>,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.2'),
      );
      cySmartGet('moo').realHover();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        `${hexToRgbString(
          smartPickTokenValue(designTokens, 'base.color.brand.2'),
        )} 0px 0px 0px 3px inset`,
      );
    });

    it('should correctly indicate Tertiary hover state', () => {
      cyMountWithProviders(
        <ButtCon variant="tertiary" testId="moo" icon="ArrowForward" />,
      );
      cySmartGet('moo').should('have.css', 'box-shadow', 'none');
      cySmartGet('moo').realHover();
      cySmartGet('moo').and(
        'have.css',
        'box-shadow',
        'rgb(19, 19, 19) 0px 0px 0px 3px inset',
      );
    });
  });
});
