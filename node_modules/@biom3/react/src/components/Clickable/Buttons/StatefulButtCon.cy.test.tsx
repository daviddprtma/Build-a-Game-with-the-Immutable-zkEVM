import { base } from '@biom3/design-tokens';
import NextLink from 'next/link';

import { MockNextRouter } from '../../../mocks';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { StatefulButtCon } from './StatefulButtCon';

describe(`<StatefulButtCon />`, () => {
  it(`should have correct displayName`, () => {
    expect(StatefulButtCon.displayName).to.eq('StatefulButtCon');
  });
  it(`should correctly render a <button> tag, by default`, () => {
    cyMountWithProviders(<StatefulButtCon testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
  });

  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <StatefulButtCon
        testId="moo"
        rc={<button ref={domRefStub} />}
        icon="ArrowForward"
      />,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it(`should allow an <a> to be rendered where necessary`, () => {
    cyMountWithProviders(
      <StatefulButtCon testId="moo" rc={<a href="#/" />} icon="ArrowForward" />,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
  });

  it(`should allow next/link component to be passed in as the 'as' prop`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <StatefulButtCon
          testId="moo"
          rc={<NextLink href="/moo/cow" />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it(`should allow next/link style href props`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <StatefulButtCon
          testId="moo"
          rc={<NextLink href={{ pathname: '/moo/cow' }} />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cy.get('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it('should allow href and onClick property to both be supplied and used', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <StatefulButtCon
        testId="moo"
        rc={<a href="#/moo/cow" onClick={onClickStub} />}
        icon="ArrowForward"
      />,
    );
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow href and onClick property to both be supplied and used with next/link', () => {
    const onPushStub = cy.stub().as('onPushStub');
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <StatefulButtCon
          testId="moo"
          rc={<NextLink href="/moo/cow" onClick={onClickStub} />}
          icon="ArrowForward"
        />
      </MockNextRouter>,
    );
    cySmartGet('@onPushStub').should('not.have.been.calledOnce');
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onPushStub').should('have.been.calledOnce');
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow the icon to use the bold variant, where neccissary', () => {
    cyMountWithProviders(
      <StatefulButtCon testId="moo" icon="ArrowForward" iconVariant="bold" />,
    );

    cySmartGet('moo__icon').should('have.attr', 'data-variant', 'bold');

    cyMountWithProviders(
      <StatefulButtCon
        testId="moo"
        icon="ArrowForward"
        iconVariant="regular"
      />,
    );

    cySmartGet('moo__icon').should('have.attr', 'data-variant', 'regular');
  });

  it('should correctly indicate hover state', () => {
    cyMountWithProviders(<StatefulButtCon testId="moo" icon="ArrowForward" />);
    cySmartGet('moo').should('have.css', 'box-shadow', 'none');
    cySmartGet('moo').realHover();
    cySmartGet('moo').and(
      'have.css',
      'box-shadow',
      'rgb(19, 19, 19) 0px 0px 0px 3px inset',
    );
  });

  it('should not show hover fx, when the buttcon is disabled', () => {
    cyMountWithProviders(
      <StatefulButtCon disabled testId="moo" icon="ArrowForward" />,
    );
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo').realHover().should('have.css', 'box-shadow', 'none');
  });

  it('should not show click fx, when the buttcon is disabled', () => {
    cyMountWithProviders(
      <StatefulButtCon disabled testId="moo" icon="ArrowForward" />,
    );
    cySmartGet('moo').should('have.css', 'cursor', 'default');
    cySmartGet('moo').realMouseDown().should('have.css', 'box-shadow', 'none');
  });

  it('should render a responsively sized button, when required', () => {
    cy.viewport(base.breakpoint.small - 10, 400);
    cyMountWithProviders(
      <StatefulButtCon
        testId="moo"
        size={['small', 'medium', 'large']}
        icon="ArrowForward"
      />,
    );
    cySmartGet('moo').should('have.css', 'width', '32px');
    cy.viewport(base.breakpoint.small, 400);
    cySmartGet('moo').should('have.css', 'width', '48px');
    cy.viewport(base.breakpoint.medium, 400);
    cySmartGet('moo').should('have.css', 'width', '64px');
  });

  context('states', () => {
    it('should correctly render default "initial" state', () => {
      cyMountWithProviders(
        <StatefulButtCon testId="moo" icon="ArrowForward" />,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        'rgba(13, 13, 13, 0.04)',
      );
    });
    it('should correctly render "loading" state', () => {
      cyMountWithProviders(
        <StatefulButtCon testId="moo" icon="ArrowForward" state="loading" />,
      );
      cySmartGet('moo').should(
        'have.backgroundColor',
        'rgba(13, 13, 13, 0.04)',
      );
      cySmartGet('moo__icon').should('have.attr', 'data-icon', 'Loading');
    });
    it('should correctly render "success" state', () => {
      cyMountWithProviders(
        <StatefulButtCon testId="moo" icon="ArrowForward" state="success" />,
      );
      cySmartGet('moo').should('have.backgroundColor', 'rgb(171, 247, 144)');
      cySmartGet('moo__icon').should('have.attr', 'data-icon', 'Tick');
    });
    it('should correctly render "fatal" state', () => {
      cyMountWithProviders(
        <StatefulButtCon testId="moo" icon="ArrowForward" state="fatal" />,
      );
      cySmartGet('moo').should('have.backgroundColor', 'rgb(255, 99, 127)');
      cySmartGet('moo__icon').should('have.attr', 'data-icon', 'Exclamation');
    });
  });
});
