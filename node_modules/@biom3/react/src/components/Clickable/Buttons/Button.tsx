import { Children, cloneElement, ReactElement } from 'react';
import merge from 'ts-deepmerge';

import {
  useConvertSxToEmotionStyles,
  useGetCurrentSizeClass,
  useTheme,
} from '../../../hooks';
import { BUTTON_SIZES, ButtonProps } from '../../../types/clickable';
import { getStartingSize } from '../../../utils/styleHelpers';
import { isChildSubcomponent } from '../../../utils/subcomponentHelpers';
import { Icon } from '../../Icon';
import { BaseClickable } from '../BaseClickable/BaseClickable';
import { ButtConSvgIcon } from './ButtConSvgIcon';
import { ButtonIcon } from './ButtonIcon';
import { ButtonLogo } from './ButtonLogo';
import {
  baseButtonInnerSpanStyles,
  DEFAULT_BUTTON_SIZE,
  getDefaultButtonStyles,
  getInnerSpanStyles,
  getResponsiveButtonStyles,
  getResponsiveInnerSpanStyles,
} from './styles';

export function Button<RC extends ReactElement | undefined = undefined>({
  children,
  sx = {},
  variant = 'primary',
  size = DEFAULT_BUTTON_SIZE,
  testId,
  className,
  ...props
}: ButtonProps<RC>) {
  const themeProps = useTheme();
  const startingSize = getStartingSize(size, DEFAULT_BUTTON_SIZE, BUTTON_SIZES);
  const currentSizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_BUTTON_SIZE,
    BUTTON_SIZES,
  );
  const allContainerStyles = merge(
    getDefaultButtonStyles({ size: startingSize, variant, themeProps }),
    getResponsiveButtonStyles({
      size,
      variant,
      themeProps,
    }),
    themeProps.components?.Button?.sxOverride ?? {},
    sx,
  );

  const allInnerSpanSx = merge(
    baseButtonInnerSpanStyles,
    getInnerSpanStyles({ size: startingSize, themeProps }),
    getResponsiveInnerSpanStyles({ size, themeProps }),
  );
  const allInnerSpanStyles = useConvertSxToEmotionStyles(allInnerSpanSx);

  return (
    <BaseClickable
      {...props}
      sx={allContainerStyles}
      testId={testId}
      className={`${
        className ?? ''
      } Button Button--${variant} Button--${currentSizeClass}`}
    >
      <span css={allInnerSpanStyles} className="BiomeButton__inner">
        {Children.map(children, child => {
          if (
            isChildSubcomponent(child, ButtonIcon) ||
            isChildSubcomponent(child, ButtonLogo)
          ) {
            // @NOTE: get sub-component children, with some special extra props
            return cloneElement(child, {
              size,
              variant,
              className: 'Button__iconOrLogo',
              testId: child.props.testId
                ? child.props.testId
                : `${testId}__icon`,
              sx: child.props.sx,
            });
          }
          if (
            // @NOTE: this is to handle when used by the ButtCon component:
            isChildSubcomponent(child, Icon) ||
            isChildSubcomponent(child, ButtConSvgIcon)
          ) {
            return child;
          }
          if (typeof child !== 'object') {
            // Otherwise get simple children as Body text:
            return child;
          }

          return null;
        })}
      </span>
    </BaseClickable>
  );
}

Button.displayName = 'Button';
Button.Icon = ButtonIcon;
Button.Logo = ButtonLogo;
