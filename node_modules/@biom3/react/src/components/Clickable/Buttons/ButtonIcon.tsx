import merge from 'ts-deepmerge';

import { useTheme } from '../../../hooks';
import { ButtonSize, ButtonVariant, MakeResponsive } from '../../../types';
import { Icon, IconProps } from '../../Icon';
import {
  getButtonIconSizeStyles,
  getButtonIconVariantStyles,
  getResponsiveButtonIconStyles,
} from './styles';

export type ButtonIconProps = Omit<IconProps, 'variant'> & {
  size?: MakeResponsive<ButtonSize>;
  variant?: MakeResponsive<ButtonVariant>;
  iconVariant?: 'bold' | 'regular';
};

export function ButtonIcon({
  sx = {},
  iconVariant,
  variant = 'primary',
  size = 'medium',
  domRef,
  ...props
}: ButtonIconProps) {
  const themeProps = useTheme();
  const {
    defaultSize,
    defaultVariant,
    styles: responsiveStyles,
  } = getResponsiveButtonIconStyles({
    size,
    variant,
    themeProps,
  });
  const allStyles = merge(
    getButtonIconSizeStyles(defaultSize, themeProps),
    getButtonIconVariantStyles(defaultVariant, themeProps),
    responsiveStyles,
    sx,
  );
  return (
    <Icon {...props} sx={allStyles} variant={iconVariant} domRef={domRef} />
  );
}

ButtonIcon.displayName = 'Button.Icon';
