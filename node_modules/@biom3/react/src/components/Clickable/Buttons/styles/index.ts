import merge from 'ts-deepmerge';

import { ButtonSize, ButtonVariant } from '../../../../types/clickable';
import { MakeResponsive } from '../../../../types/shared';
import { BiomeTheme } from '../../../../types/theme';
import { isError } from '../../../../utils/textStyleHelpers';
import {
  getPrimaryButtonStyles,
  getPrimaryDestructiveButtonGenericStyles,
  getPrimaryDestructiveButtonStyles,
  getPrimaryInverseButtonGenericStyles,
  getPrimaryInverseButtonStyles,
  primaryButtonGenericStyles,
} from './primaryStyles';
import {
  getSecondaryButtonStyles,
  getSecondaryDestructiveButtonStyles,
  secondaryButtonGenericStyles,
  secondaryDestructiveButtonGenericStyles,
} from './secondaryStyles';
import {
  getTertiaryButtonStyles,
  tertiaryButtonGenericStyles,
  tertiaryInverseButtonGenericStyles,
} from './tertiaryStyles';

export const DEFAULT_BUTTON_SIZE = 'medium' as const;
export const DEFAULT_BUTTON_VARIANT = 'primary' as const;

export const baseButtonInnerSpanStyles = {
  position: 'relative',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
};

export function getInnerSpanStyles({
  size,
  themeProps: { base },
}: {
  size: ButtonSize;
  themeProps: BiomeTheme;
}) {
  return {
    gap:
      size === 'large'
        ? base.spacing.x4
        : size === 'medium'
        ? base.spacing.x2
        : base.spacing.x2,
  };
}

export function getResponsiveInnerSpanStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  return merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getInnerSpanStyles({
            size: responsiveSize,
            themeProps,
          }),
        };
      }
      return {};
    }),
  );
}

export const baseButtonStyles = {
  position: 'relative',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  textDecoration: 'none',
  transitionProperty: 'box-shadow',
  transitionDuration: 'base.motion.normal.fast.cssDuration',
  transitionTimingFunction: 'base.motion.normal.fast.cssEase',

  '&[disabled]': {
    cursor: 'default',
  },
};

export function getResponsiveButtonStyles({
  size,
  variant,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  variant: ButtonVariant;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  return merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        let styles = {};
        switch (variant) {
          case 'secondary':
            styles = getSecondaryButtonStyles(responsiveSize, themeProps);
            break;

          case 'tertiary':
            styles = getTertiaryButtonStyles(responsiveSize, themeProps);
            break;

          case 'tertiary/inverse':
            styles = getTertiaryButtonStyles(responsiveSize, themeProps, true);
            break;

          case 'primary/destructive':
            styles = getPrimaryDestructiveButtonStyles(
              responsiveSize,
              themeProps,
            );
            break;

          case 'secondary/destructive':
            styles = getSecondaryDestructiveButtonStyles(
              responsiveSize,
              themeProps,
            );
            break;

          case 'primary/inverse':
            styles = getPrimaryInverseButtonStyles(responsiveSize, themeProps);
            break;

          case 'primary':
          default:
            styles = getPrimaryButtonStyles(responsiveSize, themeProps);
            break;
        }
        return {
          [mediaStyleRule]: styles,
        };
      }
      return {};
    }),
  );
}

export function getDefaultButtonStyles({
  size,
  variant,
  themeProps,
}: {
  size: ButtonSize;
  variant: ButtonVariant;
  themeProps: BiomeTheme;
}) {
  switch (variant) {
    case 'secondary':
      return merge(
        {},
        baseButtonStyles,
        getSecondaryButtonStyles(size, themeProps),
        secondaryButtonGenericStyles,
      );

    case 'secondary/destructive':
      return merge(
        {},
        baseButtonStyles,
        getSecondaryDestructiveButtonStyles(size, themeProps),
        secondaryDestructiveButtonGenericStyles,
      );

    case 'tertiary/inverse':
      return merge(
        {},
        baseButtonStyles,
        getTertiaryButtonStyles(size, themeProps, true),
        tertiaryInverseButtonGenericStyles,
      );

    case 'tertiary':
      return merge(
        {},
        baseButtonStyles,
        getTertiaryButtonStyles(size, themeProps),
        tertiaryButtonGenericStyles,
      );

    case 'primary/destructive':
      return merge(
        {},
        baseButtonStyles,
        primaryButtonGenericStyles,
        getPrimaryDestructiveButtonStyles(size, themeProps),
        getPrimaryDestructiveButtonGenericStyles(themeProps),
      );

    case 'primary/inverse': {
      return merge(
        {},
        baseButtonStyles,
        primaryButtonGenericStyles,
        getPrimaryInverseButtonStyles(size, themeProps),
        getPrimaryInverseButtonGenericStyles(themeProps),
      );
    }

    case 'primary':
    default:
      return merge(
        {},
        baseButtonStyles,
        primaryButtonGenericStyles,
        getPrimaryButtonStyles(size, themeProps),
      );
  }
}

export const getButtConIconStyles = ({
  variant,
  size,
  themeProps: { base },
}: {
  variant: ButtonVariant;
  size: ButtonSize;
  themeProps: BiomeTheme;
}) => {
  return {
    width:
      size === 'small'
        ? base.icon.size[200]
        : size === 'medium'
        ? base.icon.size[250]
        : base.icon.size[300],
    fill: variant.includes('primary/inverse')
      ? base.color.text.primary
      : variant.includes('primary')
      ? base.color.brand[2]
      : variant.includes('secondary/destructive')
      ? base.color.status.destructive.bright
      : variant.includes('secondary')
      ? base.color.text.primary
      : variant.includes('tertiary/inverse')
      ? base.color.text.inverse.primary
      : base.color.text.primary,
  };
};

export const getButtConStyles = ({
  size,
  themeProps,
}: {
  size: ButtonSize;
  themeProps: BiomeTheme;
}) => ({
  w:
    size === 'small'
      ? themeProps.base.spacing.x8
      : size === 'medium'
      ? themeProps.base.spacing.x12
      : themeProps.base.spacing.x16,
  minw:
    size === 'small'
      ? themeProps.base.spacing.x8
      : size === 'medium'
      ? themeProps.base.spacing.x12
      : themeProps.base.spacing.x16,
  paddingLeft: '0',
  paddingRight: '0',
});

export function getResponsiveButtConStyles({
  size,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();
  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtConStyles({
            size: responsiveSize,
            themeProps,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}

export function getResponsiveButtConIconStyles({
  variant,
  size,
  themeProps,
}: {
  variant: ButtonVariant;
  size: MakeResponsive<ButtonSize>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtConIconStyles({
            size: responsiveSize,
            themeProps,
            variant,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}

export function getButtonIconSizeStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return {
    alignSelf: 'center',
    width:
      size === 'small'
        ? themeProps.base.icon.size[100]
        : size === 'large'
        ? themeProps.base.icon.size[250]
        : themeProps.base.icon.size[200],
  };
}

export function getButtonIconVariantStyles(
  variant: ButtonVariant,
  { base }: BiomeTheme,
) {
  let fill;
  switch (variant) {
    case 'primary/destructive':
      fill =
        base.colorMode === 'lightOnDark'
          ? base.color.text.primary
          : base.color.text.inverse.primary;
      break;
    case 'primary/inverse':
      fill = base.color.text.primary;
      break;
    case 'primary':
      fill = base.color.text.inverse.primary;
      break;
    case 'tertiary/inverse':
      fill = base.color.text.inverse.primary;
      break;
    case 'secondary/destructive':
      fill = base.color.status.destructive.bright;
      break;
    case 'secondary':
    case 'tertiary':
    default:
      fill = base.color.text.primary;
      break;
  }
  return { fill };
}

export function getResponsiveButtonIconStyles({
  size,
  variant,
  themeProps,
}: {
  size: MakeResponsive<ButtonSize>;
  variant: MakeResponsive<ButtonVariant>;
  themeProps: BiomeTheme;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  const defaultSize = sizeAsArray.shift() as ButtonSize;
  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtonIconSizeStyles(responsiveSize, themeProps),
        };
      }
      return {};
    }),
  );

  const variantAsArray = Array.isArray(variant) ? [...variant] : [variant];
  const defaultVariant = variantAsArray.shift() as ButtonVariant;
  const variantStyles = merge(
    ...variantAsArray.map((responsiveVariant, index) => {
      if (responsiveVariant != null && !isError(responsiveVariant)) {
        const mediaStyleRule = `@media screen and (min-width: ${themeProps.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getButtonIconVariantStyles(
            responsiveVariant,
            themeProps,
          ),
        };
      }
      return {};
    }),
  );

  return {
    defaultSize,
    defaultVariant,
    styles: merge({}, sizeStyles, variantStyles),
  };
}
