import { keyframes } from '@emotion/react';
import merge from 'ts-deepmerge';

import { ButtonSize } from '../../../../types/clickable';
import { BiomeTheme } from '../../../../types/theme';
import {
  largeButtonStaticStyles,
  mediumButtonStaticStyles,
  smallButtonStaticStyles,
} from './shared';

const fadeIn = keyframes`
  0% {
    opacity: 0;
    scale: 0.95;
  }
  100% {
    opacity: 1;
    scale: 1;
  }
`;

export const secondaryButtonGenericStyles = {
  color: 'base.color.text.primary',

  '&::before': {
    position: 'absolute',
    top: '50%',
    left: '50%',
    translate: '-50% -50%',
    boxShadow: `inset 0 0 0 0px transparent`,
    transitionProperty: 'box-shadow',
    transitionDuration: 'base.motion.normal.fast.cssDuration',
    transitionTimingFunction: 'base.motion.normal.fast.cssEase',
    animationName: fadeIn,
    animationDuration: 'base.motion.normal.fast.cssDuration',
    animationTimingFunction: 'base.motion.normal.fast.cssEase',
  },
};

export const secondaryDestructiveButtonGenericStyles = {
  color: 'base.color.status.destructive.bright',
  '&::before': {
    position: 'absolute',
    boxShadow: `inset 0 0 0 0px transparent`,
    top: '50%',
    left: '50%',
    translate: '-50% -50%',
    transitionProperty: 'box-shadow',
    transitionDuration: 'base.motion.normal.fast.cssDuration',
    transitionTimingFunction: 'base.motion.normal.fast.cssEase',
    animationName: fadeIn,
    animationDuration: 'base.motion.normal.fast.cssDuration',
    animationTimingFunction: 'base.motion.normal.fast.cssEase',
  },
};

export function getSmallSecondaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc((${base.border.size[100]} + ${base.border.size[200]}) * 2)`;
  const pressCutaway = `calc((${base.border.size[100]} + ${base.border.size[200]}) * 2)`;

  return {
    ...smallButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,

    '&::before': {
      borderRadius: base.borderRadius.x15,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[100]} ${base.color.status.destructive.bright}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,
      },
    },
  };
}
export function getMediumSecondaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc((${base.border.size[200]} + ${base.border.size[300]}) * 2)`;
  const pressCutaway = `calc((${base.border.size[200]} + ${base.border.size[300]}) * 2)`;

  return {
    ...mediumButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,

    '&::before': {
      borderRadius: base.borderRadius.x20,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[100]} ${base.color.status.destructive.bright}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,
      },
    },
  };
}

export function getLargeSecondaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc((${base.border.size[200]} + ${base.border.size[400]}) * 2)`;
  const pressCutaway = `calc((${base.border.size[200]} + ${base.border.size[400]}) * 2)`;

  return {
    ...largeButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,

    '&::before': {
      borderRadius: base.borderRadius.x25,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.status.destructive.bright}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.status.destructive.bright}`,
      },
    },
  };
}

export function getSmallSecondaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const hoverCutaway = `calc((${themeProps.base.border.size[100]} + ${themeProps.base.border.size[200]}) * 2)`;
  const pressCutaway = `calc((${themeProps.base.border.size[100]} + ${themeProps.base.border.size[200]}) * 2)`;

  return {
    ...smallButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${themeProps.base.border.size[200]} ${themeProps.base.color.brand[1]}`,

    '&::before': {
      borderRadius: themeProps.base.borderRadius.x15,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[200]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[100]} ${themeProps.base.color.brand[1]}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[200]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[200]} ${themeProps.base.color.brand[1]}`,
      },
    },
  };
}
export function getMediumSecondaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const hoverCutaway = `calc((${themeProps.base.border.size[200]} + ${themeProps.base.border.size[300]}) * 2)`;
  const pressCutaway = `calc((${themeProps.base.border.size[200]} + ${themeProps.base.border.size[300]}) * 2)`;

  return {
    ...mediumButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${themeProps.base.border.size[300]} ${themeProps.base.color.brand[1]}`,

    '&::before': {
      borderRadius: themeProps.base.borderRadius.x20,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[300]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[100]} ${themeProps.base.color.brand[1]}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[300]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[300]} ${themeProps.base.color.brand[1]}`,
      },
    },
  };
}

export function getLargeSecondaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const hoverCutaway = `calc((${themeProps.base.border.size[200]} + ${themeProps.base.border.size[400]}) * 2)`;
  const pressCutaway = `calc((${themeProps.base.border.size[200]} + ${themeProps.base.border.size[400]}) * 2)`;

  return {
    ...largeButtonStaticStyles(themeProps),
    boxShadow: `inset 0 0 0 ${themeProps.base.border.size[300]} ${themeProps.base.color.brand[1]}`,

    '&::before': {
      borderRadius: themeProps.base.borderRadius.x25,
    },

    '&:hover:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[400]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${hoverCutaway})`,
        height: `calc(100% - ${hoverCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[200]} ${themeProps.base.color.brand[1]}`,
      },
    },

    '&:active:not([disabled])': {
      boxShadow: `inset 0 0 0 ${themeProps.base.border.size[400]} ${themeProps.base.color.brand[1]}`,

      '&::before': {
        content: '""',
        width: `calc(100% - ${pressCutaway})`,
        height: `calc(100% - ${pressCutaway})`,
        boxShadow: `inset 0 0 0 ${themeProps.base.border.size[400]} ${themeProps.base.color.brand[1]}`,
      },
    },
  };
}

export function getSecondaryButtonStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return merge(
    size === 'small'
      ? getSmallSecondaryButtonUniqueStyles(themeProps)
      : size === 'medium'
      ? getMediumSecondaryButtonUniqueStyles(themeProps)
      : getLargeSecondaryButtonUniqueStyles(themeProps),
  );
}

export function getSecondaryDestructiveButtonStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return merge(
    size === 'small'
      ? getSmallSecondaryDestructiveButtonUniqueStyles(themeProps)
      : size === 'medium'
      ? getMediumSecondaryDestructiveButtonUniqueStyles(themeProps)
      : getLargeSecondaryDestructiveButtonUniqueStyles(themeProps),
  );
}
