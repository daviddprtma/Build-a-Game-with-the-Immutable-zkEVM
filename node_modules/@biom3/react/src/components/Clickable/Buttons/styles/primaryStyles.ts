import merge from 'ts-deepmerge';

import { ButtonSize } from '../../../../types/clickable';
import { BiomeTheme } from '../../../../types/theme';
import {
  largeButtonStaticStyles,
  mediumButtonStaticStyles,
  smallButtonStaticStyles,
} from './shared';

export const primaryButtonGenericStyles = {
  background: 'base.color.brand.1',
  color: 'base.color.text.inverse.primary',
  boxShadow: `inset 0 0 0 0 transparent`,
  transitionProperty: 'none',

  '&::before': {
    content: '""',
    width: '100%',
    height: '100%',
    position: 'absolute',
    top: 0,
    left: 0,
    background: 'base.color.brand.1',
    transitionProperty: 'clip-path',
    transitionDuration: 'base.motion.normal.fast.cssDuration',
    transitionTimingFunction: 'base.motion.normal.fast.cssEase',
  },
};

export const getPrimaryInverseButtonGenericStyles = ({ base }: BiomeTheme) => ({
  background:
    base.colorMode === 'lightOnDark'
      ? 'base.color.translucent.inverse.1000'
      : 'base.color.neutral.500',
  color: 'base.color.text.primary',

  '&::before': {
    width: '100%',
    height: '100%',
    position: 'absolute',
    top: 0,
    left: 0,
    background:
      base.colorMode === 'lightOnDark'
        ? 'base.color.translucent.inverse.1000'
        : 'base.color.neutral.500',
  },
});

export const getPrimaryDestructiveButtonGenericStyles = ({
  base,
}: BiomeTheme) => ({
  background: 'base.color.status.destructive.bright',
  color:
    base.colorMode === 'lightOnDark'
      ? 'base.color.text.primary'
      : 'base.color.text.inverse.primary',

  '&::before': {
    width: '100%',
    height: '100%',
    position: 'absolute',
    top: 0,
    left: 0,
    background: 'base.color.status.destructive.bright',
  },
});

export function getSmallPrimaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[100]} + ${base.border.size[200]})`;
  const pressCutaway = `calc(${base.border.size[200]} + ${base.border.size[200]})`;

  return {
    ...smallButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x10})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.brand[1]}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.brand[1]}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x10})`,
      },
    },
  };
}

export function getMediumPrimaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[300]})`;
  const pressCutaway = `calc(${base.border.size[300]} + ${base.border.size[300]})`;

  return {
    ...mediumButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x15})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.brand[1]}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.brand[1]}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x15})`,
      },
    },
  };
}

export function getLargePrimaryButtonUniqueStyles(themeProps: BiomeTheme) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[400]})`;
  const pressCutaway = `calc(${base.border.size[400]} + ${base.border.size[400]})`;

  return {
    ...largeButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x20})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.brand[1]}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.brand[1]}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x20})`,
      },
    },
  };
}

export function getSmallPrimaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[100]} + ${base.border.size[200]})`;
  const pressCutaway = `calc(${base.border.size[200]} + ${base.border.size[200]})`;

  return {
    ...smallButtonStaticStyles(themeProps),

    '&::before': {
      background: 'base.color.text.primary',
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x10})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${base.color.status.destructive.bright}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x10})`,
      },
    },
  };
}

export function getMediumPrimaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[300]})`;
  const pressCutaway = `calc(${base.border.size[300]} + ${base.border.size[300]})`;

  return {
    ...mediumButtonStaticStyles(themeProps),
    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x15})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${base.color.status.destructive.bright}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x15})`,
      },
    },
  };
}

export function getLargePrimaryDestructiveButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[400]})`;
  const pressCutaway = `calc(${base.border.size[400]} + ${base.border.size[400]})`;

  return {
    ...largeButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x20})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.status.destructive.bright}`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${base.color.status.destructive.bright}`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x20})`,
      },
    },
  };
}

export function getSmallPrimaryInverseButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[100]} + ${base.border.size[200]})`;
  const pressCutaway = `calc(${base.border.size[200]} + ${base.border.size[200]})`;

  return {
    ...smallButtonStaticStyles(themeProps),

    '&::before': {
      background: 'base.color.text.primary',
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x10})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[200]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x10})`,
      },
    },
  };
}

export function getMediumPrimaryInverseButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[300]})`;
  const pressCutaway = `calc(${base.border.size[300]} + ${base.border.size[300]})`;

  return {
    ...mediumButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x15})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[300]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x15})`,
      },
    },
  };
}

export function getLargePrimaryInverseButtonUniqueStyles(
  themeProps: BiomeTheme,
) {
  const { base } = themeProps;
  const hoverCutaway = `calc(${base.border.size[200]} + ${base.border.size[400]})`;
  const pressCutaway = `calc(${base.border.size[400]} + ${base.border.size[400]})`;

  return {
    ...largeButtonStaticStyles(themeProps),

    '&::before': {
      clipPath: `inset(${hoverCutaway} ${hoverCutaway} ${hoverCutaway} ${hoverCutaway} round ${base.borderRadius.x20})`,
    },

    '&:hover:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,
    },

    '&:active:not([disabled])': {
      background: 'transparent',
      boxShadow: `inset 0 0 0 ${base.border.size[400]} ${
        base.colorMode === 'lightOnDark'
          ? base.color.translucent.inverse[1000]
          : base.color.neutral[500]
      }`,

      '&::before': {
        clipPath: `inset(${pressCutaway} ${pressCutaway} ${pressCutaway} ${pressCutaway} round ${base.borderRadius.x20})`,
      },
    },
  };
}

export function getPrimaryButtonStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return merge(
    size === 'small'
      ? getSmallPrimaryButtonUniqueStyles(themeProps)
      : size === 'medium'
      ? getMediumPrimaryButtonUniqueStyles(themeProps)
      : getLargePrimaryButtonUniqueStyles(themeProps),
  );
}

export function getPrimaryDestructiveButtonStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return merge(
    size === 'small'
      ? getSmallPrimaryDestructiveButtonUniqueStyles(themeProps)
      : size === 'medium'
      ? getMediumPrimaryDestructiveButtonUniqueStyles(themeProps)
      : getLargePrimaryDestructiveButtonUniqueStyles(themeProps),
  );
}

export function getPrimaryInverseButtonStyles(
  size: ButtonSize,
  themeProps: BiomeTheme,
) {
  return merge(
    size === 'small'
      ? getSmallPrimaryInverseButtonUniqueStyles(themeProps)
      : size === 'medium'
      ? getMediumPrimaryInverseButtonUniqueStyles(themeProps)
      : getLargePrimaryInverseButtonUniqueStyles(themeProps),
  );
}
