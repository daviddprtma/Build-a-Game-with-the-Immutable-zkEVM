import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetCurrentSizeClass,
  useGetSubcomponentChild,
  useTheme,
} from '../../../hooks';
import { ButtConProps, BUTTON_SIZES } from '../../../types/clickable';
import { getStartingSize } from '../../../utils/styleHelpers';
import { Icon } from '../../Icon';
import { SmartClone } from '../../SmartClone';
import { ButtConSvgIcon } from './ButtConSvgIcon';
import { Button } from './Button';
import {
  DEFAULT_BUTTON_SIZE,
  DEFAULT_BUTTON_VARIANT,
  getButtConIconStyles,
  getButtConStyles,
  getResponsiveButtConIconStyles,
  getResponsiveButtConStyles,
} from './styles';

export function ButtCon<RC extends ReactElement | undefined = undefined>({
  size = DEFAULT_BUTTON_SIZE,
  variant = DEFAULT_BUTTON_VARIANT,
  sx = {},
  iconSx = {},
  testId,
  iconVariant,
  className,
  ...props
}: ButtConProps<RC>) {
  const { icon } = 'icon' in props ? props : { icon: undefined };
  const { children } = 'children' in props ? props : { children: null };
  const themeProps = useTheme();
  const startingSize = getStartingSize(size, DEFAULT_BUTTON_SIZE, BUTTON_SIZES);
  const currentSizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_BUTTON_SIZE,
    BUTTON_SIZES,
  );
  const allButtonSx = merge(
    getButtConStyles({ size: startingSize, themeProps }),
    getResponsiveButtConStyles({
      size,
      themeProps,
    }),
    themeProps.components?.ButtCon?.sxOverride ?? {},
    sx,
  );
  const allIconSx = merge(
    getButtConIconStyles({ size: startingSize, variant, themeProps }),
    getResponsiveButtConIconStyles({
      variant,
      size,
      themeProps,
    }),
    iconSx,
  );
  const svgIconChild = useGetSubcomponentChild(children, ButtConSvgIcon);

  return (
    <Button
      {...props}
      size={size}
      variant={variant}
      sx={allButtonSx}
      testId={testId}
      className={`${
        className ?? ''
      } ButtCon ButtCon--${variant} ButtCon--${currentSizeClass}`}
    >
      {svgIconChild ? (
        <SmartClone testId={`${testId}__svgIcon`}>{svgIconChild}</SmartClone>
      ) : icon ? (
        <Icon
          className="buttCon__icon"
          sx={allIconSx}
          icon={icon}
          variant={iconVariant}
          testId={`${testId}__icon`}
        />
      ) : (
        children
      )}
    </Button>
  );
}

ButtCon.displayName = 'ButtCon';
ButtCon.SvgIcon = ButtConSvgIcon;
