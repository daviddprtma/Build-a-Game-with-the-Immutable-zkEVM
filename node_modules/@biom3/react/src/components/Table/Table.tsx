import { ClassNames } from '@emotion/react';
import {
  ReactElement,
  ReactNode,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import merge from 'ts-deepmerge';

import {
  useEventListener,
  useGetSubcomponentChild,
  useGetSubcomponentChildren,
} from '../../hooks';
import {
  DomPropsWithDomRef,
  StandardComponentWithProps,
} from '../../types/shared';
import { Box } from '../Box';
import { Stack } from '../Stack';
import { TableContext } from './context';
import { DEFAULT_TABLE_SPACING, TableSettings } from './shared';
import {
  baseContainerSx,
  baseStickyContainerSx,
  baseTableStyle,
} from './style';
import { TableBody } from './TableBody';
import { TableCaption } from './TableCaption';
import { TableCell } from './TableCell';
import { TableFoot } from './TableFoot';
import { TableHead } from './TableHead';
import { TablePageSize } from './TablePageSize';
import { TablePagination } from './TablePagination';
import { TableRow } from './TableRow';

export type TableProps = StandardComponentWithProps<
  HTMLTableElement,
  Partial<Omit<TableSettings, 'setThWidths'>> & {
    children: ReactNode;
    tableBorder?: boolean;
  }
>;

export function Table<RC extends ReactElement | undefined = undefined>({
  children,
  verticalSpacing = DEFAULT_TABLE_SPACING,
  horizontalSpacing = DEFAULT_TABLE_SPACING,
  rowHoverFx = true,
  stripedBg = false,
  tableBorder = false,
  rowBorder = true,
  columnBorder = false,
  stickyHeaders = true,
  testId = 'TableContainer',
  sx = {},
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & TableProps
  : TableProps & { rc: RC }) {
  const tableCaption = useGetSubcomponentChild(children, TableCaption);
  const tableHead = useGetSubcomponentChild(children, TableHead);
  const tableBody = useGetSubcomponentChild(children, TableBody);
  const tableFoot = useGetSubcomponentChild(children, TableFoot);
  const tableRows = useGetSubcomponentChildren(children, TableRow);
  const tablePagination = useGetSubcomponentChild(children, TablePagination);
  const tablePageSize = useGetSubcomponentChild(children, TablePageSize);
  const tableRef = useRef<HTMLTableElement>(null);
  const [clonedThead, setClonedThead] = useState<HTMLElement | null>(null);
  const clonedInnerContainerRef = useRef<HTMLTableElement>(null);
  const scrollTicking = useRef<boolean>(false);
  const [thWidths, setThWidths] = useState<number[]>([]);

  const tableSettings = useMemo(() => {
    return {
      verticalSpacing,
      horizontalSpacing,
      rowHoverFx,
      stripedBg,
      tableBorder,
      rowBorder,
      columnBorder,
      stickyHeaders,
      testId,
      setThWidths,
    };
  }, [
    testId,
    stripedBg,
    stickyHeaders,
    verticalSpacing,
    horizontalSpacing,
    tableBorder,
    rowBorder,
    rowHoverFx,
    columnBorder,
    setThWidths,
  ]);

  useEventListener(
    'scroll',
    event => {
      if (!stickyHeaders) return;
      if (!scrollTicking.current) {
        scrollTicking.current = true;
        window.requestAnimationFrame(() => {
          if (event?.target) {
            const target = event.target as HTMLElement;
            const left = target.scrollLeft;
            if (clonedInnerContainerRef.current) {
              clonedInnerContainerRef.current.style.transform = `translateX(-${left}px)`;
            }
          }
          scrollTicking.current = false;
        });
      }
    },
    tableRef,
  );

  // @NOTE: keep track of the headers, so that we can clone them
  useEffect(() => {
    const thead = tableRef.current?.querySelector('thead');

    if (thead) {
      if (!clonedThead) {
        setClonedThead(thead);
      }
    }
  }, [clonedThead]);

  // @NOTE: keep the width of the sticky headers in sync with
  // the real ones
  useEffect(() => {
    const ths = clonedInnerContainerRef.current?.querySelectorAll('th');
    if (ths && ths.length > 0) {
      ths.forEach((th, index) => {
        // eslint-disable-next-line no-param-reassign
        th.style.minWidth = `${thWidths[index]}px`;
      });
    }
  }, [thWidths]);

  return (
    <ClassNames>
      {({ cx }) => (
        <TableContext.Provider value={tableSettings}>
          <Box {...props} testId={testId} sx={merge(baseContainerSx, sx)}>
            {tableCaption}
            {stickyHeaders ? (
              <Box
                sx={baseStickyContainerSx}
                testId={`${testId}__stickyHeadersContainer`}
                className={cx({
                  tableBorder,
                })}
              >
                {clonedThead && (
                  <Box
                    testId={`${testId}__stickyHeadersContainer__table`}
                    rc={
                      <table
                        ref={clonedInnerContainerRef}
                        // eslint-disable-next-line react/no-danger
                        dangerouslySetInnerHTML={{
                          __html: `<thead>${clonedThead.innerHTML}</thead>`,
                        }}
                      />
                    }
                    sx={merge(baseTableStyle, {
                      position: 'sticky',
                      top: '0',
                      width: `${tableRef.current?.offsetWidth}px`,
                      overflow: 'visible',
                    })}
                    className={cx('stickyTable', {
                      rowHoverFx,
                      stripedBg,
                      tableBorder,
                      columnBorder,
                      rowBorder,
                      stickyHeaders,
                    })}
                  />
                )}
              </Box>
            ) : null}

            <Box
              rc={<table ref={tableRef} />}
              sx={baseTableStyle}
              testId={`${testId}__table`}
              className={cx({
                rowHoverFx,
                stripedBg,
                tableBorder,
                columnBorder,
                rowBorder,
                stickyHeaders,
              })}
            >
              {tableHead}
              {tableBody || <TableBody>{tableRows}</TableBody>}
              {tablePagination || tablePageSize ? (
                <TableFoot>
                  <TableRow>
                    <TableCell colSpan={100}>
                      <Stack
                        direction="row"
                        justifyContent="flex-end"
                        alignItems="center"
                      >
                        {tablePageSize}
                        {tablePagination}
                      </Stack>
                    </TableCell>
                  </TableRow>
                </TableFoot>
              ) : null}
              {tableFoot}
            </Box>
          </Box>
        </TableContext.Provider>
      )}
    </ClassNames>
  );
}

Table.displayName = 'Table';
Table.Cell = TableCell;
Table.Row = TableRow;
Table.Body = TableBody;
Table.Head = TableHead;
Table.Foot = TableFoot;
Table.Caption = TableCaption;
Table.Pagination = TablePagination;
Table.PageSize = TablePageSize;
