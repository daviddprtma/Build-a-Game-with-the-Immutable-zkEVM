import { ReactElement, useContext } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { BodyProps } from '../../types/text';
import { getStartingSize } from '../../utils/styleHelpers';
import { Body } from '../Text';
import { TableContext } from './context';
import {
  DEFAULT_TABLE_SPACING,
  TABLE_SPACING_SIZES,
  TableChildParentNode,
} from './shared';
import { baseTdSx, getCellSx, getResponsiveCellSx } from './style';

export type TableCellProps<RC extends ReactElement | undefined = undefined> =
  BodyProps<RC> & { parentNode?: TableChildParentNode; colSpan?: number };

export function TableCell<RC extends ReactElement | undefined = undefined>({
  children,
  size = 'medium',
  sx = {},
  className,
  testId: testIdProp,
  parentNode,
  colSpan = 1,
  weight = parentNode === 'tbody' ? 'regular' : 'bold',
  rc = parentNode === 'tbody' ? (
    <td colSpan={colSpan} />
  ) : (
    <th colSpan={colSpan} />
  ),
  ...props
}: TableCellProps<RC>) {
  const theme = useTheme();
  const { testId, horizontalSpacing, verticalSpacing } =
    useContext(TableContext);
  const startingHorizontalSpacing = getStartingSize(
    horizontalSpacing,
    DEFAULT_TABLE_SPACING,
    TABLE_SPACING_SIZES,
  );
  const startingVerticalSpacing = getStartingSize(
    verticalSpacing,
    DEFAULT_TABLE_SPACING,
    TABLE_SPACING_SIZES,
  );
  const allSx = merge(
    baseTdSx,
    getCellSx({
      horizontalSpacing: startingHorizontalSpacing,
      verticalSpacing: startingVerticalSpacing,
      theme,
    }),
    getResponsiveCellSx({ horizontalSpacing, verticalSpacing, theme }),
    sx,
  );
  return (
    <Body
      {...props}
      size={size}
      weight={weight}
      rc={rc}
      sx={allSx}
      className={`${className ?? ''} ${parentNode === 'tbody' ? 'td' : 'th'}`}
      testId={`${testIdProp || testId}__${
        parentNode === 'tbody' ? 'td' : 'th'
      }`}
    >
      {children}
    </Body>
  );
}

TableCell.displayName = 'Table.Cell';
