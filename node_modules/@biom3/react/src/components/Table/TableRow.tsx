import { Children, cloneElement, ReactElement, useContext } from 'react';

import { isChildSubcomponent, renderNullAndWarnUser } from '../../utils';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { TableContext } from './context';
import { TableChildParentNode } from './shared';
import { TableCell } from './TableCell';

export type TableRowProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & { parentNode?: TableChildParentNode };

export function TableRow<RC extends ReactElement | undefined = undefined>({
  children,
  rc = <tr />,
  className,
  testId: testIdProp,
  parentNode,
  ...props
}: TableRowProps<RC>) {
  const { testId } = useContext(TableContext);
  return (
    <Box
      {...props}
      rc={rc}
      testId={`${testIdProp ?? testId}__tr`}
      className={`${className ?? ''} tr`}
    >
      {Children.map(children, child => {
        if (isChildSubcomponent(child, TableCell)) {
          return cloneElement(child, { parentNode });
        }
        return renderNullAndWarnUser(TableRow.displayName);
      })}
    </Box>
  );
}

TableRow.displayName = 'Table.Row';
