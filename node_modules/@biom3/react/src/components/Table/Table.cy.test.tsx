import {
  designTokens,
  onDarkBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';

import { useToggleableTheme } from '../../providers';
import { hexToRgbString } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Button } from '../Clickable';
import { Stack } from '../Stack';
import { Table } from './Table';

describe('<Table />', () => {
  it('should forward domRefs for all subcomponents', () => {
    const tableDomRef = cy.stub().as('tableDomRef');
    cyMountWithProviders(
      <Table testId="moo" domRef={tableDomRef}>
        <Table.Row>
          <Table.Cell>something</Table.Cell>
        </Table.Row>
      </Table>,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('@tableDomRef').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly render a valid table, even if tbody is not supplied', () => {
    cyMountWithProviders(
      <Table testId="moo">
        <Table.Row>
          <Table.Cell>something</Table.Cell>
        </Table.Row>
      </Table>,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__tbody').should('exist');
    cySmartGet('moo__tr').should('exist');
    cySmartGet('moo__td').should('exist');
  });

  context('Table styling', () => {
    it('should NOT render table with tableBorder, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__table')
        .should('have.css', 'border')
        .and('match', /none/);
    });

    it('should render table with tableBorder, when necessary', () => {
      cyMountWithProviders(
        <Table testId="moo" tableBorder stickyHeaders={false}>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__table')
        .should('have.css', 'border')
        .and('match', /1px solid/);
      cySmartGet('moo__table').should(
        'have.css',
        'borderColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.200',
          ),
        ),
      );

      cyMountWithProviders(
        <Table testId="moo" tableBorder>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__table')
        .should('have.css', 'borderTop')
        .and('match', /0px solid/);
      cySmartGet('moo__table')
        .should('have.css', 'borderLeft')
        .and('match', /1px solid/);
      cySmartGet('moo__table')
        .should('have.css', 'borderRight')
        .and('match', /1px solid/);
      cySmartGet('moo__table')
        .should('have.css', 'borderBottom')
        .and('match', /1px solid/);
      cySmartGet('moo__table').should(
        'have.css',
        'borderColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.200',
          ),
        ),
      );
    });

    it('should render table with "medium" vertical cell spacing, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption>something</Table.Caption>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__th').should('have.css', 'paddingTop', '24px');
      cySmartGet('moo__td').should('have.css', 'paddingTop', '24px');
      cySmartGet('moo__caption').should('have.css', 'marginBottom', '24px');
    });

    it('should render table with responsive custom vertical cell spacing, when necessary', () => {
      cy.viewport(designTokens.base.breakpoint.small - 10, 300);
      cyMountWithProviders(
        <Table testId="moo" verticalSpacing={['xxSmall', 'xSmall', 'small']}>
          <Table.Caption>something</Table.Caption>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__th').should('have.css', 'paddingTop', '4px');
      cySmartGet('moo__td').should('have.css', 'paddingTop', '4px');
      cySmartGet('moo__caption').should('have.css', 'marginBottom', '4px');

      cy.viewport(designTokens.base.breakpoint.small, 300);

      cySmartGet('moo__th').should('have.css', 'paddingTop', '8px');
      cySmartGet('moo__td').should('have.css', 'paddingTop', '8px');
      cySmartGet('moo__caption').should('have.css', 'marginBottom', '8px');

      cy.viewport(designTokens.base.breakpoint.medium, 300);

      cySmartGet('moo__th').should('have.css', 'paddingTop', '12px');
      cySmartGet('moo__td').should('have.css', 'paddingTop', '12px');
      cySmartGet('moo__caption').should('have.css', 'marginBottom', '12px');
    });

    it('should render table with "medium" horizontal cell spacing, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption>something</Table.Caption>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__th').should('have.css', 'paddingLeft', '24px');
      cySmartGet('moo__td').should('have.css', 'paddingLeft', '24px');
      cySmartGet('moo__caption').should('have.css', 'paddingLeft', '0px');
    });

    it('should render table with responsive custom horizontal cell spacing, when necessary', () => {
      cy.viewport(designTokens.base.breakpoint.small - 10, 300);
      cyMountWithProviders(
        <Table testId="moo" horizontalSpacing={['xxSmall', 'xSmall', 'small']}>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__th').should('have.css', 'paddingLeft', '4px');
      cySmartGet('moo__td').should('have.css', 'paddingLeft', '4px');

      cy.viewport(designTokens.base.breakpoint.small, 300);

      cySmartGet('moo__th').should('have.css', 'paddingLeft', '8px');
      cySmartGet('moo__td').should('have.css', 'paddingLeft', '8px');

      cy.viewport(designTokens.base.breakpoint.medium, 300);

      cySmartGet('moo__th').should('have.css', 'paddingLeft', '12px');
      cySmartGet('moo__td').should('have.css', 'paddingLeft', '12px');
    });

    it('should NOT render table with striped row bgs, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td').should(
        'have.css',
        'backgroundColor',
        'rgba(0, 0, 0, 0)',
      );
    });

    it('should render table with striped row bgs, when necessary', () => {
      cyMountWithProviders(
        <Table testId="moo" stripedBg>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>else</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td')
        .eq(0)
        .should(
          'have.css',
          'backgroundColor',
          hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.translucent.standard.100',
            ),
          ),
        );
      cySmartGet('moo__td')
        .eq(1)
        .should('have.css', 'backgroundColor', 'rgba(0, 0, 0, 0)');
    });

    it('should render table with row hover fx, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td').should(
        'have.css',
        'backgroundColor',
        'rgba(0, 0, 0, 0)',
      );
      cySmartGet('moo__td').realHover();
      cySmartGet('moo__td').should(
        'have.css',
        'backgroundColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.50',
          ),
        ),
      );
    });

    it('should NOT render table with row hover fx, when necessary', () => {
      cyMountWithProviders(
        <Table testId="moo" rowHoverFx={false}>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td').should(
        'have.css',
        'backgroundColor',
        'rgba(0, 0, 0, 0)',
      );
      cySmartGet('moo__td').realHover();
      cySmartGet('moo__td').should(
        'have.css',
        'backgroundColor',
        'rgba(0, 0, 0, 0)',
      );
    });

    it('should render table with row borders, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__td').should('have.css', 'borderBottomWidth', '1px');
      cySmartGet('moo__th').should('have.css', 'borderBottomWidth', '1px');
      cySmartGet('moo__td').should(
        'have.css',
        'borderBottomColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.200',
          ),
        ),
      );
      cySmartGet('moo__th').should(
        'have.css',
        'borderBottomColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.300',
          ),
        ),
      );
    });

    it('should NOT render table with row borders, when necessary', () => {
      cyMountWithProviders(
        <Table testId="moo" rowBorder={false}>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__td').should('have.css', 'borderWidth', '0px');
      cySmartGet('moo__th').should('have.css', 'borderWidth', '0px');
    });

    it('should NOT render table with column borders, by default', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td').should('have.css', 'borderRightWidth', '0px');
      cySmartGet('moo__th').should('have.css', 'borderRightWidth', '0px');
    });

    it('should render table with column borders, when necessary', () => {
      cyMountWithProviders(
        <Table testId="moo" columnBorder>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__td').should('have.css', 'borderRightWidth', '1px');
      cySmartGet('moo__th').should('have.css', 'borderRightWidth', '1px');
      cySmartGet('moo__td').should(
        'have.css',
        'borderRightColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.200',
          ),
        ),
      );
      cySmartGet('moo__th').should(
        'have.css',
        'borderRightColor',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.300',
          ),
        ),
      );
    });
  });

  context('Sticky headers', () => {
    it('should correctly duplicate all table headers', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
              <Table.Cell>else</Table.Cell>
              <Table.Cell>entirely</Table.Cell>
            </Table.Row>
          </Table.Head>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .should('have.length', 3);

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(0)
        .should('have.text', 'something');
      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(1)
        .should('have.text', 'else');
      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(2)
        .should('have.text', 'entirely');
    });

    it(`should match th widths when they're customised via sx`, () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell sx={{ width: '130px' }}>something</Table.Cell>
              <Table.Cell sx={{ width: '120px' }}>else</Table.Cell>
              <Table.Cell sx={{ width: '150px' }}>entirely</Table.Cell>
            </Table.Row>
          </Table.Head>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(0)
        .should('have.css', 'width', '130px');
      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(1)
        .should('have.css', 'width', '120px');
      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .eq(2)
        .should('have.css', 'width', '150px');
    });

    it('should render table with sticky headers, by default', () => {
      cy.viewport(150, 150);
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        { useAllProviders: true },
      );

      cySmartGet('moo__stickyHeadersContainer__table')
        .should('exist')
        .and('be.visible');
    });

    it('should NOT render table with sticky headers, when neccissary', () => {
      cy.viewport(150, 150);
      cyMountWithProviders(
        <Table testId="moo" stickyHeaders={false}>
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__stickyHeadersContainer__table').should('not.exist');
    });

    it('should scroll the sticky headers with the table, when user scrolls', () => {
      cy.viewport(200, 150);
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
              <Table.Cell>something</Table.Cell>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__table').scrollTo('right', { duration: 300 });
      cy.wait(100);
      cySmartGet('moo__stickyHeadersContainer__table')
        .should('have.css', 'transform')
        .then(transform => {
          const vals = transform.match(/-?\d+\.?\d*/g);
          const translate = parseInt(vals?.[4] || 0, 10);
          expect(translate).to.be.lessThan(-170);
        });
      cySmartGet('moo__table').scrollTo('left', { duration: 300 });
      cySmartGet('moo__stickyHeadersContainer__table').should(
        'have.css',
        'transform',
        'matrix(1, 0, 0, 1, 0, 0)',
      );
    });

    it('should update the sticky headers when the table is resized', () => {
      cy.viewport(200, 150);

      cyMountWithProviders(
        <Table
          testId="moo"
          sx={{
            '& td, & th': {
              minWidth: '120vw',
            },
          }}
        >
          <Table.Head>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
              <Table.Cell>else</Table.Cell>
              <Table.Cell>entirely</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
            <Table.Cell>else</Table.Cell>
            <Table.Cell>entirely</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .should('have.css', 'width', '240px');

      cy.viewport(400, 150);

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .should('have.css', 'width', '480px');
    });

    it('should re-capture sticky table headers, when theme color changes', () => {
      function TableWithThemeToggleBtn() {
        const { toggleTheme } = useToggleableTheme();
        return (
          <Stack sx={{ bg: 'base.color.neutral.1000' }} alignItems="center">
            <Button testId="toggle" onClick={toggleTheme}>
              toggle theme
            </Button>
            <Table testId="moo">
              <Table.Head>
                <Table.Row>
                  <Table.Cell size="xSmall">something</Table.Cell>
                </Table.Row>
              </Table.Head>

              <Table.Row>
                <Table.Cell size="xSmall">something</Table.Cell>
              </Table.Row>
            </Table>
          </Stack>
        );
      }
      cyMountWithProviders(<TableWithThemeToggleBtn />, {
        useAllProviders: true,
        withThemeToggle: true,
      });

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .should(
          'have.color',
          smartPickTokenValue(designTokens, 'base.color.text.primary'),
        );
      cySmartGet('toggle').click();

      cySmartGet('moo__stickyHeadersContainer__table')
        .find('th')
        .should(
          'have.color',
          smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
        );
    });
  });

  context('Subcomponents', () => {
    it('should allow caption to be above or below table', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption>table caption text</Table.Caption>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__caption').should('have.css', 'order', '-1');

      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption captionSide="bottom">table caption text</Table.Caption>
          <Table.Row>
            <Table.Cell>something</Table.Cell>
          </Table.Row>
        </Table>,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__caption').should('have.css', 'order', '1');
    });

    it('should correctly render all subcomponents, by default', () => {});
    it('should warn the user when they are attempting to render an invalid subcomponent', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cySmartGet('@consoleWarn').should('not.have.been.called');

      cyMountWithProviders(
        <Table testId="moo">
          <Table.Head>
            <div>moo</div>
          </Table.Head>
        </Table>,
        { useAllProviders: true },
      );

      cySmartGet('@consoleWarn').should(
        'have.been.calledWithMatch',
        /BIOME Render Warning/,
      );
      cySmartGet('@consoleWarn').should(
        'have.been.calledWithMatch',
        /\(Table\.Head\) is currently rendering null/,
      );
    });

    it('should forward domRefs for all subcomponents', () => {
      const headRef = cy.stub().as('headRef');
      const tbodyRef = cy.stub().as('tbodyRef');
      const trRef = cy.stub().as('trRef');
      const thRef = cy.stub().as('thRef');
      const tdRef = cy.stub().as('tdRef');
      const captionRef = cy.stub().as('captionRef');
      const tfootRef = cy.stub().as('tfootRef');
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption domRef={captionRef}>mooo</Table.Caption>
          <Table.Head domRef={headRef}>
            <Table.Row domRef={trRef}>
              <Table.Cell domRef={thRef}>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Body domRef={tbodyRef}>
            <Table.Row>
              <Table.Cell domRef={tdRef}>something</Table.Cell>
            </Table.Row>
          </Table.Body>
          <Table.Foot domRef={tfootRef}>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Foot>
        </Table>,
        { useAllProviders: true },
      );

      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
      cySmartGet('@headRef').should('have.been.calledWithMatch', {
        nodeName: 'THEAD',
      });
      cySmartGet('@tbodyRef').should('have.been.calledWithMatch', {
        nodeName: 'TBODY',
      });
      cySmartGet('@trRef').should('have.been.calledWithMatch', {
        nodeName: 'TR',
      });
      cySmartGet('@thRef').should('have.been.calledWithMatch', {
        nodeName: 'TH',
      });
      cySmartGet('@tdRef').should('have.been.calledWithMatch', {
        nodeName: 'TD',
      });
      cySmartGet('@tfootRef').should('have.been.calledWithMatch', {
        nodeName: 'TFOOT',
      });
    });

    it('should allow all subcomponents to recieve custom sx', () => {
      cyMountWithProviders(
        <Table testId="moo" sx={{ bg: 'gold' }}>
          <Table.Caption sx={{ bg: 'gold' }}>mooo</Table.Caption>
          <Table.Head sx={{ bg: 'gold' }}>
            <Table.Row sx={{ bg: 'gold !important' }}>
              <Table.Cell sx={{ bg: 'gold !important' }}>something</Table.Cell>
            </Table.Row>
          </Table.Head>
          <Table.Body sx={{ bg: 'gold' }}>
            <Table.Row>
              <Table.Cell sx={{ bg: 'gold !important' }}>something</Table.Cell>
            </Table.Row>
          </Table.Body>
          <Table.Foot sx={{ bg: 'gold' }}>
            <Table.Row>
              <Table.Cell>something</Table.Cell>
            </Table.Row>
          </Table.Foot>
        </Table>,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo__caption').should('have.backgroundColor', 'gold');
      cySmartGet('moo__thead').should('have.backgroundColor', 'gold');
      cySmartGet('moo__tr').should('have.backgroundColor', 'gold');
      cySmartGet('moo__th').should('have.backgroundColor', 'gold');
      cySmartGet('moo__tbody').should('have.backgroundColor', 'gold');
      cySmartGet('moo__td').should('have.backgroundColor', 'gold');
      cySmartGet('moo__tfoot').should('have.backgroundColor', 'gold');
    });

    it('should allow the user to easily customise size of caption, th and td text size (by extending from <Body />)', () => {
      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption size="large">mooo</Table.Caption>
          <Table.Head>
            <Table.Row>
              <Table.Cell size="large">something</Table.Cell>
            </Table.Row>
          </Table.Head>

          <Table.Row>
            <Table.Cell size="large">something</Table.Cell>
          </Table.Row>
        </Table>,
        { useAllProviders: true },
      );

      cySmartGet('moo__caption').should('have.css', 'fontSize', '20px');
      cySmartGet('moo__th').should('have.css', 'fontSize', '20px');
      cySmartGet('moo__td').should('have.css', 'fontSize', '20px');

      cyMountWithProviders(
        <Table testId="moo">
          <Table.Caption size="xSmall">mooo</Table.Caption>
          <Table.Head>
            <Table.Row>
              <Table.Cell size="xSmall">something</Table.Cell>
            </Table.Row>
          </Table.Head>

          <Table.Row>
            <Table.Cell size="xSmall">something</Table.Cell>
          </Table.Row>
        </Table>,
        { useAllProviders: true },
      );

      cySmartGet('moo__caption').should('have.css', 'fontSize', '12px');
      cySmartGet('moo__th').should('have.css', 'fontSize', '12px');
      cySmartGet('moo__td').should('have.css', 'fontSize', '12px');
    });
  });
});
