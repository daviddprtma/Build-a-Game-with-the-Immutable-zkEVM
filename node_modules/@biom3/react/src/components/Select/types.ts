import { MouseEvent, ReactNode } from 'react';

import { MenuItemProps } from '../../types/clickable';
import { InputTextAlign, InputValidationStatus } from '../../types/input';
import { MakeResponsive, StandardComponentWithProps } from '../../types/shared';
import { SxComponentProps } from '../../types/sxProps';
import { DEFAULT_TEXT_INPUT_SIZE, TEXT_INPUT_SIZES } from '../TextInput';

export const DEFAULT_SELECT_SIZE = DEFAULT_TEXT_INPUT_SIZE;
export const selectSizes = TEXT_INPUT_SIZES;
export type SelectSize = (typeof selectSizes)[number];

export type OptionKey = string | number | null;
export type OnOptionClick = (children: ReactNode, optionKey: OptionKey) => void;
export type OptionProps = Omit<MenuItemProps<undefined, Function>, 'rc'> & {
  onOptionClick?: OnOptionClick;
  optionKey: number | string;
};

type SelectDescriminatedUnion =
  | {
      defaultOption?: never;
      selectedOption: OptionKey;
      onSelectChange: (value: OptionKey) => void;
    }
  | {
      selectedOption?: never;
      defaultOption?: OptionKey;
      onSelectChange?: (value: OptionKey) => void;
    };

export type SelectProps = Omit<
  StandardComponentWithProps<
    HTMLButtonElement,
    SelectDescriminatedUnion & {
      defaultLabel?: string;
      validationStatus?: InputValidationStatus;
      children?: ReactNode;
      id?: string;
      popoverContainerSx?: SxComponentProps['sx'];
      size?: MakeResponsive<SelectSize>;
      textAlign?: InputTextAlign;
      targetClickOveride?: (event: MouseEvent<HTMLButtonElement>) => void;
      disabled?: boolean;
    }
  >,
  'rc'
>;
