import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import {
  ETH_TOKEN_IMAGE_URL,
  GOG_TOKEN_IMAGE_URL,
  IMX_TOKEN_IMAGE_URL,
} from '../../utils/dummyImages';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Option } from './Option';
import { noOptionFoundErrorText, Select } from './Select';
import { OptionKey } from './types';

const DEBOUNCE_TIME = 40;

function SelectWithState() {
  const [selectedOption, setSelectedOption] = useState<OptionKey>('moo');
  return (
    <Select
      testId="moo"
      selectedOption={selectedOption}
      onSelectChange={moo => setSelectedOption(moo)}
    >
      <Option optionKey="moo" testId="option1">
        <Option.Icon icon="Discord" />
        <Option.Label>mooo</Option.Label>
      </Option>
      <Option optionKey="cow" testId="option2">
        <Option.FramedImage imageUrl={IMX_TOKEN_IMAGE_URL} />
        <Option.Label>cow</Option.Label>
      </Option>
    </Select>
  );
}

function ControlledSelectWithReset() {
  const [selectedOption, setSelectedOption] = useState<OptionKey>();
  return (
    <>
      <button
        type="button"
        data-testid="reset"
        onClick={() => setSelectedOption(null)}
      >
        reset
      </button>
      <Select
        testId="moo"
        selectedOption={selectedOption}
        onSelectChange={moo => setSelectedOption(moo)}
      >
        <Option optionKey="moo" testId="option1">
          <Option.Icon icon="Discord" />
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow" testId="option2">
          <Option.FramedImage imageUrl={IMX_TOKEN_IMAGE_URL} />
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>
    </>
  );
}

describe('<Select />', () => {
  beforeEach(() => {
    cy.viewport(300, 204);
  });

  it('should correctly forward the Popover target domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <Select testId="moo" domRef={domRefStub} defaultLabel="moo cow">
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
      innerHTML: Cypress.sinon.match('moo cow'),
    });
  });

  it('should show a popover menu to reveal all options', () => {
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // @NOTE:
    // inside of the Select component, we use the useResizeObserver to get the
    // target element's size. Sadly, this function takes time to return the value,
    // because of the debounce time, and cypress has a bug where cy.clock() doesn't
    // actually advance debounce timers. :sob:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__content').should('not.exist');
    cySmartGet('moo__target').click();
    cySmartGet('moo__content').should('exist');
  });

  it('should render defaultIcon and defaultLabel, when neccissary', () => {
    cyMountWithProviders(
      <Select testId="moo" defaultLabel="moo cow">
        <Select.DefaultIcon icon="AirDrop" />
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );
    cySmartGet('moo__target').should('include.text', 'moo cow');
    cySmartGet('moo__target__defaultIcon').should('exist');
  });

  it('should update button text and icon, when a new option is selected', () => {
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
          <Option.Icon icon="AirDrop" />
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').should('include.text', 'Select an option');
    cySmartGet('moo__target__selectedIcon').should('not.exist');
    cySmartGet('moo__target').click();
    // @NOTE: need a force in here, for ci runs, it seems. :shrug:
    cySmartGet('moo__content__verticalMenu')
      .children()
      .eq(0)
      .click({ force: true });
    cySmartGet('moo__target').should('include.text', 'mooo');
    cySmartGet('moo__target__selectedIcon').should('exist');
    cySmartGet('moo__content').should('not.exist');
  });

  it('should allow the user to customise the popover container styles', () => {
    cyMountWithProviders(
      <Select
        defaultLabel="moo cow"
        testId="moo"
        sx={{ width: '200px' }}
        popoverContainerSx={{ width: '290px' }}
      >
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').should('have.css', 'width', '216px');
    cySmartGet('moo__target').click();
    cySmartGet('moo__content').should('have.css', 'width', '290px');
  });

  it('should allow popover content to scroll, when the list of options is long enough', () => {
    cy.viewport(300, 400);
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey={1}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={2}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={3}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={4}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={5}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={6}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={7}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={8}>
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').click();
    cySmartGet('moo__content').should('have.css', 'height', '300px');
    cySmartGet('moo__content__verticalMenu')
      .children()
      .eq(7)
      .should('not.be.visible');
    cySmartGet('moo__content__verticalMenu').scrollTo('bottom');
    cySmartGet('moo__content__verticalMenu')
      .children()
      .eq(7)
      .should('be.visible');
  });

  it('should not crash when the browser screen is smaller than the size of the popup', () => {
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey={1}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={2}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={3}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={4}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={5}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={6}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={7}>
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey={8}>
          <Option.Label>mooo</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').click();
    cySmartGet('moo__content')
      .should('have.css', 'height', '300px')
      .and('be.visible');
  });

  it('should close the popover when the user clicks outside of the popover', () => {
    cy.viewport(400, 400);
    cyMountWithProviders(
      <Select testId="moo" selectedOption="moo">
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow">
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').click();
    cySmartGet('moo__content').should('exist');
    cy.get('body').click(150, 390);
    cySmartGet('moo__content').should('not.exist');
  });

  it('should close the popover, when the window is resized', () => {
    cyMountWithProviders(
      <Select testId="moo" selectedOption="moo">
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow">
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    // see @NOTE in first spec:
    cy.wait(DEBOUNCE_TIME);
    cySmartGet('moo__target').click();
    cySmartGet('moo__content').should('exist');
    cy.viewport(320, 300);
    cySmartGet('moo__content').should('not.exist');
  });

  it('should allow the parent component to over-ride the default onClick behaviour of a <Select> component', () => {
    const onClick = cy.stub().as('onClick');
    cyMountWithProviders(
      <Select testId="moo" targetClickOveride={onClick}>
        <Option optionKey="moo">
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow">
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    cySmartGet('@onClick').should('not.have.been.called');
    cySmartGet('moo__target').click({ force: true });
    cySmartGet('@onClick').should('have.been.calledWithMatch', {
      target: { nodeName: 'BUTTON' },
    });
    cySmartGet('moo__content').should('not.exist');
  });

  it('should render correctly when an item with an icon is selected', () => {
    cy.viewport(350, 300);
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey="one">
          <Option.Icon icon="AirDrop" />
          <Option.Label>option one</Option.Label>
        </Option>
        <Option optionKey="two">
          <Option.Icon icon="Add" />
          <Option.Label>option two</Option.Label>
        </Option>
        <Option optionKey="threw">
          <Option.Icon icon="Calendar" />
          <Option.Label>option three</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    cySmartGet('moo__target').click();
    cySmartGet('moo__content__verticalMenu').children().eq(0).click();
    cySmartGet('moo__target').should(
      'have.css',
      'padding-left',
      designTokens.base.spacing.x11,
    );
    cySmartGet('moo__target__selectedLabel')
      .should('have.text', 'option one')
      .and('have.css', 'font-weight', '400');
  });

  it('should correctly support a `disabled` state', () => {
    cyMountWithProviders(
      <Select testId="moo" disabled>
        <Option optionKey="moo" testId="option1">
          <Option.Icon icon="Discord" />
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow" testId="option2">
          <Option.FramedImage imageUrl={IMX_TOKEN_IMAGE_URL} />
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    cySmartGet('moo__target').should('have.attr', 'disabled');
    cySmartGet('moo__target').should('have.css', 'pointer-events', 'none');
    cySmartGet('option1').should('not.exist');
    cySmartGet('moo__target').click({ force: true });
    cySmartGet('option1').should('not.exist');
  });

  context('Subcomponents', () => {
    it('should allow all subcomponent children to pass down sx styles', () => {
      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo" sx={{ bg: 'gold' }} testId="option">
            <Option.Icon icon="Add" sx={{ bg: 'black' }} testId="optionIcon" />
            <Option.Label sx={{ bg: 'black' }} testId="optionLabel">
              mooo
            </Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option').should('have.backgroundColor', 'gold');
      cySmartGet('optionLabel').should('have.backgroundColor', 'black');
      cySmartGet('optionIcon').should('have.backgroundColor', 'black');

      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo">
            <Option.FramedImage
              imageUrl={ETH_TOKEN_IMAGE_URL}
              testId="optionFramedImage"
              sx={{ bg: 'black' }}
            />
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('optionFramedImage').should('have.backgroundColor', 'black');
    });

    it('should correctly fwd domRef from all subcomponents', () => {
      const iconDomRef = cy.stub().as('iconDomRef');
      const framedImageDomRef = cy.stub().as('framedImageDomRef');
      const labelDomRef = cy.stub().as('labelDomRef');
      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo" testId="option">
            <Option.Icon icon="Add" testId="optionIcon" domRef={iconDomRef} />
            <Option.Label testId="optionLabel" domRef={labelDomRef}>
              mooo
            </Option.Label>
          </Option>
          <Option optionKey="moo2" testId="option">
            <Option.FramedImage
              imageUrl={ETH_TOKEN_IMAGE_URL}
              testId="optionFramedImage"
              domRef={framedImageDomRef}
            />
            <Option.Label testId="optionLabel">mooo</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('@iconDomRef').should('not.have.been.called');
      cySmartGet('@framedImageDomRef').should('not.have.been.called');
      cySmartGet('@labelDomRef').should('not.have.been.called');
      cySmartGet('moo__target').click();
      cySmartGet('@iconDomRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });
      cySmartGet('@framedImageDomRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
      cySmartGet('@labelDomRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
    });
  });

  it('should color the Select differently when something is selected, vs the default state', () => {
    cyMountWithProviders(
      <Select testId="moo">
        <Option optionKey="moo" testId="option1">
          <Option.Label>mooo</Option.Label>
        </Option>
        <Option optionKey="cow">
          <Option.Label>cow</Option.Label>
        </Option>
      </Select>,
      { useAllProviders: true },
    );

    cySmartGet('moo__target').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );

    cySmartGet('moo__target').click();
    cySmartGet('option1').trigger('mousedown');

    cySmartGet('moo__target').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
  });

  context('Uncontrolled API', () => {
    it('should allow the parent to specify which option (if any) is selected by default', () => {
      cyMountWithProviders(
        <Select testId="moo" defaultOption="cow">
          <Option optionKey="moo" testId="option1">
            <Option.Icon icon="Discord" />
            <Option.Label>moo</Option.Label>
          </Option>
          <Option optionKey="cow" testId="option2">
            <Option.Icon icon="Apple" />
            <Option.Label>cow</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      cySmartGet('moo__target__selectedIcon').should(
        'have.attr',
        'data-icon',
        'Apple',
      );
      cySmartGet('moo__target__selectedLabel').should('have.text', 'cow');
    });

    it('should still allow the parent component know when select changes happen', () => {
      const onChange = cy.stub().as('onChangeStub');
      cyMountWithProviders(
        <Select testId="moo" onSelectChange={onChange}>
          <Option optionKey="moo">
            <Option.Label>mooo</Option.Label>
          </Option>
          <Option optionKey="cow">
            <Option.Label>cow</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__content__verticalMenu').children().eq(1).click();
      cySmartGet('@onChangeStub').should('have.been.calledWith', 'cow');
    });

    it('should change the displayed "selected" label, when a selection is made', () => {
      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo" testId="option">
            <Option.Icon icon="Discord" />
            <Option.Label>mooo</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option').click();
      cySmartGet('moo__target__selectedLabel').should('have.text', 'mooo');
    });

    it('should change the displayed "selected" icon, when a selection is made', () => {
      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo" testId="option">
            <Option.Icon icon="Discord" />
            <Option.Label>mooo</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option').click();
      cySmartGet('moo__target__selectedIcon')
        .should('exist')
        .and('have.attr', 'data-icon', 'Discord');
    });

    it('should change the displayed "selected" framedImage, when a selection is made', () => {
      cyMountWithProviders(
        <Select testId="moo">
          <Option optionKey="moo" testId="option">
            <Option.FramedImage imageUrl={IMX_TOKEN_IMAGE_URL} />
            <Option.Label>mooo</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option').click();
      cySmartGet('moo__target__selectedFramedImage__innerContainer__cloudImage')
        .should('exist')
        .and('have.attr', 'src')
        .and(
          'include',
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvY3VycmVuY3ktaWNvbnMvY3VycmVuY3ktLWlteC5zdmc=',
        );
    });

    it('should show the defaultIcon, when the selectedOption contains no DefaultImage or DefaultIcon', () => {
      function SelectWithDefaultIconState() {
        return (
          <Select testId="moo" selectedOption="moo">
            <Select.DefaultIcon icon="Discord" testId="defaultIcon" />
            <Option optionKey="moo" testId="option1">
              <Option.Label>mooo</Option.Label>
            </Option>
            <Option optionKey="cow" testId="option2">
              <Option.Label>cow</Option.Label>
            </Option>
          </Select>
        );
      }

      cyMountWithProviders(<SelectWithDefaultIconState />, {
        useAllProviders: true,
      });

      cySmartGet('defaultIcon').should('exist');
    });
  });

  context('Controlled API', () => {
    it('should allow the parent component to control the selected option', () => {
      cyMountWithProviders(
        <Select testId="moo" selectedOption="moo">
          <Option optionKey="moo">
            <Option.Label>mooo</Option.Label>
            <Option.Icon icon="Discord" />
          </Option>
          <Option optionKey="cow">
            <Option.Label>cow</Option.Label>
            <Option.Icon icon="Add" />
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').should('include.text', 'mooo');
      cySmartGet('moo__target__controlledIcon').should('exist');
    });

    it('should correctly display a controlled selected FramedImage, when the input is controlled', () => {
      cyMountWithProviders(
        <Select testId="moo" selectedOption="imx">
          <Option optionKey="imx">
            <Option.FramedImage imageUrl={IMX_TOKEN_IMAGE_URL} />
            <Option.Label>imx</Option.Label>
          </Option>
          <Option optionKey="gog">
            <Option.FramedImage imageUrl={GOG_TOKEN_IMAGE_URL} />
            <Option.Label>gog</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').should('have.css', 'padding-left', '44px');
      cySmartGet(
        'moo__target__controlledFramedImage__innerContainer__cloudImage',
      )
        .should('exist')
        .and('have.attr', 'src')
        .and(
          'include',
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvY3VycmVuY3ktaWNvbnMvY3VycmVuY3ktLWlteC5zdmc=',
        );
    });

    it('should NOT allow the user to control the selected option, when not hooked up correctly', () => {
      cyMountWithProviders(
        <Select testId="moo" selectedOption="moo">
          <Option optionKey="moo">
            <Option.Label>mooo</Option.Label>
          </Option>
          <Option optionKey="cow">
            <Option.Label>cow</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').should('include.text', 'mooo');
      cySmartGet('moo__target').click();
      cySmartGet('moo__content__verticalMenu').children().eq(1).click();
      cySmartGet('moo__target').should('include.text', 'mooo');
    });

    it('should allow the user to control the selected option, when hooked up correctly', () => {
      cyMountWithProviders(<SelectWithState />, { useAllProviders: true });

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').should('include.text', 'mooo');
      cySmartGet('moo__target').click();
      cySmartGet('moo__content__verticalMenu').children().eq(1).click();
      cySmartGet('moo__target').should('include.text', 'cow');
    });

    it('should change the displayed "selected" icon, when a selection is made', () => {
      cyMountWithProviders(<SelectWithState />, { useAllProviders: true });

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option1').click();
      cySmartGet('moo__target__controlledIcon')
        .should('exist')
        .and('have.attr', 'data-icon', 'Discord');
    });

    it('should change the displayed "selected" framedImage, when a selection is made', () => {
      cyMountWithProviders(<SelectWithState />, { useAllProviders: true });

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__target').click();
      cySmartGet('option2').click();
      cySmartGet(
        'moo__target__controlledFramedImage__innerContainer__cloudImage',
      )
        .should('exist')
        .and('have.attr', 'src')
        .and(
          'include',
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvY3VycmVuY3ktaWNvbnMvY3VycmVuY3ktLWlteC5zdmc=',
        );
    });

    it('should deselect any currently selected option, when selectedOption is set to null', () => {
      cy.viewport(300, 300);
      cyMountWithProviders(<ControlledSelectWithReset />, {
        useAllProviders: true,
      });

      cySmartGet('moo__target').click();
      cySmartGet('moo__content__verticalMenu').children().eq(0).click();
      cySmartGet('reset').click();
      cySmartGet('moo__target').should('include.text', 'Select an option');
    });

    it('should throw an error when an invalid selectedOption is passed in', done => {
      const BAD_SELECTION = 'BAD_SELECTION';
      cy.on('uncaught:exception', err => {
        expect(err.message).to.include(noOptionFoundErrorText(BAD_SELECTION));

        // using mocha's async done callback to finish
        // this test so we prove that an uncaught exception
        // was thrown
        done();

        // return false to prevent the error from
        // failing this test
        return false;
      });

      cyMountWithProviders(
        <Select testId="moo" selectedOption={BAD_SELECTION}>
          <Option optionKey="moo">
            <Option.Label>mooo</Option.Label>
          </Option>
          <Option optionKey="cow">
            <Option.Label>cow</Option.Label>
          </Option>
        </Select>,
        { useAllProviders: true },
      );

      // see @NOTE in first spec:
      cy.wait(DEBOUNCE_TIME);
    });

    it('should show the defaultIcon, when the selectedOption contains no DefaultImage or DefaultIcon', () => {
      function SelectWithDefaultIconState() {
        const [selectedOption, setSelectedOption] = useState<OptionKey>('moo');
        return (
          <Select
            testId="moo"
            selectedOption={selectedOption}
            onSelectChange={moo => setSelectedOption(moo)}
          >
            <Select.DefaultIcon icon="Discord" testId="defaultIcon" />
            <Option optionKey="moo" testId="option1">
              <Option.Label>mooo</Option.Label>
            </Option>
            <Option optionKey="cow" testId="option2">
              <Option.Label>cow</Option.Label>
            </Option>
          </Select>
        );
      }

      cyMountWithProviders(<SelectWithDefaultIconState />, {
        useAllProviders: true,
      });

      cySmartGet('defaultIcon').should('exist');
    });
  });
});
