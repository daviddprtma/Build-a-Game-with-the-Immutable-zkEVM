/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/click-events-have-key-events */
import { useConvertSxToEmotionStyles } from '../../hooks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { ButtCon } from '../Clickable';
import { SmartClone } from './SmartClone';

describe('<SmartClone/ >', () => {
  context('when passed a fragment or a primitive child', () => {
    it('should render a span, when passed a simple string as children', () => {
      cyMountWithProviders(<SmartClone testId="moo">something</SmartClone>);
      cySmartGet('moo').its('0.nodeName').should('eq', 'SPAN');
    });

    it('should render a div, when requested', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" fallBackDomNode="div">
          something
        </SmartClone>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    });

    it('should render a span, when passed a fragment as children', () => {
      cyMountWithProviders(
        <SmartClone testId="moo">
          <>something</>
        </SmartClone>,
      );
      cySmartGet('moo').its('0.nodeName').should('eq', 'SPAN');
    });

    it('should correctly flatten down sx props into css', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" sx={{ bg: 'gold' }}>
          something
        </SmartClone>,
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
    });

    it('should correctly forward the domRef', () => {
      const domRef = cy.stub().as('domRef');
      cySmartGet('@domRef').should('not.have.been.calledOnce');
      cyMountWithProviders(
        <SmartClone testId="moo" domRef={domRef as any}>
          something
        </SmartClone>,
      );
      cySmartGet('@domRef').should('have.been.calledOnce');
    });

    it('should correctly render html attr props', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" title="moo" aria-details="moo" data-moo="moo">
          something
        </SmartClone>,
      );
      cySmartGet('moo').should('have.attr', 'title', 'moo');
      cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
      cySmartGet('moo').should('have.attr', 'data-moo', 'moo');
    });

    it('should pass through an onClick handler', () => {
      const onClick = cy.stub().as('onclick');
      cyMountWithProviders(
        <SmartClone testId="moo" onClick={onClick}>
          something
        </SmartClone>,
      );
      cySmartGet('@onclick').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@onclick').should('have.been.calledOnce');
    });

    it('should pass through a className prop', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" className="moo">
          something
        </SmartClone>,
      );
      cySmartGet('moo').should('have.class', 'moo');
    });
  });

  context('when passed a REACT component child', () => {
    it('should not pass through an onClick prop, when neither the child, or the SmartClone component does not have an onClick prop', () => {
      function DemoChild({ ...props }: any) {
        return (
          <div data-testid="moo">{JSON.stringify(Object.keys(props))}</div>
        );
      }
      cyMountWithProviders(
        <SmartClone testId="moo">
          <DemoChild />
        </SmartClone>,
      );
      cySmartGet('moo').should('include.text', `testId`);
      cySmartGet('moo').should('not.include.text', 'onClick');
      cyMountWithProviders(
        <SmartClone testId="moo">
          <DemoChild onClick={() => console.log('moo')} />
        </SmartClone>,
      );
      cySmartGet('moo').should('include.text', 'onClick');
      cyMountWithProviders(
        <SmartClone testId="moo" onClick={() => console.log('moo')}>
          <DemoChild />
        </SmartClone>,
      );
      cySmartGet('moo').should('include.text', 'onClick');
    });

    it('should correctly forward the domRef', () => {
      const domRef = cy.stub().as('domRef');
      // eslint-disable-next-line @typescript-eslint/no-shadow
      function DemoChild({ testId, domRef }: any) {
        return (
          <div data-testid={testId} ref={domRef}>
            demo child
          </div>
        );
      }
      cySmartGet('@domRef').should('not.have.been.calledOnce');
      cyMountWithProviders(
        <SmartClone testId="moo" domRef={domRef as any}>
          <DemoChild />
        </SmartClone>,
      );
      cySmartGet('@domRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
        innerHTML: Cypress.sinon.match('demo child'),
      });
    });

    it('should correctly pass down dom attrs', () => {
      function DemoChild({ testId, domRef, ...props }: any) {
        return (
          <div data-testid={testId} {...props}>
            demo child
          </div>
        );
      }
      cyMountWithProviders(
        <SmartClone testId="moo" title="moo" aria-details="moo" data-moo="moo">
          <DemoChild />
        </SmartClone>,
      );
      cySmartGet('moo').should('have.attr', 'title', 'moo');
      cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
      cySmartGet('moo').should('have.attr', 'data-moo', 'moo');
    });

    it('should correctly pass down any child props', () => {
      function DemoChild({ testId, domRef, ...props }: any) {
        return (
          <div data-testid={testId} {...props}>
            demo child
          </div>
        );
      }
      cyMountWithProviders(
        <SmartClone testId="moo">
          <DemoChild title="moo" aria-details="moo" data-moo="moo" />
        </SmartClone>,
      );
      cySmartGet('moo').should('have.attr', 'title', 'moo');
      cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
      cySmartGet('moo').should('have.attr', 'data-moo', 'moo');
    });

    it('should correctly over-write child props, which collide with SmartClone', () => {
      cyMountWithProviders(
        <SmartClone size="small" testId="moo">
          <ButtCon icon="Discord" size="large" />
        </SmartClone>,
      );
      cySmartGet('moo').should('have.css', 'width', '32px');
    });

    it('should correctly pass down and merge sx props', () => {
      function DemoChild({ testId, sx = {}, domnRef, ...props }: any) {
        const customStyles = useConvertSxToEmotionStyles(sx);
        return (
          <div {...props} data-testid={testId} css={customStyles}>
            demo child
          </div>
        );
      }
      cyMountWithProviders(
        <SmartClone testId="moo" sx={{ bg: 'gold' }}>
          <DemoChild sx={{ m: '10px' }} />
        </SmartClone>,
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo').should('have.css', 'margin', '10px');
    });

    it('should correctly merge onClick events, if a child with one is passed', () => {
      const childOnclick = cy.stub().as('childOnclick');
      function DemoChild({ testId, onClick }: any) {
        return (
          <div data-testid={testId} onClick={onClick}>
            demo child
          </div>
        );
      }
      const parentOnClick = cy.stub().as('parentOnclick');
      cyMountWithProviders(
        <SmartClone testId="moo" onClick={parentOnClick}>
          <DemoChild onClick={childOnclick} />
        </SmartClone>,
      );
      cySmartGet('@childOnclick').should('not.have.been.calledOnce');
      cySmartGet('@parentOnclick').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@childOnclick').should('have.been.calledOnce');
      cySmartGet('@parentOnclick').should('have.been.calledOnce');
    });
  });

  context('when passed a DOM component child', () => {
    it('should correctly pass down dom attrs', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" title="moo" aria-details="moo" data-moo="moo">
          <div>mooo cow</div>
        </SmartClone>,
      );
      cySmartGet('moo').should('have.attr', 'title', 'moo');
      cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
      cySmartGet('moo').should('have.attr', 'data-moo', 'moo');
    });

    it('should correctly pass down any child dom props', () => {
      cyMountWithProviders(
        <SmartClone testId="moo">
          <div title="moo" aria-details="moo" data-moo="moo">
            mooo cow
          </div>
        </SmartClone>,
      );
      cySmartGet('moo').should('have.attr', 'title', 'moo');
      cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
      cySmartGet('moo').should('have.attr', 'data-moo', 'moo');
    });

    it('should correctly forward the domRef', () => {
      const domRefStub = cy.stub().as('domRef');
      cySmartGet('@domRef').should('not.have.been.calledOnce');
      cyMountWithProviders(
        <SmartClone testId="moo" domRef={domRefStub as any}>
          <div>moo cow</div>
        </SmartClone>,
      );
      cySmartGet('@domRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
        innerHTML: Cypress.sinon.match('moo cow'),
      });
    });

    it('should correctly merge onClick events, if a child with one is passed', () => {
      const childOnclick = cy.stub().as('childOnclick');
      const parentOnClick = cy.stub().as('parentOnclick');
      cyMountWithProviders(
        <SmartClone testId="moo" onClick={parentOnClick}>
          <div onClick={childOnclick}>moo cow</div>
        </SmartClone>,
      );
      cySmartGet('@childOnclick').should('not.have.been.calledOnce');
      cySmartGet('@parentOnclick').should('not.have.been.calledOnce');
      cySmartGet('moo').click();
      cySmartGet('@childOnclick').should('have.been.calledOnce');
      cySmartGet('@parentOnclick').should('have.been.calledOnce');
    });

    it('should correctly pass down and merge sx & css props into css', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" sx={{ bg: 'gold' }}>
          <div css={{ margin: '10px' }}>moo cow</div>
        </SmartClone>,
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo').should('have.css', 'margin', '10px');
    });

    it('should pass down styles when sx is passed only to the parent', () => {
      cyMountWithProviders(
        <SmartClone testId="moo" sx={{ bg: 'gold' }}>
          <div>moo cow</div>
        </SmartClone>,
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
    });
  });
});
