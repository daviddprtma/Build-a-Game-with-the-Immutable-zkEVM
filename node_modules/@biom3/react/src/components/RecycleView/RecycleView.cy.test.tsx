import { useState } from 'react';

import { artificialDelay } from '../../utils/asyncHelpers';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { notEnoughItemsWarning, RecycleView } from './RecycleView';
import { testTodoData, Todo } from './testItemsData';

const PAGE_ONE = testTodoData.slice(0, 25);
const PAGE_TWO = testTodoData.slice(25, 50);
const COLUMN_RANGE = { min: 200, max: 300 };
function renderItem(item: Todo, key?: string) {
  return (
    <div
      key={key || item.id}
      css={{ padding: '20px', background: 'gold', height: '250px' }}
      data-testid={`testItem--${item.id}`}
    >
      id: {item.id}
      <br />
      {item.title}
    </div>
  );
}
const WAIT_FOR_DEBOUNCE = 150;
const SCROLL_DURATION = 200;
const WAIT_FOR_SCROLL = 150;

function RecycleViewDemoApp() {
  const [atEndOfTodos, setAtEndOfTodos] = useState(false);

  return (
    <RecycleView
      testId="moo"
      atEndOfData={atEndOfTodos}
      initialData={PAGE_ONE}
      renderItem={renderItem}
      gridColumnWidthRange={COLUMN_RANGE}
      loadMoreItems={async () => {
        setAtEndOfTodos(true);
        await artificialDelay(SCROLL_DURATION);
        return PAGE_TWO;
      }}
    />
  );
}

describe('<RecycleView />', () => {
  beforeEach(() => {
    cy.viewport(500, 300);
  });

  context('Happy Path (everything works as it should)', () => {
    it('should correctly forward a domRef of the root node', () => {
      const domRef = cy.stub().as('domRef');
      cySmartGet('@domRef').should('not.have.been.called');
      cyMountWithProviders(
        <RecycleView
          domRef={domRef}
          atEndOfData
          initialData={[]}
          renderItem={renderItem}
          testId="moo"
        />,
      );
      cySmartGet('@domRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
    });

    it('should render as a "div" by default, or as anything the user specifies', () => {
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={[]}
          renderItem={renderItem}
          testId="moo"
        />,
      );

      cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');

      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={[]}
          renderItem={renderItem}
          rc={<section />}
          testId="moo"
        />,
      );

      cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
    });

    it('should accept sx style over-rides', () => {
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={[]}
          renderItem={renderItem}
          sx={{ bg: 'red' }}
          testId="moo"
        />,
      );

      cySmartGet('moo').should('have.backgroundColor', 'red');
    });

    it(`should update the dom as the user scrolls down, to swap already seen items with ones that havn't`, () => {
      cyMountWithProviders(
        <RecycleView
          atEndOfData={false}
          initialData={PAGE_ONE}
          renderItem={renderItem}
          gridColumnWidthRange={COLUMN_RANGE}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('.container .grid').children().should('have.length', 14);
      cySmartGet('.container .grid')
        .children()
        .eq(0)
        .should('include.text', 'id: 1');

      // scroll through 1 page - trigger re-render
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .grid').children().should('have.length', 14);
      cySmartGet('.container .overflow-inner').should(
        'have.css',
        'padding-top',
        '1040px',
      );
      cySmartGet('.container .grid')
        .children()
        .eq(0)
        .should('include.text', 'id: 9');

      // scroll through 1 page - trigger re-render
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .grid').children().should('have.length', 9);
      cySmartGet('.container .overflow-inner').should(
        'have.css',
        'padding-top',
        '2080px',
      );
      cySmartGet('.container .grid')
        .children()
        .eq(0)
        .should('include.text', 'id: 17');
    });

    it('should call to load more items and show loading UI, when the user begins to get close to the end of the list', () => {
      const loadMoreItems = cy
        .stub()
        .as('loadMoreItems')
        .callsFake(async () => {
          await artificialDelay(SCROLL_DURATION);
          return PAGE_TWO;
        });
      cyMountWithProviders(
        <RecycleView
          atEndOfData={false}
          initialData={PAGE_ONE}
          renderItem={renderItem}
          gridColumnWidthRange={COLUMN_RANGE}
          loadMoreItems={loadMoreItems}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('@loadMoreItems').should('not.have.been.called');
      cySmartGet('.container .grid').children().should('have.length', 14);
      cySmartGet('.container .loading-container').should('not.exist');

      // scroll through 1 page - trigger re-render
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cySmartGet('.container .loading-container').should('exist');
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('@loadMoreItems').should('have.been.calledWith', 25);
      cySmartGet('.container .grid').children().should('have.length', 14);
    });

    it('should stop windowing, when it gets to the end of the data', () => {
      cyMountWithProviders(<RecycleViewDemoApp />);

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow-inner').should(
        'have.css',
        'padding-top',
        '5200px',
      );
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow-inner').should(
        'have.css',
        'padding-top',
        '5200px',
      );
      cySmartGet('.container .loading-container').should('not.exist');
    });

    it('should allow the testItem to be rendered with a special key value (solves react duplicate key errors)', () => {
      const renderItemStub = cy
        .stub()
        .as('renderItem')
        .callsFake(() => <div>moo</div>);
      cyMountWithProviders(
        <RecycleView
          atEndOfData={false}
          initialData={testTodoData.slice(0, 1)}
          renderItem={renderItemStub}
          testId="moo"
        />,
      );
      cySmartGet('@renderItem').should(
        'have.been.calledWithMatch',
        Cypress.sinon.match(item => {
          return item.id === 1;
        }),
        Cypress.sinon.match(key => {
          return key === 'testElement';
        }),
      );
    });

    it('should support single column (row based) layouts', () => {
      cyMountWithProviders(
        <RecycleView
          padForCardItems={false}
          atEndOfData
          initialData={testTodoData.slice(0, 1)}
          renderItem={renderItem}
          gridColumnWidthRange={{ min: '100%' }}
          testId="moo"
        />,
      );

      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 485, 500);
    });

    it('should support responsive multi column (row based) layouts', () => {
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={PAGE_ONE}
          renderItem={renderItem}
          gridColumnWidthRange={{ min: 150, max: 300 }}
          testId="moo"
        />,
      );

      cy.viewport(300, 300);
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 265, 280);

      cy.viewport(400, 300); // enough for 2 columns
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 177, 185);

      cy.viewport(700, 300); // enough for 3 columns
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 214, 219);

      cy.viewport(1000, 300); // enough for 4 columns
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 234, 238);
    });

    it('should not try to loadMoreItems, when atTheEndOfData is true', () => {
      const loadMoreItems = cy.stub().as('loadMoreItems');
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={PAGE_ONE}
          renderItem={renderItem}
          loadMoreItems={loadMoreItems}
          gridColumnWidthRange={{ min: '100%' }}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('@loadMoreItems').should('not.have.been.called');
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cy.wait(WAIT_FOR_SCROLL);
      cySmartGet('@loadMoreItems').should('not.have.been.called');
      cySmartGet('testItem--25').should('be.visible');
    });

    it('should correctly calculate column width, based on the min and max specified', () => {
      cy.viewport(600, 300);
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={PAGE_ONE}
          renderItem={renderItem}
          // should be 1 column
          gridColumnWidthRange={{ min: 300, max: 600 }}
          testId="moo"
        />,
      );
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 565, 580);

      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={PAGE_ONE}
          renderItem={renderItem}
          // should be 2 columns
          gridColumnWidthRange={{ min: 200, max: 350 }}
          testId="moo"
        />,
      );
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 277, 285);

      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={PAGE_ONE}
          renderItem={renderItem}
          // should be 3 columns
          gridColumnWidthRange={{ min: 100, max: 250 }}
          testId="moo"
        />,
      );
      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('testItem--1')
        .its('0.offsetWidth')
        .should('be.within', 181, 186);
    });
  });

  context('Sad Path (handling erroneous states)', () => {
    beforeEach(() => {});

    it('should not do windowing funcitonality, when there are not enough items supplied', () => {
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={testTodoData.slice(0, 5)}
          renderItem={renderItem}
          gridColumnWidthRange={COLUMN_RANGE}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('.container .overflow').scrollTo('bottom', {
        duration: SCROLL_DURATION,
      });
      cySmartGet('.container .loading-container').should('not.exist');
    });

    it('should warn inside the console, when not enough intial items are supplied', () => {
      cy.stub(console, 'warn').as('consoleWarn');
      cySmartGet('@consoleWarn').should('not.have.been.called');
      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={testTodoData.slice(0, 5)}
          renderItem={renderItem}
          gridColumnWidthRange={COLUMN_RANGE}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        notEnoughItemsWarning(5, 15),
      );
    });

    it('should not error out when no items are supplied', () => {
      cy.stub(console, 'error').as('consoleError');

      cyMountWithProviders(
        <RecycleView
          atEndOfData
          initialData={[]}
          renderItem={renderItem}
          gridColumnWidthRange={COLUMN_RANGE}
          testId="moo"
        />,
      );

      cy.wait(WAIT_FOR_DEBOUNCE);
      cySmartGet('@consoleError').should('not.have.been.called');
    });
  });
});
