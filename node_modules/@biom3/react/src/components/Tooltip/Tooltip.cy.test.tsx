import { onLightBase } from '@biom3/design-tokens';
import createCache from '@emotion/cache';
import { CacheProvider } from '@emotion/react';
import { StrictMode, useState } from 'react';
import { createRoot } from 'react-dom/client';

import { BiomeCombinedProviders } from '../../providers';
import * as DeviceUtilsModule from '../../utils/deviceHelpers';
import { vFlex } from '../../utils/sxChunks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { Button } from '../Clickable';
import { Icon } from '../Icon';
import { Tooltip } from './Tooltip';

const { rewire$isTouchDevice, restore: restoreUtilsModule } =
  DeviceUtilsModule as any;

function SimpleTooltipDemo({ domRef, size, targetSx }: any) {
  return (
    <Tooltip domRef={domRef} size={size}>
      <Tooltip.Target testId="target" sx={targetSx}>
        <button type="button">moo</button>
      </Tooltip.Target>
      <Tooltip.Content testId="content">some content in here!</Tooltip.Content>
    </Tooltip>
  );
}

describe('<Tooltip />', () => {
  beforeEach(() => {
    cy.viewport(300, 200);
  });

  afterEach(() => {
    restoreUtilsModule();
  });

  it('should render a tooltip, which appears when the user hovers the target', () => {
    cyMountWithProviders(<SimpleTooltipDemo />, { useAllProviders: true });

    cySmartGet('content').should('not.exist');
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('content').should('exist');
  });

  it(`should correctly forward on the target's domRef`, () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(<SimpleTooltipDemo domRef={domRefStub} />, {
      useAllProviders: true,
    });
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should correctly render "medium" sized tooltip, by default', () => {
    cyMountWithProviders(<SimpleTooltipDemo />, { useAllProviders: true });
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '16px');
  });

  it('should correctly render "small" sized tooltip, when neccissary', () => {
    cyMountWithProviders(<SimpleTooltipDemo size="small" />, {
      useAllProviders: true,
    });
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '12px');
  });

  it('should correctly render "large" sized tooltip, when neccissary', () => {
    cyMountWithProviders(<SimpleTooltipDemo size="large" />, {
      useAllProviders: true,
    });
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '20px');
  });

  it('should correctly update tooltip size, when the parent component changes the tooltip size', () => {
    function TooltipDemo() {
      const [size, setSize] = useState<'small' | 'large'>('large');
      return (
        <>
          <Tooltip size={size}>
            <Tooltip.Target testId="target">
              <button type="button">moo</button>
            </Tooltip.Target>
            <Tooltip.Content testId="content">
              some content in here!
            </Tooltip.Content>
          </Tooltip>
          <Button testId="change" onClick={() => setSize('small')}>
            change size to small
          </Button>
        </>
      );
    }

    cyMountWithProviders(<TooltipDemo />, {
      useAllProviders: true,
    });

    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '20px');

    cySmartGet('html > body').trigger('mousemove', 'bottomRight');

    cySmartGet('change').click();

    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '12px');
  });

  it('should correctly render responsively sized tooltip, when neccissary', () => {
    cyMountWithProviders(
      <SimpleTooltipDemo size={['small', 'medium', 'large']} />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '12px');

    cy.viewport(onLightBase.breakpoint.small, 400);
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '16px');

    cy.viewport(onLightBase.breakpoint.medium, 400);
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('tooltip__container').should('have.css', 'padding', '20px');
  });

  it('should update visible Tooltip.Content, as the parent component re-renders', () => {
    function TooltipWithCount() {
      const [count, setCount] = useState(0);
      return (
        <Tooltip>
          <Tooltip.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </Tooltip.Target>
          <Tooltip.Content testId="content">count: {count}</Tooltip.Content>
        </Tooltip>
      );
    }
    cyMountWithProviders(<TooltipWithCount />, { useAllProviders: true });
    cySmartGet('html > body').trigger('mousemove', 'topLeft');
    cySmartGet('content').should('include.text', 'count: 0');
    cySmartGet('button').click();
    cySmartGet('content').should('include.text', 'count: 1');
  });

  it('should allow components which are inside the tooltip to trigger a recrawl of the dom, when neccissary', () => {
    cyMountWithProviders(
      <Tooltip>
        <Tooltip.Target>
          <Icon icon="Apple" testId="moo" sx={{ w: '100px' }} />
        </Tooltip.Target>
        <Tooltip.Content testId="content">
          some content in here!
        </Tooltip.Content>
      </Tooltip>,
      { useAllProviders: true },
    );

    cySmartGet('moo').should('have.attr', 'data-tooltip-id');
    cySmartGet('moo').find('g').should('have.attr', 'data-tooltip-id');
    cySmartGet('moo').find('path').should('have.attr', 'data-tooltip-id');
  });

  it('should function correctly when deployed inside a shadowDom', () => {
    rewire$isTouchDevice(() => true);

    class HelloWorld extends HTMLElement {
      connectedCallback() {
        this.renderWidget();
      }

      renderWidget() {
        const shadowRoot = this.attachShadow({ mode: 'open' });
        const cache = createCache({
          key: 'css',
          container: shadowRoot,
        });

        const reactRoot = createRoot(shadowRoot);
        reactRoot.render(
          <StrictMode>
            <CacheProvider value={cache}>
              <BiomeCombinedProviders shadowRoot={shadowRoot}>
                <Box
                  sx={{
                    ...vFlex,
                    border: '5px dashed gold',
                    p: 'base.spacing.x3',
                  }}
                >
                  <Tooltip>
                    <Tooltip.Target>
                      <Button>moo</Button>
                    </Tooltip.Target>
                    <Tooltip.Content testId="content">moo cow</Tooltip.Content>
                  </Tooltip>
                </Box>
              </BiomeCombinedProviders>
            </CacheProvider>
          </StrictMode>,
        );
      }
    }

    if (!customElements.get('hello-world')) {
      customElements.define('hello-world', HelloWorld);
    }

    cyMountWithProviders(<hello-world />);
    cy.get('hello-world').shadow().as('shadowRoot');
    cySmartGet('@shadowRoot')
      .find('[data-testid="content"]')
      .should('not.exist');
    cySmartGet('@shadowRoot').find('button').click();
    cySmartGet('@shadowRoot').find('[data-testid="content"]').should('exist');
  });

  context('Tooltip positioning', () => {
    it('should "top" align the tooltip content by default, when its "safe" to do so', () => {
      cyMountWithProviders(<SimpleTooltipDemo targetSx={{ mt: '70px' }} />, {
        useAllProviders: true,
      });

      cySmartGet('html > body').trigger('mousemove', 25, 80);
      cySmartGet('tooltip__container')
        .should('have.css', 'top')
        .then(top => {
          expect(parseInt(top as unknown as string, 10)).to.be.within(0, 3);
        });
    });

    it('should "center" align the tooltip content by default, when its "safe" to do so', () => {
      cyMountWithProviders(
        <SimpleTooltipDemo targetSx={{ mt: '90px', ml: '120px' }} />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('html > body').trigger('mousemove', 125, 95);
      cySmartGet('tooltip__container')
        .should('have.css', 'left')
        .then(left => {
          expect(parseInt(left as unknown as string, 10)).to.be.within(55, 60);
        });
    });

    it('should "below" align the tooltip content, when its "unsafe" to be "above"', () => {
      cyMountWithProviders(<SimpleTooltipDemo targetSx={{ mt: '30px' }} />, {
        useAllProviders: true,
      });
      cySmartGet('html > body').trigger('mousemove', 10, 35);
      cySmartGet('tooltip__container')
        .should('have.css', 'top')
        .then(top => {
          expect(parseInt(top as unknown as string, 10)).to.be.within(66, 68);
        });
    });

    it('should "left" align the tooltip content, when its "unsafe" to be "center"', () => {
      cyMountWithProviders(<SimpleTooltipDemo />, {
        useAllProviders: true,
      });
      cySmartGet('html > body').trigger('mousemove', 'topLeft');
      cySmartGet('tooltip__container').should('have.css', 'left', '0px');
    });

    it('should "right" align the tooltip content, when its "unsafe" to be "center"', () => {
      cyMountWithProviders(<SimpleTooltipDemo targetSx={{ ml: '220px' }} />, {
        useAllProviders: true,
      });
      cySmartGet('html > body').trigger('mousemove', 225, 0);
      cySmartGet('tooltip__container')
        .should('have.css', 'left')
        .then(left => {
          expect(parseInt(left as unknown as string, 10)).to.be.within(92, 97);
        });
    });
  });

  context('Click tooltips on touch devices', () => {
    beforeEach(() => {
      rewire$isTouchDevice(() => true);
    });

    afterEach(() => {
      restoreUtilsModule();
    });

    it('should render a tooltip, which appears when the user hovers the target', () => {
      cyMountWithProviders(<SimpleTooltipDemo />, {
        useAllProviders: true,
      });
      cySmartGet('content').should('not.exist');
      cySmartGet('target').click();
      cySmartGet('content').should('exist');
    });

    it('should close an open tooltip, when the user clicks anywhere outside of it', () => {
      cyMountWithProviders(<SimpleTooltipDemo />, {
        useAllProviders: true,
      });
      cySmartGet('target').click();
      cySmartGet('content').should('exist');
      cySmartGet('html > body').click(225, 0);
      cySmartGet('content').should('not.exist');
    });

    it('should repeated clicks on the target, toggle the tooltip', () => {
      cyMountWithProviders(<SimpleTooltipDemo />, {
        useAllProviders: true,
      });
      cySmartGet('target').click();
      cySmartGet('content').should('exist');
      cySmartGet('target').click();
      cySmartGet('content').should('not.exist');
    });
  });

  context('Subcomponents', () => {
    it('should correctly fwd domRef property', () => {
      const contentRef = cy.stub().as('contentRef');
      cyMountWithProviders(
        <Tooltip>
          <Tooltip.Target testId="target">
            <button type="button">moo</button>
          </Tooltip.Target>
          <Tooltip.Content testId="content" domRef={contentRef}>
            some content in here!
          </Tooltip.Content>
        </Tooltip>,
        { useAllProviders: true },
      );

      cySmartGet('html > body').trigger('mousemove', 'topLeft');
      cySmartGet('@contentRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
    });

    it('should correctly accept sx styles', () => {
      cyMountWithProviders(
        <Tooltip>
          <Tooltip.Target testId="target" sx={{ bg: 'gold' }}>
            <button type="button">moo</button>
          </Tooltip.Target>
          <Tooltip.Content testId="content" sx={{ bg: 'gold' }}>
            some content in here!
          </Tooltip.Content>
        </Tooltip>,
        { useAllProviders: true },
      );
      cySmartGet('html > body').trigger('mousemove', 'topLeft');
      cySmartGet('target').should('have.backgroundColor', 'gold');
      cySmartGet('content').should('have.backgroundColor', 'gold');
    });

    it('should correctly pass down className', () => {
      cyMountWithProviders(
        <Tooltip>
          <Tooltip.Target testId="target" className="target-class">
            <button type="button">moo</button>
          </Tooltip.Target>
          <Tooltip.Content testId="content" className="content-class">
            some content in here!
          </Tooltip.Content>
        </Tooltip>,
        { useAllProviders: true },
      );
      cySmartGet('html > body').trigger('mousemove', 'topLeft');
      cySmartGet('target').should('have.class', 'target-class');
      cySmartGet('content').should('have.class', 'content-class');
    });

    it('should correctly pass down aria dom-attrs', () => {
      cyMountWithProviders(
        <Tooltip>
          <Tooltip.Target testId="target" aria-details="moo">
            <button type="button">moo</button>
          </Tooltip.Target>
          <Tooltip.Content testId="content" aria-details="cow">
            some content in here!
          </Tooltip.Content>
        </Tooltip>,
        { useAllProviders: true },
      );

      cySmartGet('html > body').trigger('mousemove', 'topLeft');
      cySmartGet('target').should('have.attr', 'aria-details', 'moo');
      cySmartGet('content').should('have.attr', 'aria-details', 'cow');
    });
  });
});
