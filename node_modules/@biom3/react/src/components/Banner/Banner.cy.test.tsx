import {
  designTokens,
  onDarkBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';

import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Banner } from './Banner';

describe('<Banner />', () => {
  it('should have correct displayName', () => {
    expect(Banner.displayName).to.eq('Banner');
  });
  it('should render a span by default, but override that when an as prop is provided', () => {
    cyMountWithProviders(
      <>
        <Banner testId="default" />
        <Banner testId="asDiv" rc={<section />} />
      </>,
    );

    cyGetByTestId('default').its('0.nodeName').should('equal', 'DIV');
    cyGetByTestId('asDiv').its('0.nodeName').should('equal', 'SECTION');
  });

  it('should accept styling via the sx prop', () => {
    cyMountWithProviders(
      <Banner testId="moo" sx={{ backgroundColor: 'red' }} />,
    );

    cyGetByTestId('moo').should('have.backgroundColor', 'red');
  });

  it('should correctly forward the domRef', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(<Banner testId="moo" domRef={domRef} />);
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should allow rendering of subcomponents and anything else', () => {
    cyMountWithProviders(
      <Banner testId="moo">
        <Banner.Title>mooo</Banner.Title>
        <div data-testid="div">some other thing</div>
        <>also this content</>
      </Banner>,
    );

    cySmartGet('moo__title').should('have.text', 'mooo');
    cySmartGet('div').should('have.text', 'some other thing');
    cy.contains('also this content').should('exist').and('be.visible');
  });

  it('should render the text as single line by default, when there is enough room', () => {
    cyMountWithProviders(
      <Banner className="moo">
        <Banner.Title>Some title text</Banner.Title>
        <Banner.Caption>
          Your tokens are on the way! Check your balance in a min beep boop
        </Banner.Caption>
      </Banner>,
    );

    cySmartGet('.moo > .innerTextContainer').should(
      'have.css',
      'flex-direction',
      'row',
    );
  });

  it('should render the text as multiline, when the forceMultilineText prop is provided', () => {
    cyMountWithProviders(
      <Banner forceMultilineText className="moo">
        <Banner.Title>Some title text</Banner.Title>
        <Banner.Caption>
          Your tokens are on the way! Check your balance in a min beep boop
        </Banner.Caption>
      </Banner>,
    );

    cySmartGet('.moo > .innerTextContainer').should(
      'have.css',
      'flex-direction',
      'column',
    );
  });

  it('should not double render subcomponents', () => {
    cyMountWithProviders(
      <Banner forceMultilineText className="moo">
        <Banner.Title testId="title">Some title text</Banner.Title>
        <Banner.Caption testId="caption">
          Your tokens are on the way! Check your balance in a min beep boop
        </Banner.Caption>
      </Banner>,
    );
    cySmartGet('title').should('have.length', 1);
    cySmartGet('caption').should('have.length', 1);
  });

  context('Variants', () => {
    function BannerTest({ variant }: any) {
      return (
        <Banner variant={variant} testId="moo">
          <Banner.Icon icon="Discord" />
          <Banner.Title>test title</Banner.Title>
          <Banner.Caption>test caption</Banner.Caption>
          <Banner.RightButtCon icon="AirDrop" testId="buttCon" />
          <Banner.RightButton testId="button">Moo</Banner.RightButton>
        </Banner>
      );
    }

    it('should correctly color "standard" variant', () => {
      cyMountWithProviders(<BannerTest variant="standard" />);
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.neutral.500'),
      );
      cySmartGet('moo__icon').should('have.attr', 'data-icon', 'Discord');
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.translucent.standard.100',
        ),
      );

      cyMountWithProviders(<BannerTest variant="standard" />, {
        theme: { base: onDarkBase },
      });
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue({ base: onDarkBase }, 'base.color.neutral.500'),
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue({ base: onDarkBase }, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.standard.200',
        ),
      );
    });

    it('should correctly color "fatal" variant', () => {
      cyMountWithProviders(<BannerTest variant="fatal" />);
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.status.fatal.dim'),
      );
      cySmartGet('moo__icon').should(
        'have.attr',
        'data-icon',
        'CloseWithCircle',
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.translucent.standard.100',
        ),
      );

      cyMountWithProviders(<BannerTest variant="fatal" />, {
        theme: { base: onDarkBase },
      });
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.status.fatal.dim',
        ),
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.200',
        ),
      );
    });

    it('should correctly color "attention" variant', () => {
      cyMountWithProviders(<BannerTest variant="attention" />);
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.status.attention.dim'),
      );
      cySmartGet('moo__icon').should('have.attr', 'data-icon', 'Alert');
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.translucent.standard.100',
        ),
      );

      cyMountWithProviders(<BannerTest variant="attention" />, {
        theme: { base: onDarkBase },
      });
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.status.attention.dim',
        ),
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.200',
        ),
      );
    });

    it('should correctly color "guidance" variant', () => {
      cyMountWithProviders(<BannerTest variant="guidance" />);
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.status.guidance.dim'),
      );
      cySmartGet('moo__icon').should(
        'have.attr',
        'data-icon',
        'InformationCircle',
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.translucent.standard.100',
        ),
      );

      cyMountWithProviders(<BannerTest variant="guidance" />, {
        theme: { base: onDarkBase },
      });
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.status.guidance.dim',
        ),
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.200',
        ),
      );
    });

    it('should correctly color "success" variant', () => {
      cyMountWithProviders(<BannerTest variant="success" />);
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.status.success.dim'),
      );
      cySmartGet('moo__icon').should(
        'have.attr',
        'data-icon',
        'TickWithCircle',
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          designTokens,
          'base.color.translucent.standard.100',
        ),
      );

      cyMountWithProviders(<BannerTest variant="success" />, {
        theme: { base: onDarkBase },
      });
      cySmartGet('moo').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.status.success.dim',
        ),
      );
      cySmartGet('moo__title').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('moo__caption').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('buttCon').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.color',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.text.inverse.primary',
        ),
      );
      cySmartGet('button').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.200',
        ),
      );
    });
  });

  context('Subcomponents', () => {
    it('should render the Banner.Icon subcomponent, only when the variant is "standard"', () => {
      cyMountWithProviders(
        <>
          <Banner testId="standard" variant="standard">
            <Banner.Icon icon="Discord" />
          </Banner>
          <Banner testId="notStandard" variant="guidance">
            <Banner.Icon icon="Discord" />
          </Banner>
        </>,
      );

      cySmartGet('standard__icon').should('have.attr', 'data-icon', 'Discord');
      cySmartGet('notStandard__icon').should(
        'have.attr',
        'data-icon',
        'InformationCircle',
      );
    });

    it('should all accept sx styles', () => {
      cyMountWithProviders(
        <Banner testId="moo">
          <Banner.Icon sx={{ backgroundColor: 'gold' }} icon="AirDrop" />
          <Banner.Title sx={{ backgroundColor: 'gold' }}>
            test title
          </Banner.Title>
          <Banner.Caption sx={{ backgroundColor: 'gold' }}>
            test caption
          </Banner.Caption>

          <Banner.RightButtCon
            icon="AirDrop"
            testId="buttCon"
            sx={{ backgroundColor: 'gold' }}
          />
          <Banner.RightButton testId="button" sx={{ backgroundColor: 'gold' }}>
            Moo
          </Banner.RightButton>
        </Banner>,
      );
      cySmartGet('moo__icon').should('have.backgroundColor', 'gold');
      cySmartGet('moo__title').should('have.backgroundColor', 'gold');
      cySmartGet('moo__caption').should('have.backgroundColor', 'gold');
      cySmartGet('buttCon').should('have.backgroundColor', 'gold');
      cySmartGet('button').should('have.backgroundColor', 'gold');
    });

    it('should all correctly forward their root domRef', () => {
      const iconRef = cy.stub().as('iconRef');
      const titleRef = cy.stub().as('titleRef');
      const captionRef = cy.stub().as('captionRef');
      const rightHandButtConRef = cy.stub().as('rightHandButtConRef');
      const rightHandButtonRef = cy.stub().as('rightHandButtonRef');

      cyMountWithProviders(
        <Banner testId="moo">
          <Banner.Icon domRef={iconRef} icon="AirDrop" />
          <Banner.Title domRef={titleRef}>test title</Banner.Title>
          <Banner.Caption domRef={captionRef}>test caption</Banner.Caption>
          <Banner.RightButtCon icon="AirDrop" domRef={rightHandButtConRef} />
          <Banner.RightButton domRef={rightHandButtonRef}>
            moo
          </Banner.RightButton>
        </Banner>,
      );

      cySmartGet('@iconRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });
      cySmartGet('@titleRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
      cySmartGet('@rightHandButtConRef').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });
      cySmartGet('@rightHandButtonRef').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });
    });

    it('should invert the coloring of any RightButton or RightButtCon subcomponents when the variant is something other than "standard" in dark mode', () => {
      cyMountWithProviders(
        <Banner testId="moo" variant="guidance">
          <Banner.RightButtCon icon="AirDrop" variant="primary" />
          <Banner.RightButton variant="primary">moo</Banner.RightButton>
        </Banner>,
        { theme: { base: onDarkBase } },
      );
      cySmartGet('moo__rightButtCon').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.1000',
        ),
      );
      cySmartGet('moo__rightButton').should(
        'have.backgroundColor',
        smartPickTokenValue(
          { base: onDarkBase },
          'base.color.translucent.inverse.1000',
        ),
      );

      cyMountWithProviders(
        <Banner testId="moo" variant="guidance">
          <Banner.RightButtCon icon="AirDrop" variant="primary" />
          <Banner.RightButton variant="primary">moo</Banner.RightButton>
        </Banner>,
      );

      cySmartGet('moo__rightButtCon').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
      cySmartGet('moo__rightButton').should(
        'have.backgroundColor',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });
  });
});
