import { Children, ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  useForwardLocalDomRef,
  useGetSubcomponentChild,
  useResizeObserver,
  useSplitApartChildrenAndSubComponents,
} from '../../hooks';
import { DomPropsWithDomRef } from '../../types';
import { isChildSubcomponent } from '../../utils';
import { Box } from '../Box';
import { SmartClone } from '../SmartClone';
import { BannerCaption } from './BannerCaption';
import { BannerIcon } from './BannerIcon';
import { BannerRightButtCon } from './BannerRightButtCon';
import { BannerRightButton } from './BannerRightButton';
import { BannerTitle } from './BannerTitle';
import {
  bannerSx,
  getBannerColoring,
  rightHandButtonsContainerSx,
} from './styles';
import { BannerProps, DEFAULT_BANNER_VARIANT } from './types';

export function Banner<RC extends ReactElement | undefined = undefined>({
  children,
  variant = DEFAULT_BANNER_VARIANT,
  sx = {},
  testId = 'banner',
  forceMultilineText,
  domRef = { current: null },
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & BannerProps
  : BannerProps & { rc: RC }) {
  const localDomRef = useForwardLocalDomRef(domRef);
  const iconSubcomponent = useGetSubcomponentChild(children, BannerIcon);
  const title = useGetSubcomponentChild(children, BannerTitle);
  const caption = useGetSubcomponentChild(children, BannerCaption);
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    BannerIcon,
    BannerTitle,
    BannerCaption,
  ]);
  const icon = useMemo(() => {
    switch (variant) {
      case 'fatal':
        return <BannerIcon icon="CloseWithCircle" iconVariant="bold" />;

      case 'attention':
      case 'destructive':
        return <BannerIcon icon="Alert" iconVariant="bold" />;

      case 'guidance':
        return <BannerIcon icon="InformationCircle" iconVariant="bold" />;

      case 'success':
        return <BannerIcon icon="TickWithCircle" iconVariant="bold" />;

      case 'standard':
      default:
        return (
          iconSubcomponent || (
            <BannerIcon icon="InformationCircle" iconVariant="bold" />
          )
        );
    }
  }, [iconSubcomponent, variant]);

  const mergedSx = merge(bannerSx, getBannerColoring(variant), sx);
  const { height } = useResizeObserver(localDomRef);
  const iconTopMargin = { top: height > 64 ? '16px' : '19px' };

  return (
    <Box {...props} sx={mergedSx} testId={testId} domRef={localDomRef}>
      <SmartClone
        variant={variant}
        testId={icon.props.testId ? icon.props.testId : `${testId}__icon`}
        sx={icon.props.sx ? merge(iconTopMargin, icon.props.sx) : iconTopMargin}
      >
        {icon}
      </SmartClone>
      <Box
        sx={{
          d: 'flex',
          ...(forceMultilineText
            ? { flexDirection: 'column' }
            : { flexWrap: 'wrap', columnGap: 'base.spacing.x2' }),
        }}
        className="innerTextContainer"
      >
        <SmartClone variant={variant} testId={`${testId}__title`}>
          {title}
        </SmartClone>
        <SmartClone variant={variant} testId={`${testId}__caption`}>
          {caption}
        </SmartClone>
      </Box>
      <Box
        className="rightButtonsContainer"
        testId={`${testId}__rightHandButtons`}
        sx={rightHandButtonsContainerSx}
      >
        {Children.map(otherChildren, child => {
          const isButtConSubcomponent = isChildSubcomponent(
            child,
            BannerRightButtCon,
          );
          return isChildSubcomponent(child, BannerRightButton) ||
            isButtConSubcomponent ? (
            <SmartClone
              bannerVariant={variant}
              testId={
                isButtConSubcomponent
                  ? `${testId}__rightButtCon`
                  : `${testId}__rightButton`
              }
            >
              {child}
            </SmartClone>
          ) : (
            child
          );
        })}
      </Box>
    </Box>
  );
}
Banner.displayName = 'Banner';
Banner.Icon = BannerIcon;
Banner.Title = BannerTitle;
Banner.Caption = BannerCaption;
Banner.RightButton = BannerRightButton;
Banner.RightButtCon = BannerRightButtCon;
