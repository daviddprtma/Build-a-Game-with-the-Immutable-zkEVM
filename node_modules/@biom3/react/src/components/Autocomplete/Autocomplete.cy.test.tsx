import { useState } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Autocomplete } from './Autocomplete';

const DUMMY_OPTIONS = ['foo', 'bar', 'baz'];

describe('<Autocomplete />', () => {
  it('should have correct displayName', () => {
    expect(Autocomplete.displayName).to.eq('Autocomplete');
  });
  it('should render inside a div by default, but override that when an rc prop is provided', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(
      <Autocomplete testId="moo" rc={<section />} options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should render a popover with menu options, when the user focuses on the input', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );

    cySmartGet('moo__verticalMenu').should('not.exist');
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('exist');
    cySmartGet('moo__verticalMenu').children().should('have.length', 3);
  });

  it('should update "selected" option, when one is clicked', () => {
    const onChange = cy.stub().as('onChange');
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} onChange={onChange} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').children().eq(1).click();
    cySmartGet('@onChange').should('have.been.calledOnceWith', 'bar');
    cySmartGet('moo__textInput__input').should('have.value', 'bar');
  });

  it('should clear the selected option, when the user clicks the "clear" button', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').children().eq(1).click();
    cySmartGet('moo__textInput__input').should('have.value', 'bar');
    cySmartGet(
      'moo__textInput__rightButtonsContainer__clearValueButton',
    ).click();
    cySmartGet('moo__textInput__input').should('have.value', '');
  });

  it('should refine down the list of options, as the user types', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').children().should('have.length', 3);
    cySmartGet('moo__textInput__input').type('ba');
    cySmartGet('moo__verticalMenu').children().should('have.length', 2);
  });

  it('should ignore casing when using the text that the user types', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').children().should('have.length', 3);
    cySmartGet('moo__textInput__input').type('BA');
    cySmartGet('moo__verticalMenu').children().should('have.length', 2);
  });

  it('should allow parent component to tap into the "onInputChange" event', () => {
    const onInputChange = cy.stub().as('onInputChange');
    cyMountWithProviders(
      <Autocomplete
        testId="moo"
        options={DUMMY_OPTIONS}
        onInputChange={onInputChange}
      />,
      { useAllProviders: true },
    );
    cySmartGet('@onInputChange').should('not.have.been.called');
    cySmartGet('moo__textInput__input').type('moo');
    cySmartGet('@onInputChange').should('have.been.calledWithMatch', {
      target: { value: 'moo' },
    });
  });

  it('should correctly forward domRef and inputRef', () => {
    const domRef = cy.stub().as('domRef');
    const inputRef = cy.stub().as('inputRef');
    cyMountWithProviders(
      <Autocomplete
        testId="moo"
        options={DUMMY_OPTIONS}
        domRef={domRef}
        inputRef={inputRef}
      />,
      { useAllProviders: true },
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
    cySmartGet('@inputRef').should('have.been.calledWithMatch', {
      nodeName: 'INPUT',
    });
  });

  it('should render as "medium" size, by default', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').should('have.css', 'height', '48px');
  });

  it('should render as "large" size, when neccissary', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} sizeVariant="large" />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').should('have.css', 'height', '64px');
  });

  it('should allow navigation of the vertical menu items with keyboard', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__textInput__input').type('{downarrow}{downarrow}');
    cySmartGet('moo__verticalMenu')
      .children()
      .eq(1)
      .should('have.class', 'hover');

    cySmartGet('moo__textInput__input').type('{uparrow}');
    cySmartGet('moo__verticalMenu')
      .children()
      .eq(1)
      .should('not.have.class', 'hover');
    cySmartGet('moo__verticalMenu')
      .children()
      .eq(0)
      .should('have.class', 'hover');
  });

  it('should autoscroll the vertical menu as the user moves down them with keyboard', () => {
    const LONG_DUMMY_OPTIONS = [
      'how',
      'now',
      'brown',
      'cow',
      'the',
      'quick',
      'fox',
      'jumps',
      'over',
      'lazy',
      'dog',
    ];
    cyMountWithProviders(
      <Autocomplete testId="moo" options={LONG_DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').its('0.scrollTop').should('eq', 0);
    cySmartGet('moo__textInput__input').type(
      '{downarrow}{downarrow}{downarrow}{downarrow}{downarrow}{downarrow}{downarrow}',
    );
    cySmartGet('moo__verticalMenu').its('0.scrollTop').should('eq', 78);
    cySmartGet('moo__textInput__input').type('{uparrow}');
    cySmartGet('moo__verticalMenu').its('0.scrollTop').should('eq', 24);
  });

  it('should allow the user to change their interaction method between mouse hover and keyboard navigation', () => {
    const LONG_DUMMY_OPTIONS = [
      'how',
      'now',
      'brown',
      'cow',
      'the',
      'quick',
      'fox',
      'jumps',
      'over',
      'lazy',
      'dog',
    ];
    cyMountWithProviders(
      <Autocomplete testId="moo" options={LONG_DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__textInput__input').type(
      '{downarrow}{downarrow}{downarrow}{downarrow}',
    );
    cySmartGet('moo__verticalMenu')
      .children()
      .eq(3)
      .should('have.class', 'hover');

    cySmartGet('moo__verticalMenu').children().eq(2).realHover();

    cySmartGet('moo__verticalMenu')
      .children()
      .eq(3)
      .should('not.have.class', 'hover');

    cySmartGet('moo__verticalMenu')
      .children()
      .eq(2)
      .should('have.class', 'hover');
  });

  it('should allow the user to hit enter to "select" an option', () => {
    const onChange = cy.stub().as('onChange');
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} onChange={onChange} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__textInput__input').type('bar{enter}');
    cySmartGet('@onChange').should('have.been.calledWith', 'bar');
    cySmartGet('moo__textInput__input').should('have.value', 'bar');
  });

  it('should allow user to close popup by hitting escape', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('exist');
    cySmartGet('moo__textInput__input').type('{esc}');
    cySmartGet('moo__verticalMenu').should('not.exist');
  });

  it('should allow user to close popup by clicking outside of it', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('exist');
    cy.get('body').click(100, 400);
    cySmartGet('moo__verticalMenu').should('not.exist');
  });

  it('should allow user to toggle popup by repeatedly clicking on the input', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('exist');
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('not.exist');
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu').should('exist');
  });

  it('should render items left-aligned, by default', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-start');
  });

  it('should render items right-aligned, when neccissary', () => {
    cyMountWithProviders(
      <Autocomplete testId="moo" options={DUMMY_OPTIONS} textAlign="right" />,
      { useAllProviders: true },
    );
    cySmartGet('moo__textInput__input').click();
    cySmartGet('moo__verticalMenu')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-end');
  });

  context('Controlled mode', () => {
    it('should allow parent component to set a "pre-selected" value for the input', () => {
      cyMountWithProviders(
        <Autocomplete
          testId="moo"
          options={DUMMY_OPTIONS}
          value={DUMMY_OPTIONS[0]}
        />,
        { useAllProviders: true },
      );

      cySmartGet('moo__textInput__input').should('have.value', 'foo');
    });

    it('should not do anything, when not correctly wired up', () => {
      cyMountWithProviders(
        <Autocomplete testId="moo" options={DUMMY_OPTIONS} inputValue="bar" />,
        { useAllProviders: true },
      );

      cySmartGet('moo__textInput__input').should('have.value', 'bar');
      cySmartGet('moo__textInput__input').type('moo');
      cySmartGet('moo__textInput__input').should('have.value', 'bar');
    });

    it('should function when everything is wired up correctly', () => {
      function ControlledAutocomplete() {
        const [value, setValue] = useState<string | null>(DUMMY_OPTIONS[0]);
        const [inputValue, setInputValue] = useState('');
        return (
          <Autocomplete
            testId="moo"
            options={DUMMY_OPTIONS}
            placeholder="CONTROLLED"
            value={value}
            onChange={newValue => {
              setValue(newValue);
            }}
            inputValue={inputValue}
            onInputChange={event => {
              setInputValue(event.target.value);
            }}
            onClearValue={() => {
              setInputValue('');
            }}
          />
        );
      }

      cyMountWithProviders(<ControlledAutocomplete />, {
        useAllProviders: true,
      });

      cySmartGet('moo__textInput__input').should('have.value', 'foo');
      cySmartGet('moo__textInput__input').type(
        '{backspace}{backspace}{backspace}{downarrow}{downarrow}{enter}',
      );
      cySmartGet('moo__textInput__input').should('have.value', 'bar');
    });
  });
});
