import { keyframes } from '@emotion/react';
import { Properties } from 'csstype';

import { AnimationKind } from '../../types/motion';
import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getResponsiveSx } from '../../utils/styleHelpers';
import {
  ProgressBarColorVariant,
  ProgressBarSize,
  ProgressBarVariant,
} from './shared';

export function getContainerColorVariantSx(variant: ProgressBarColorVariant) {
  switch (variant) {
    case 'brand':
      return {
        '& .barContainer__bar': {
          bg: 'base.color.brand.1',
        },
        '& .ProgressBarRightText, & .ProgressBarLeftRollingText > .text': {
          c: 'base.color.brand.1',
        },
      };

    case 'gradient':
      return {
        '& .barContainer__bar': {
          bg: 'base.gradient.1',
        },
        '& .ProgressBarRightText, & .ProgressBarLeftRollingText > .text': {
          c: 'base.color.text.primary',
        },
      };

    case 'inverted':
      return {
        '& .barContainer__bar': {
          bg: 'base.color.translucent.inverse.1000',
        },
        '& .ProgressBarRightText, & .ProgressBarLeftRollingText > .text': {
          c: 'base.color.translucent.inverse.1000',
        },
      };

    case 'guidance':
    default:
      return {
        '& .barContainer__bar': {
          bg: 'base.color.status.guidance.bright',
        },
        '& .ProgressBarRightText, & .ProgressBarLeftRollingText > .text': {
          c: 'base.color.status.guidance.bright',
        },
      };
  }
}

export const barContainerBaseSx = {
  overflow: 'hidden',
  brad: 'base.borderRadius.x4',
  minw: '100px',
};

export function getBarContainerSx({
  size,
  theme: { base },
}: {
  size: ProgressBarSize;
  theme: BiomeTheme;
}): Properties {
  switch (size) {
    case 'small':
      return {
        height: base.spacing.x1,
      };

    case 'medium':
    default:
      return {
        height: base.spacing.x2,
      };
  }
}

export const getResponsiveBarContainerSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<ProgressBarSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getBarContainerSx,
  });

export const baseBarSx = {
  h: '100%',
  transitionProperty: 'width',
};

const wipeMask = keyframes`
  0% {
    translate: -95% 0;
  }
  100% {
    translate: 97% 0;
  }
`;

export function getVariantBasedBarSx({
  animationKind,
  variant,
  value,
}: {
  variant: ProgressBarVariant;
  animationKind: AnimationKind;
  value?: number;
}) {
  switch (variant) {
    case 'determinate':
      return {
        w: `${value}%`,
        transitionDuration: `base.motion.normal.${animationKind}.cssDuration`,
        transitionTimingFunction: `base.motion.normal.${animationKind}.cssEase`,
      };

    case 'indeterminate':
    default:
      return {
        WebkitMaskImage:
          'linear-gradient(to right, transparent 0%, black 50%, transparent 100%)',
        animation: `${wipeMask} ${
          animationKind === 'gentle' ? '1.7s' : '0.8s'
        } infinite`,
        animationTimingFunction: 'linear',
      };
  }
}
