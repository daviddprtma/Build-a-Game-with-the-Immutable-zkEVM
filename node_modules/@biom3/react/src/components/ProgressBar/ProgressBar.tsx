import { ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetCurrentSizeClass,
  useGetSubcomponentChild,
  useTheme,
} from '../../hooks';
import { DomPropsWithDomRef } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { SmartClone } from '../SmartClone';
import { Stack } from '../Stack';
import { ProgressBarLeftRollingText } from './ProgressBarLeftRollingText';
import { ProgressBarRightText } from './ProgressBarRightText';
import {
  DEFAULT_PROGRESS_BAR_COLOR_VARIANT,
  DEFAULT_PROGRESS_BAR_SIZE,
  PROGRESS_BAR_SIZES,
  ProgressBarProps,
} from './shared';
import {
  barContainerBaseSx,
  baseBarSx,
  getBarContainerSx,
  getContainerColorVariantSx,
  getResponsiveBarContainerSx,
  getVariantBasedBarSx,
} from './styles';

export function ProgressBar<RC extends ReactElement | undefined = undefined>({
  children,
  size = DEFAULT_PROGRESS_BAR_SIZE,
  variant,
  colorVariant = DEFAULT_PROGRESS_BAR_COLOR_VARIANT,
  sx = {},
  className,
  testId = 'ProgressBar',
  animationKind = 'gentle',
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & ProgressBarProps
  : ProgressBarProps & { rc: RC }) {
  const isDeterminant = useMemo(() => variant === 'determinate', [variant]);
  const { value, ...otherProps } = isDeterminant
    ? props
    : { ...props, value: undefined };
  const theme = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_PROGRESS_BAR_SIZE,
    PROGRESS_BAR_SIZES,
  );
  const allBarContainerSx = merge(
    barContainerBaseSx,
    getBarContainerSx({ theme, size: startingSize }),
    getResponsiveBarContainerSx({ theme, size }),
  );
  const sizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_PROGRESS_BAR_SIZE,
    PROGRESS_BAR_SIZES,
  );
  const leftRollingText = useGetSubcomponentChild(
    children,
    ProgressBarLeftRollingText,
  );
  const rightText = useGetSubcomponentChild(children, ProgressBarRightText);

  const allBarSx = merge(
    baseBarSx,
    getVariantBasedBarSx({
      variant,
      value,
      animationKind,
    }),
  );
  const allContainerSx = merge(
    { w: '100%' },
    getContainerColorVariantSx(colorVariant),
    sx,
  );
  const shouldRenderGap =
    (!leftRollingText && isDeterminant) ||
    leftRollingText ||
    rightText ||
    (!rightText && isDeterminant);
  return (
    <Stack
      {...otherProps}
      className={`${
        className ?? ''
      } ProgressBar ProgressBar--${sizeClass} ProgresBar--${variant}`}
      sx={allContainerSx}
      gap={shouldRenderGap ? 'base.spacing.x2' : '0px'}
      testId={testId}
    >
      <Box
        sx={allBarContainerSx}
        testId={`${testId}__barContainer`}
        className="barContainer"
      >
        <Box
          sx={allBarSx}
          testId={`${testId}__barContainer__bar`}
          className="barContainer__bar"
        />
      </Box>

      <Stack direction="row" className="labelsRow">
        {!leftRollingText && isDeterminant ? (
          <ProgressBarLeftRollingText
            text={`${value}%`}
            testId={`${testId}__leftSideText`}
          />
        ) : leftRollingText ? (
          <SmartClone testId={`${testId}__leftSideText`}>
            {leftRollingText}
          </SmartClone>
        ) : null}

        {!rightText && isDeterminant ? (
          <ProgressBarRightText testId={`${testId}__rightSideText`}>
            100%
          </ProgressBarRightText>
        ) : rightText ? (
          <SmartClone testId={`${testId}__rightSideText`}>
            {rightText}
          </SmartClone>
        ) : null}
      </Stack>
    </Stack>
  );
}

ProgressBar.displayName = 'ProgressBar';
ProgressBar.LeftRollingText = ProgressBarLeftRollingText;
ProgressBar.RightText = ProgressBarRightText;
