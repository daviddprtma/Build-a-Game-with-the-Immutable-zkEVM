import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { ProgressBar } from './ProgressBar';

describe('<ProgressBar />', () => {
  beforeEach(() => {
    cy.viewport(200, 100);
  });

  it('should have correct displayName', () => {
    expect(ProgressBar.displayName).to.eq('ProgressBar');
  });

  it('should render as div by default, or anything else as neccissary', () => {
    cyMountWithProviders(<ProgressBar testId="moo" variant="indeterminate" />);
    cySmartGet('moo').should('have.prop', 'nodeName', 'DIV');

    cyMountWithProviders(
      <ProgressBar testId="moo" rc={<span />} variant="indeterminate" />,
    );
    cySmartGet('moo').should('have.prop', 'nodeName', 'SPAN');
  });

  it('should render with correct class name', () => {
    cyMountWithProviders(
      <ProgressBar testId="moo" variant="indeterminate" className="moo" />,
    );
    cySmartGet('moo').should('satisfy', $el => {
      return $el.hasClass('moo') && $el.hasClass('ProgressBar');
    });
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <ProgressBar
        testId="moo"
        variant="indeterminate"
        aria-atomic="true"
        data-moo="cow"
      />,
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should accept custom sx', () => {
    cyMountWithProviders(
      <ProgressBar testId="moo" variant="indeterminate" sx={{ bgc: 'red' }} />,
    );
    cySmartGet('moo').should('have.backgroundColor', 'rgb(255, 0, 0)');
  });

  it('should correctly fwd domRef', () => {
    const ref = cy.stub().as('refStub');
    cyMountWithProviders(
      <ProgressBar testId="moo" variant="indeterminate" domRef={ref} />,
    );
    cySmartGet('@refStub').should('be.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should render as "medium" size, by default, and "small" size when neccissary', () => {
    cyMountWithProviders(<ProgressBar testId="moo" variant="indeterminate" />);
    cySmartGet('moo').should('have.css', 'height', '8px');

    cyMountWithProviders(
      <ProgressBar testId="moo" size="small" variant="indeterminate" />,
    );
    cySmartGet('moo').should('have.css', 'height', '4px');
  });

  it('should allow size to be set responsively', () => {
    cyMountWithProviders(
      <ProgressBar
        testId="moo"
        size={['small', null, 'medium']}
        variant="indeterminate"
      />,
    );
    cySmartGet('moo').should('have.css', 'height', '4px');

    cy.viewport(designTokens.base.breakpoint.medium, 200);
    cySmartGet('moo').should('have.css', 'height', '8px');
  });

  it('should allow parent component to control the left side text', () => {
    cyMountWithProviders(
      <ProgressBar testId="moo" variant="indeterminate">
        <ProgressBar.LeftRollingText text="moo" />
      </ProgressBar>,
    );
    cySmartGet('moo__leftSideText').should('have.text', 'moo');
  });

  it('should allow parent component to control the right side text', () => {
    cyMountWithProviders(
      <ProgressBar testId="moo" variant="indeterminate">
        <ProgressBar.RightText>cow</ProgressBar.RightText>
      </ProgressBar>,
    );
    cySmartGet('moo__rightSideText').should('have.text', 'cow');
  });

  context('Determinate Variant', () => {
    it('should correctly render determinate variant', () => {
      cyMountWithProviders(
        <ProgressBar testId="moo" variant="determinate" value={50} />,
      );
      cySmartGet('moo__leftSideText').should('have.text', '50%');
      cySmartGet('moo__rightSideText').should('have.text', '100%');
      cySmartGet('moo__barContainer__bar').should('have.css', 'width', '100px');

      cyMountWithProviders(
        <ProgressBar testId="moo" variant="determinate" value={80} />,
      );
      cySmartGet('moo__leftSideText').should('have.text', '80%');
      cySmartGet('moo__rightSideText').should('have.text', '100%');
      cySmartGet('moo__barContainer__bar').should('have.css', 'width', '160px');
    });

    it('should allow user to control the animation profile', () => {
      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="determinate"
          value={80}
          animationKind="gentle"
        />,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.css',
        'transition-duration',
        designTokens.base.motion.normal.gentle.cssDuration,
      );

      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="determinate"
          value={80}
          animationKind="fast"
        />,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.css',
        'transition-duration',
        designTokens.base.motion.normal.fast.cssDuration,
      );
    });
  });

  context('Indeterminate Variant', () => {
    it('should correctly render indeterminate variant', () => {
      cyMountWithProviders(
        <ProgressBar testId="moo" variant="indeterminate" />,
      );
      cySmartGet('moo__leftSideText').should('not.exist');
      cySmartGet('moo__rightSideText').should('not.exist');
      cySmartGet('moo__barContainer__bar')
        .should('have.css', 'animation-name', 'animation-aef8iu')
        .and('have.css', 'animation-iteration-count', 'infinite');
    });

    it('should allow user to control the animation profile', () => {
      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="indeterminate"
          animationKind="gentle"
        />,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.css',
        'animation-duration',
        '1.7s',
      );

      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="indeterminate"
          animationKind="fast"
        />,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.css',
        'animation-duration',
        '0.8s',
      );
    });
  });

  context('colorVariants', () => {
    it('should correctly render colorVariant "guidance", by default', () => {
      cyMountWithProviders(
        <ProgressBar testId="moo" variant="indeterminate">
          <ProgressBar.LeftRollingText text="moo" />
          <ProgressBar.RightText>cow</ProgressBar.RightText>
        </ProgressBar>,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.backgroundColor',
        designTokens.base.color.status.guidance.bright,
      );
      cySmartGet('moo__rightSideText').should(
        'have.color',
        designTokens.base.color.status.guidance.bright,
      );
      cySmartGet('moo__leftSideText__text--moo').should(
        'have.color',
        designTokens.base.color.status.guidance.bright,
      );
    });

    it('should correctly render colorVariant "brand", when neccissary', () => {
      cyMountWithProviders(
        <ProgressBar testId="moo" variant="indeterminate" colorVariant="brand">
          <ProgressBar.LeftRollingText text="moo" />
          <ProgressBar.RightText>cow</ProgressBar.RightText>
        </ProgressBar>,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.backgroundColor',
        designTokens.base.color.brand[1],
      );
      cySmartGet('moo__rightSideText').should(
        'have.color',
        designTokens.base.color.brand[1],
      );
      cySmartGet('moo__leftSideText__text--moo').should(
        'have.color',
        designTokens.base.color.brand[1],
      );
    });

    it('should correctly render colorVariant "gradient", when neccissary', () => {
      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="indeterminate"
          colorVariant="gradient"
        >
          <ProgressBar.LeftRollingText text="moo" />
          <ProgressBar.RightText>cow</ProgressBar.RightText>
        </ProgressBar>,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.css',
        'background-image',
        'linear-gradient(90.68deg, rgb(241, 145, 250) 0%, rgb(131, 227, 240) 99.82%)',
      );
      cySmartGet('moo__rightSideText').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
      cySmartGet('moo__leftSideText__text--moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.text.primary'),
      );
    });

    it('should correctly render colorVariant "inverted", when neccissary', () => {
      cyMountWithProviders(
        <ProgressBar
          testId="moo"
          variant="indeterminate"
          colorVariant="inverted"
        >
          <ProgressBar.LeftRollingText text="moo" />
          <ProgressBar.RightText>cow</ProgressBar.RightText>
        </ProgressBar>,
      );
      cySmartGet('moo__barContainer__bar').should(
        'have.backgroundColor',
        designTokens.base.color.translucent.inverse[1000],
      );
      cySmartGet('moo__rightSideText').should(
        'have.color',
        designTokens.base.color.translucent.inverse[1000],
      );
      cySmartGet('moo__leftSideText__text--moo').should(
        'have.color',
        designTokens.base.color.translucent.inverse[1000],
      );
    });
  });
});
