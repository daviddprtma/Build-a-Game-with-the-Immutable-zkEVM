import { ReactElement, Ref, useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  DomPropsWithDomRef,
  StandardComponentWithProps,
} from '../../types/shared';
import { Box } from '../Box';
import { Body } from '../Text';
import { BadgeVariant } from './shared';
import {
  baseBadgeSx,
  getBadgeAnimationSx,
  getBadgeVariantSx,
  plainDotBadgeSx,
  textSx,
} from './styles';

export type BadgeProps = StandardComponentWithProps<
  HTMLSpanElement,
  {
    variant?: BadgeVariant;
    isAnimated?: boolean;
    badgeContent?: string | number;
    maxNumber?: number;
    showZero?: boolean;
  }
>;

export function Badge<RC extends ReactElement | undefined = undefined>({
  rc = <span />,
  domRef,
  testId,
  sx = {},
  variant = 'fatal',
  isAnimated = false,
  badgeContent,
  maxNumber = 999,
  showZero,
  ...badgeDomAttributes
}: RC extends undefined
  ? DomPropsWithDomRef<'span'> & BadgeProps
  : BadgeProps & { rc: RC }) {
  const displayContent = useMemo(() => {
    if (typeof badgeContent === 'number') {
      if (typeof maxNumber === 'number' && badgeContent > maxNumber) {
        return `+${maxNumber}`;
      }
      if (badgeContent === 0 && showZero) {
        return `${badgeContent}`;
      }
      if (badgeContent === 0 && !showZero) {
        return null;
      }
    }

    return badgeContent;
  }, [badgeContent, maxNumber, showZero]);

  const hasContent = useMemo(() => Boolean(displayContent), [displayContent]);
  const badgeSx = useMemo(
    () =>
      merge(
        baseBadgeSx,
        getBadgeVariantSx(variant),
        getBadgeAnimationSx(isAnimated, hasContent),
        {
          ...(!displayContent ? plainDotBadgeSx : {}),
        },
        sx,
      ),
    [variant, isAnimated, hasContent, displayContent, sx],
  );

  return (
    <Box
      {...badgeDomAttributes}
      rc={rc}
      sx={badgeSx}
      domRef={domRef as Ref<HTMLDivElement>}
      testId={testId}
    >
      {Boolean(displayContent) && (
        <Body
          sx={textSx}
          weight="bold"
          size="xxSmall"
          testId={`${testId}__text`}
        >
          {displayContent}
        </Body>
      )}
    </Box>
  );
}

Badge.displayName = 'Badge';
