import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { hexToRgbString } from '../../utils/colorHelpers';
import { vFlex } from '../../utils/sxChunks';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Box } from '../Box';
import { Badge } from './Badge';

describe('<Badge />', () => {
  it('should have correct displayName', () => {
    expect(Badge.displayName).to.eq('Badge');
  });
  it('should render a span by default, but override that when an rc prop is provided', () => {
    cyMountWithProviders(
      <>
        <Badge testId="default" />
        <Badge testId="asDiv" rc={<div />} />
      </>,
    );

    cyGetByTestId('default').its('0.nodeName').should('equal', 'SPAN');
    cyGetByTestId('asDiv').its('0.nodeName').should('equal', 'DIV');
  });

  it('should render correct variants when specified', () => {
    cyMountWithProviders(
      <div>
        <Badge testId="default" />
        <Badge testId="alert" variant="fatal" />
        <Badge testId="guidance" variant="guidance" />
        <Badge testId="success" variant="success" />
        <Badge testId="warning" variant="attention" />
      </div>,
    );

    cySmartGet('default').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal(
          hexToRgbString(
            smartPickTokenValue(designTokens, 'base.color.status.fatal.bright'),
          ),
        );
      });
    });
    cySmartGet('alert').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal(
          hexToRgbString(
            smartPickTokenValue(designTokens, 'base.color.status.fatal.bright'),
          ),
        );
      });
    });
    cySmartGet('guidance').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal(
          hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.guidance.bright',
            ),
          ),
        );
      });
    });
    cySmartGet('success').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal(
          hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.success.bright',
            ),
          ),
        );
      });
    });
    cySmartGet('warning').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const bg = before.getPropertyValue('background-color');
        expect(bg).to.equal(
          hexToRgbString(
            smartPickTokenValue(
              designTokens,
              'base.color.status.attention.bright',
            ),
          ),
        );
      });
    });
  });

  it('should accept styling via the sx prop', () => {
    cyMountWithProviders(
      <Badge testId="moo" sx={{ backgroundColor: 'red' }} />,
    );

    cyGetByTestId('moo').should('have.backgroundColor', 'rgb(255, 0, 0)');
  });

  it('should not animate by default, and then animated badge when isAnimated is true', () => {
    cyMountWithProviders(
      <>
        <Badge testId="default" />
        <Badge testId="animated" isAnimated />
      </>,
    );

    cyGetByTestId('default').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const animationName = before.getPropertyValue('animation-name');
        expect(animationName).to.eq('none');
      });
    });

    cyGetByTestId('animated').within($el => {
      cy.window().then(win => {
        const before = win.getComputedStyle($el[0], '::before');
        const animationName = before.getPropertyValue('animation-name');
        expect(animationName).to.match(/animation/);
      });
    });
  });

  it('should correctly forward the domRef', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(<Badge testId="moo" domRef={domRef} />);
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'SPAN',
    });
  });

  it('should render text inside, when neccissary', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" badgeContent="moo" />
      </Box>,
    );
    cySmartGet('moo__text').should('have.text', 'moo');
    cySmartGet('moo').should('have.css', 'padding-left', '8px');
    cySmartGet('moo')
      .should('have.css', 'width')
      .then(width => {
        expect(parseInt(width, 10)).to.be.greaterThan(8);
      });
  });

  it('should render a dot when no content is provided', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" />
      </Box>,
    );
    cySmartGet('moo').should('have.css', 'padding-left', '0px');
    cySmartGet('moo').should('have.css', 'width', '8px');
  });

  it('should render a dot when content is 0 and showZero is false', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" badgeContent={0} showZero={false} />
      </Box>,
    );
    cySmartGet('moo').should('have.css', 'padding-left', '0px');
    cySmartGet('moo').should('have.css', 'width', '8px');
  });

  it('should render text (0) when content is 0 and showZero is true', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" badgeContent={0} showZero />
      </Box>,
    );
    cySmartGet('moo__text').should('have.text', '0');
    cySmartGet('moo').should('have.css', 'padding-left', '8px');
    cySmartGet('moo')
      .should('have.css', 'width')
      .then(width => {
        expect(parseInt(width, 10)).to.be.greaterThan(8);
      });
  });

  it('should render text (maxNumber) when content is greater than maxNumber', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" badgeContent={999} maxNumber={99} />
      </Box>,
    );
    cySmartGet('moo__text').should('have.text', '+99');
  });

  it('should render text (content) when content is less than maxNumber', () => {
    cyMountWithProviders(
      <Box sx={{ ...vFlex, alignItems: 'center' }}>
        <Badge testId="moo" badgeContent={5} maxNumber={999} />
      </Box>,
    );
    cySmartGet('moo__text').should('have.text', '5');
  });
});
