import {
  designTokens,
  onLightBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';

import { ETH_TOKEN_IMAGE_URL, hexToRgbString } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Icon } from '../Icon';
import { MenuItem } from '../MenuItem';
import { Tooltip } from '../Tooltip';
import { VerticalMenu } from '../VerticalMenu';
import { ExpandableMenuItem } from './ExpandableMenuItem';

function DummyFixture({ testId = 'moo', children, ...props }: any) {
  return (
    <ExpandableMenuItem {...props} testId={testId}>
      <ExpandableMenuItem.Badge />
      <ExpandableMenuItem.Icon icon="AirDrop" />
      <ExpandableMenuItem.Label>Label</ExpandableMenuItem.Label>
      <ExpandableMenuItem.Caption>Caption</ExpandableMenuItem.Caption>
      {children}
      <VerticalMenu>
        <MenuItem>
          <MenuItem.Label>Something</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>
    </ExpandableMenuItem>
  );
}
describe('<ExpandableMenuItem />', () => {
  it('should have correct displayName', () => {
    expect(ExpandableMenuItem.displayName).to.eq('ExpandableMenuItem');
  });

  it('should correctly forward the MenuItem domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(<DummyFixture domRef={domRefStub} testId="moo" />);
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should render a <MenuItem> (with hover FX)', () => {
    cyMountWithProviders(<DummyFixture testId="moo" />);
    cySmartGet('moo__menuItem').realHover();
    cySmartGet('moo__menuItem').should(
      'have.css',
      'box-shadow',
      'rgba(0, 0, 0, 0.16) 0px 2px 6px 2px, rgba(0, 0, 0, 0.32) 0px 1px 2px 0px',
    );
  });

  it('should render anything including subcomponent children', () => {
    cyMountWithProviders(
      <DummyFixture>
        <div data-testid="not-a-subcomponent">some other text</div>
      </DummyFixture>,
    );
    cySmartGet('not-a-subcomponent').should('exist');

    cyMountWithProviders(
      <DummyFixture>
        <>how now brown cow</>
      </DummyFixture>,
    );
    cy.contains('how now brown cow').should('exist');

    cyMountWithProviders(
      <DummyFixture>
        <Icon icon="Discord" testId="moo" />
      </DummyFixture>,
    );
    cySmartGet('moo').should('exist');

    cyMountWithProviders(
      <DummyFixture>
        <ExpandableMenuItem.Label testId="moo">
          moo cow
        </ExpandableMenuItem.Label>
      </DummyFixture>,
    );
    cySmartGet('moo').should('exist');
  });

  it('should "emphasize" the menuItem, when neccissary', () => {
    cyMountWithProviders(<DummyFixture emphasized />);
    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );
  });

  it('should align text to the left by default', () => {
    cyMountWithProviders(<DummyFixture />);
    cySmartGet('moo__menuItem')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-start');
  });

  it('should render with right aligned text, when neccissary', () => {
    cyMountWithProviders(<DummyFixture textAlign="right" />);
    cySmartGet('moo__menuItem')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-end');
  });

  it('should render a "selected" GUI state, when "opened"', () => {
    cyMountWithProviders(<DummyFixture />);
    cySmartGet('moo').click();
    cySmartGet('moo__menuItem').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.200'),
    );
    cySmartGet('moo__menuItem')
      .should('have.css', 'border-width', '2px')
      .and(
        'have.css',
        'border-color',
        hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.1000',
          ),
        ),
      );
  });

  it('should render the menuItem in "medium" sizing by default', () => {
    cyMountWithProviders(<DummyFixture />);
    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '22px');
  });

  it('should render the menuItem in "small" sizing, when neccissary', () => {
    cyMountWithProviders(<DummyFixture size="small" />);
    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '10px');
  });

  it('should responsively change the size of the menuItem, when neccissary', () => {
    cy.viewport(onLightBase.breakpoint.small - 10, 200);
    cyMountWithProviders(<DummyFixture size={['small', null, 'medium']} />);

    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '10px');
    cy.viewport(onLightBase.breakpoint.medium, 200);
    cySmartGet('moo__menuItem').should('have.css', 'padding-top', '22px');
  });

  context('Controlled API', () => {
    it('should allow parent to control the "opened" state', () => {
      cyMountWithProviders(<DummyFixture expanded />);
      cySmartGet('moo__nestedVerticalMenu').should('exist').and('be.visible');
    });

    it('clicking to toggle the "opened" state should call the onExpandChange callback', () => {
      const onExpandChangeStub = cy.stub().as('onExpandChangeStub');
      cyMountWithProviders(
        <DummyFixture expanded onExpandChange={onExpandChangeStub} />,
      );
      cySmartGet('moo').click();
      cySmartGet('@onExpandChangeStub').should('have.been.calledWith', false);
    });

    it('should not toggle, when wired up incorrectly', () => {
      cyMountWithProviders(<DummyFixture expanded />);
      cySmartGet('moo__nestedVerticalMenu').should('exist').and('be.visible');
      cySmartGet('moo').click();
      cySmartGet('moo__nestedVerticalMenu').should('exist').and('be.visible');
    });
  });

  context('Uncontrolled API', () => {
    it('should open and close, when user iteracts with it', () => {
      cyMountWithProviders(<DummyFixture />);
      cySmartGet('moo__nestedVerticalMenu').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('moo__nestedVerticalMenu').should('exist').and('be.visible');
    });

    it('should call onExpandChange, even when in uncontrolled mode', () => {
      const onExpandChangeStub = cy.stub().as('onExpandChangeStub');
      cyMountWithProviders(
        <DummyFixture onExpandChange={onExpandChangeStub} />,
      );
      cySmartGet('moo').click();
      cySmartGet('@onExpandChangeStub').should('have.been.calledWith', true);
    });
  });

  context('Shimmer', () => {
    it('should NOT render the shimmer state by default', () => {
      cyMountWithProviders(<DummyFixture />);

      cySmartGet('moo__menuItem__shimmer').should('not.exist');
    });

    it('should render the shimmer state, when shimme prop is true', () => {
      cyMountWithProviders(<DummyFixture shimmer />, { useAllProviders: true });

      cySmartGet('moo__menuItem__shimmer').should('exist').and('be.visible');
      cySmartGet('moo__menuItem__shimmer__rightMask__shimmer').should(
        'be.visible',
      );
      cySmartGet('moo__menuItem__shimmer__rightMask__shimmer').should(
        'have.css',
        'background-image',
      );
    });

    it('should not allow expand/collapse props when the shimmer is active', () => {
      const onExpandChange = cy.stub().as('onExpandChange');
      cyMountWithProviders(
        <DummyFixture shimmer onExpandChange={onExpandChange} />,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('@onExpandChange').should('not.have.been.called');
      cySmartGet('moo').click();
      cySmartGet('@onExpandChange').should('not.have.been.called');
    });

    it('should accept rc prop, even while shimmer prop is active', () => {
      cyMountWithProviders(<DummyFixture shimmer rc={<section />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');

      cyMountWithProviders(<DummyFixture shimmer rc={<article />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo').its('0.nodeName').should('eq', 'ARTICLE');
    });

    it('should allow parent component to pass in sx for the shimmer state', () => {
      cyMountWithProviders(
        <DummyFixture shimmer shimmerSx={{ bg: 'gold' }} />,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__menuItem__shimmer').should(
        'have.backgroundColor',
        'gold',
      );
    });
  });

  context('Subcomponents', () => {
    it('should render the <ExpandableMenuItem.Icon /> subcomponent', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Icon icon="Discord" testId="icon" />
        </ExpandableMenuItem>,
      );
      cySmartGet('icon').should(
        'have.fillColor',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.primary'),
      );
    });

    it('should render the <ExpandableMenuItem.Label /> subcomponent', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Label testId="label">
            moo cow
          </ExpandableMenuItem.Label>
        </ExpandableMenuItem>,
      );
      cySmartGet('label').should(
        'have.color',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.primary'),
      );
    });

    it('should correctly render the <ExpandableMenuItem.Caption /> subcomponent', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Caption testId="caption">
            moo cow
          </ExpandableMenuItem.Caption>
        </ExpandableMenuItem>,
      );
      cySmartGet('caption').should(
        'have.color',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.secondary'),
      );
    });

    it('should correctly render the <ExpandableMenuItem.Badge /> subcomponent', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Badge testId="badge" />
        </ExpandableMenuItem>,
      );
      cySmartGet('badge').should('exist').and('be.visible');
    });

    it('should allow sx to be passed through to all subcomponents', () => {
      cyMountWithProviders(
        <ExpandableMenuItem sx={{ bg: 'gold' }} testId="moo">
          <ExpandableMenuItem.Icon icon="Cart" sx={{ bg: 'gold' }} />
          <ExpandableMenuItem.Label sx={{ bg: 'gold' }}>
            Some label text
          </ExpandableMenuItem.Label>
          <ExpandableMenuItem.Caption sx={{ bg: 'gold' }}>
            Some caption text
          </ExpandableMenuItem.Caption>
          <ExpandableMenuItem.Badge sx={{ bg: 'gold' }} />
        </ExpandableMenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo__menuItem__icon').should('have.backgroundColor', 'gold');
      cySmartGet('moo__menuItem__label').should('have.backgroundColor', 'gold');
      cySmartGet('moo__menuItem__caption').should(
        'have.backgroundColor',
        'gold',
      );
      cySmartGet('moo__menuItem__badge').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <ExpandableMenuItem testId="moo">
          <ExpandableMenuItem.FramedIcon icon="Add" sx={{ bg: 'gold' }} />
        </ExpandableMenuItem>,
      );

      cySmartGet('moo__menuItem__framedIcon').should(
        'have.backgroundColor',
        'gold',
      );

      cyMountWithProviders(
        <ExpandableMenuItem testId="moo">
          <ExpandableMenuItem.FramedImage
            imageUrl="https://placekitten.com/200/150"
            sx={{ bg: 'gold' }}
          />
        </ExpandableMenuItem>,
      );

      cySmartGet('moo__menuItem__framedImage').should(
        'have.backgroundColor',
        'gold',
      );

      cyMountWithProviders(
        <ExpandableMenuItem testId="moo">
          <ExpandableMenuItem.FramedLogo
            logo="PassportSymbol"
            sx={{ bg: 'gold' }}
          />
        </ExpandableMenuItem>,
      );

      cySmartGet('moo__menuItem__framedLogo').should(
        'have.backgroundColor',
        'gold',
      );
    });

    it(`should allow fontSizes for caption subcomponents to be any of MenuItem's size tokens`, () => {
      cyMountWithProviders(
        <ExpandableMenuItem size="medium">
          <ExpandableMenuItem.Caption testId="caption">
            caption
          </ExpandableMenuItem.Caption>
        </ExpandableMenuItem>,
      );
      cySmartGet('caption').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.xSmall.regular.fontSize',
        ),
      );

      cyMountWithProviders(
        <ExpandableMenuItem size="xSmall">
          <ExpandableMenuItem.Caption testId="caption">
            caption
          </ExpandableMenuItem.Caption>
        </ExpandableMenuItem>,
      );
      cySmartGet('caption').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.xxSmall.regular.fontSize',
        ),
      );
    });

    it(`should allow size prop for label subcomponents to be any of MenuItem's size tokens`, () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Label testId="label" size="small">
            caption
          </ExpandableMenuItem.Label>
        </ExpandableMenuItem>,
      );
      cySmartGet('label').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.medium.regular.fontSize',
        ),
      );
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Label testId="label" size="medium">
            caption
          </ExpandableMenuItem.Label>
        </ExpandableMenuItem>,
      );
      cySmartGet('label').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.heading.xSmall.regular.fontSize',
        ),
      );
    });

    it(`should correctly forward domRef for all subcomponents`, () => {
      cyMountWithProviders(
        <ExpandableMenuItem.FramedLogo
          logo="PassportSymbol"
          domRef={cy.stub().as('framedLogoRef')}
        />,
      );
      cySmartGet('@framedLogoRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.Icon
          icon="Cart"
          domRef={cy.stub().as('iconRef')}
        />,
      );
      cySmartGet('@iconRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.FramedIcon
          icon="Cart"
          domRef={cy.stub().as('framedIconRef')}
        />,
      );
      cySmartGet('@framedIconRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.FramedImage
          imageUrl="https://placekitten.com/200/150"
          domRef={cy.stub().as('framedImageRef')}
        />,
      );
      cySmartGet('@framedImageRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.Label domRef={cy.stub().as('labelRef')}>
          some text
        </ExpandableMenuItem.Label>,
      );
      cySmartGet('@labelRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.Caption domRef={cy.stub().as('captionRef')}>
          some text
        </ExpandableMenuItem.Caption>,
      );
      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <ExpandableMenuItem.Badge domRef={cy.stub().as('badgeRef')} />,
        { useAllProviders: true },
      );
      cySmartGet('@badgeRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
    });

    it('should render only <ExpandableMenuItem.FramedLogo /> when <ExpandableMenuItem.FramedLogo />, <ExpandableMenuItem.FramedImage />, <ExpandableMenuItem.Icon />, <ExpandableMenuItem.FramedIcon />, <ExpandableMenuItem.FramedImage /> subcomponents are all supplied', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedLogo
            logo="PassportSymbol"
            testId="framedLogo"
          />
          <ExpandableMenuItem.Icon icon="Cart" testId="icon" />
          <ExpandableMenuItem.FramedIcon icon="Cart" testId="framedIcon" />
          <ExpandableMenuItem.FramedImage
            testId="framedImage"
            imageUrl="https://placekitten.com/200/150"
            sx={{ bg: 'gold' }}
          />
        </ExpandableMenuItem>,
      );
      cySmartGet('icon').should('not.exist');
      cySmartGet('framedIcon').should('not.exist');
      cySmartGet('framedImage').should('not.exist');
      cySmartGet('framedLogo').should('exist');
    });

    it('should render only <ExpandableMenuItem.FramedIcon /> when <ExpandableMenuItem.Icon />, <ExpandableMenuItem.FramedIcon /> subcomponents are all supplied', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.Icon icon="Cart" testId="icon" />
          <ExpandableMenuItem.FramedIcon icon="Cart" testId="framedIcon" />
        </ExpandableMenuItem>,
      );
      cySmartGet('icon').should('not.exist');
      cySmartGet('framedIcon').should('exist');
    });

    it('should render FramedImage with standard borderRadius by default', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedIcon"
          />
        </ExpandableMenuItem>,
      );
      cySmartGet('framedIcon')
        .should('exist')
        .and('have.css', 'border-radius', '4px');
    });

    it('should allow FramedImage to be framed inside a circle, when neccissary', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedIcon"
            circularFrame
          />
        </ExpandableMenuItem>,
      );
      cySmartGet('framedIcon')
        .should('exist')
        .and('have.css', 'border-radius', '50%');
    });

    it('should render FramedIcon with "bold" icon, when neccissary', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedIcon
            icon="Cart"
            testId="framedIcon"
            variant="bold"
          />
        </ExpandableMenuItem>,
      );

      cySmartGet('framedIcon')
        .find('svg')
        .should('have.attr', 'data-variant', 'bold');
    });

    it('should not squish specific sub-component items, when the Label field is really long', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedImage"
            circularFrame
          />
          <ExpandableMenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </ExpandableMenuItem.Label>
          <ExpandableMenuItem.Caption>moo cow</ExpandableMenuItem.Caption>
        </ExpandableMenuItem>,
      );

      cySmartGet('framedImage').should('have.css', 'width', '48px');
    });

    it('should apply line clamping by default, to handle when MenuItem.Label is really long', () => {
      cyMountWithProviders(
        <ExpandableMenuItem>
          <ExpandableMenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            circularFrame
          />
          <ExpandableMenuItem.Label testId="moo">
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </ExpandableMenuItem.Label>
          <ExpandableMenuItem.Caption>moo cow</ExpandableMenuItem.Caption>
        </ExpandableMenuItem>,
      );

      cySmartGet('moo').should('have.css', 'height', '48px');
    });

    it('should still render a sub-component, even when it is wrapped by a Tooltip component', () => {
      cyMountWithProviders(
        <ExpandableMenuItem size="xSmall">
          <Tooltip>
            <Tooltip.Target>
              <ExpandableMenuItem.Label testId="label">
                Moooo
              </ExpandableMenuItem.Label>
            </Tooltip.Target>
            <Tooltip.Content>mooo</Tooltip.Content>
          </Tooltip>
        </ExpandableMenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('label').should('exist');
    });
  });
});
