import { AnimatePresence, motion } from 'framer-motion';
import { ReactElement, ReactNode, useCallback, useState } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useSplitApartChildrenAndSubComponents,
  useTheme,
} from '../../hooks';
import { InputTextAlign } from '../../types/input';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from '../../types/shared';
import { DeeplyNestedSx } from '../../types/sxProps';
import { noop } from '../../utils';
import { getStartingSize } from '../../utils/styleHelpers';
import { MenuItem } from '../MenuItem';
import { MenuItemBadge } from '../MenuItem/MenuItemBadge';
import { MenuItemCaption } from '../MenuItem/MenuItemCaption';
import { MenuItemFramedIcon } from '../MenuItem/MenuItemFramedIcon';
import { MenuItemFramedImage } from '../MenuItem/MenuItemFramedImage';
import { MenuItemFramedLogo } from '../MenuItem/MenuItemFramedLogo';
import { MenuItemIcon } from '../MenuItem/MenuItemIcon';
import { MenuItemIntentIcon } from '../MenuItem/MenuItemIntentIcon';
import { MenuItemLabel } from '../MenuItem/MenuItemLabel';
import { MenuItemStatefulButtCon } from '../MenuItem/MenuItemStatefulButtCon';
import {
  DEFAULT_MENU_ITEM_SIZE,
  MENU_ITEM_SIZES,
  MenuItemSize,
} from '../MenuItem/shared';
import { SmartClone } from '../SmartClone';
import { Stack } from '../Stack';
import { SvgIcon } from '../SvgIcon';
import { VerticalMenu } from '../VerticalMenu';
import {
  containerSx,
  nestedVerticalMenuSx,
  renderContainerResponsiveStyles,
  renderSizeBasedContainerStyles,
  rightChevronSx,
} from './style';

export type ExpandableMenuItemProps = StandardComponentWithProps<
  HTMLDivElement,
  {
    emphasized?: boolean;
    children: ReactNode;
    size?: MakeResponsive<MenuItemSize>;
    textAlign?: InputTextAlign;
    onExpandChange?: (expanded: boolean) => void;
    shimmer?: boolean;
    shimmerSx?: DeeplyNestedSx;
  } & (
    | {
        expanded: boolean;
        defaultExpanded?: never;
      }
    | {
        defaultExpanded?: boolean;
        expanded?: never;
      }
  )
>;

export function ExpandableMenuItem<
  RC extends ReactElement | undefined = undefined,
>(
  props: RC extends undefined
    ? DomPropsWithDomRef<'div'> & ExpandableMenuItemProps
    : ExpandableMenuItemProps & { rc: RC },
) {
  const {
    children,
    size = DEFAULT_MENU_ITEM_SIZE,
    emphasized = false,
    textAlign,
    expanded,
    defaultExpanded,
    testId,
    onExpandChange,
    className,
    shimmer,
    shimmerSx,
    sx = {},
    ...otherProps
  } = 'expanded' in props
    ? { ...props, defaultExpanded: undefined }
    : { ...props, expanded: undefined };
  const theme = useTheme();
  const { base } = theme;
  const [uncontrolledExpanded, setUncontrolledExpanded] =
    useState(defaultExpanded);
  const expandedValueToUse = expanded ?? uncontrolledExpanded;
  const nestedVerticalMenu = useGetSubcomponentChild(children, VerticalMenu);
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    VerticalMenu,
    MenuItemStatefulButtCon,
    MenuItemIntentIcon,
  ]);
  const startingSize = getStartingSize(
    size,
    DEFAULT_MENU_ITEM_SIZE,
    MENU_ITEM_SIZES,
  );

  const allStyles = merge(
    {},
    containerSx,
    renderSizeBasedContainerStyles({ size: startingSize, theme }),
    renderContainerResponsiveStyles({
      size,
      theme,
    }),
    sx,
  );

  const handleToggle = useCallback(() => {
    if (shimmer) return;
    if (typeof expanded === 'undefined') {
      setUncontrolledExpanded(old => {
        onExpandChange?.(!old);
        return !old;
      });
    } else {
      onExpandChange?.(!expanded);
    }
  }, [expanded, onExpandChange, shimmer]);

  return (
    <Stack
      {...otherProps}
      onClick={handleToggle}
      direction="column"
      gap="base.spacing.x1"
      sx={allStyles}
      className={`${className ?? ''} ExpandableMenuItem`}
      testId={testId}
    >
      <MenuItem
        size={size}
        emphasized={emphasized}
        textAlign={textAlign}
        shimmer={shimmer}
        shimmerSx={shimmerSx}
        // @NOTE: ensure that hoverFX are automatically given to any
        // ExpandableMenuItem component (to indicate interactivity)
        onClick={noop}
        sx={{ position: 'relative' }}
        selected={expandedValueToUse}
        testId={`${testId}__menuItem`}
      >
        {otherChildren}
        <MenuItem.IntentIcon sx={{ opacity: 0 }} />
        <SvgIcon className="chevron" sx={rightChevronSx} rc={<motion.svg />}>
          <motion.path
            initial="down"
            animate={expandedValueToUse ? 'up' : 'down'}
            variants={{
              down: {
                d: 'M5 9L12 16L19 9',
              },
              up: {
                d: 'M5 16L12 9L19 16',
              },
            }}
            transition={{
              ease: base.motion.normal.fast.jsEase,
              duration: base.motion.normal.fast.jsDuration,
            }}
          />
        </SvgIcon>
      </MenuItem>

      <AnimatePresence>
        {Boolean(nestedVerticalMenu) && expandedValueToUse ? (
          <SmartClone
            rc={
              <motion.div
                initial={{
                  opacity: 0,
                  height: 0,
                  overflow: 'hidden',
                }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                  transitionEnd: {
                    overflow: 'visible',
                  },
                }}
                exit={{
                  height: 0,
                  opacity: 0,
                  overflow: 'hidden',
                }}
                transition={{
                  duration: base.motion.normal.fast.jsDuration,
                  ease: base.motion.normal.fast.jsEase,
                }}
              />
            }
            onClick={event => event.stopPropagation()}
            emphasized={emphasized}
            sx={merge(nestedVerticalMenuSx, nestedVerticalMenu?.props.sx || {})}
            testId={
              nestedVerticalMenu?.props.testId ??
              `${testId}__nestedVerticalMenu`
            }
          >
            {nestedVerticalMenu}
          </SmartClone>
        ) : null}
      </AnimatePresence>
    </Stack>
  );
}

ExpandableMenuItem.displayName = 'ExpandableMenuItem';
ExpandableMenuItem.Icon = MenuItemIcon;
ExpandableMenuItem.FramedIcon = MenuItemFramedIcon;
ExpandableMenuItem.FramedImage = MenuItemFramedImage;
ExpandableMenuItem.FramedLogo = MenuItemFramedLogo;
ExpandableMenuItem.Label = MenuItemLabel;
ExpandableMenuItem.Caption = MenuItemCaption;
ExpandableMenuItem.Badge = MenuItemBadge;
