import { BiomeTheme, MakeResponsive } from '../../types';
import { getResponsiveSx } from '../../utils/styleHelpers';
import { MenuItemSize } from '../MenuItem/shared';
import { baseStyles as menuItemBaseStyles } from '../MenuItem/styles';

export const containerSx = {
  transitionProperty: menuItemBaseStyles.transitionProperty,
  transitionDuration: menuItemBaseStyles.transitionDuration,
  transitionTimingFunction: menuItemBaseStyles.transitionTimingFunction,
  width: '100%',
  cursor: 'pointer',

  // @NOTE: apply incremental amounts of left
  // indentation to indicate nested heriarchy
  '& .VerticalMenu .MenuItem': {
    paddingLeft: 'base.spacing.x9', // x3 + x6
  },

  '& .VerticalMenu .ExpandableMenuItem .VerticalMenu .MenuItem': {
    paddingLeft: 'base.spacing.x15', // x3 + x6 + x6
  },

  '& .VerticalMenu .ExpandableMenuItem .VerticalMenu .ExpandableMenuItem .VerticalMenu .MenuItem':
    {
      paddingLeft: 'base.spacing.x21', // x3 + x6 + x6 + x6
    },

  '& .VerticalMenu .ExpandableMenuItem .VerticalMenu .ExpandableMenuItem .VerticalMenu .ExpandableMenuItem .VerticalMenu .MenuItem':
    {
      paddingLeft: 'base.spacing.x27', // x3 + x6 + x6 + x6 + x6
    },
};

export const rightChevronSx = {
  position: 'absolute',
  right: 'base.spacing.x3',
  w: '18px',
  stroke: 'base.color.text.secondary',
  strokeWidth: 2.3,
  fill: 'transparent',
};

export const nestedVerticalMenuSx = {
  overflow: 'visible',
  p: '0',
  bg: 'transparent',
  maxh: 'unset',
  boxShadow: 'unset',
  brad: 'unset',
};

export const renderSizeBasedContainerStyles = ({
  size,
}: {
  size: MakeResponsive<MenuItemSize>;
  theme: BiomeTheme;
}) => {
  switch (size) {
    case 'xSmall':
      return {
        borderRadius: 'base.borderRadius.x4',
      };

    case 'small':
    case 'medium':
    default:
      return {
        borderRadius: 'base.borderRadius.x6',
      };
  }
};

export const renderContainerResponsiveStyles = ({
  size,
  theme,
}: {
  size: MakeResponsive<MenuItemSize>;
  theme: BiomeTheme;
}) =>
  getResponsiveSx({
    size,
    theme,
    renderSxAtSize: renderSizeBasedContainerStyles,
  });
