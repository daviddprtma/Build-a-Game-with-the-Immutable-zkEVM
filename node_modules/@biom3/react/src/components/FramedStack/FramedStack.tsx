import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetCurrentSizeClass,
  useGetRelativeImageSizeInLayout,
  useGetResponsiveImageSizes,
  useTheme,
} from '../../hooks';
import {
  DEFAULT_IMAGE_SIZE_VARIANT,
  IMAGE_SIZE_VARIANTS,
  ImageSizeVariant,
} from '../../types/image';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { FramedImage } from '../FramedImage';
import {
  baseContainerSx,
  baseMainImageSx,
  baseOuterLayerSx,
  getContainerSx,
  getResponsiveContainerSx,
} from './styles';

export type FramedStackProps = StandardComponentWithProps<
  HTMLDivElement,
  {
    circularFrame?: boolean;
    primaryImageUrl: string;
    secondaryImageUrl?: string;
    tertiaryImageUrl?: string;
    direction?: 'spiral' | 'rightDiagonal' | 'leftDiagonal' | 'left' | 'right';
    size?: MakeResponsive<ImageSizeVariant>;
  }
>;

export function FramedStack<RC extends ReactElement | undefined = undefined>({
  primaryImageUrl,
  secondaryImageUrl,
  tertiaryImageUrl,
  direction = 'spiral',
  testId = 'FramedStack',
  circularFrame,
  className,
  size = DEFAULT_IMAGE_SIZE_VARIANT,
  sx = {},
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & FramedStackProps
  : FramedStackProps & { rc: RC }) {
  const startingSize = getStartingSize(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );
  const theme = useTheme();
  const containerSx = merge(
    baseContainerSx,
    {
      pos: 'relative',
    },
    getContainerSx({ theme, size: startingSize }),
    getResponsiveContainerSx({ theme, size }),
    sx,
  );
  const responsiveImageSizes = useGetResponsiveImageSizes(size, 'FramedStack');
  const relativeImageSizeInLayout = useGetRelativeImageSizeInLayout(
    size,
    'FramedStack',
  );
  const sizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );

  return (
    <Box
      {...props}
      testId={testId}
      className={`${
        className ?? ''
      } FramedStack FramedStack--${sizeClass} FramedStack--${direction} FramedStack--${
        circularFrame ? 'circle' : 'square'
      }`}
      sx={containerSx}
    >
      <Box className="FramedStack__outer" sx={baseOuterLayerSx}>
        <FramedImage
          testId={`${testId}__framedImage--tertiary`}
          imageUrl={tertiaryImageUrl || primaryImageUrl}
          circularFrame={circularFrame}
          className="FramedStack__outer__image FramedStack__outer__image--tertiary"
        />
        <FramedImage
          testId={`${testId}__framedImage--secondary`}
          imageUrl={secondaryImageUrl || primaryImageUrl}
          circularFrame={circularFrame}
          className="FramedStack__outer__image FramedStack__outer__image--secondary"
        />
      </Box>
      <FramedImage
        testId={`${testId}__framedImage--primary`}
        circularFrame={circularFrame}
        imageUrl={primaryImageUrl}
        className="FramedStack__image FramedStack__image--primary"
        responsiveSizes={responsiveImageSizes}
        relativeImageSizeInLayout={relativeImageSizeInLayout}
        sx={baseMainImageSx}
      />
    </Box>
  );
}

FramedStack.displayName = 'FramedStack';
