import { ETH_TOKEN_IMAGE_URL } from '../../utils/dummyImages';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { FramedImage } from './FramedImage';

describe('<FramedImage />', () => {
  it('should have correct displayName', () => {
    expect(FramedImage.displayName).to.eq('FramedImage');
  });
  it('should be framed by a standard borderRadius by default', () => {
    cyMountWithProviders(
      <FramedImage imageUrl={ETH_TOKEN_IMAGE_URL} testId="moo" />,
    );
    cySmartGet('moo').should('have.css', 'border-radius', '4px');
  });

  it('should be framed by a circle, when neccissary', () => {
    cyMountWithProviders(
      <FramedImage imageUrl={ETH_TOKEN_IMAGE_URL} testId="moo" circularFrame />,
    );
    cySmartGet('moo').should('have.css', 'border-radius', '50%');
  });

  it('should correctly fwd the domRef prop', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(
      <FramedImage
        imageUrl={ETH_TOKEN_IMAGE_URL}
        testId="moo"
        domRef={domRef}
      />,
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly apply sx style props', () => {
    cyMountWithProviders(
      <FramedImage
        imageUrl={ETH_TOKEN_IMAGE_URL}
        testId="moo"
        sx={{ bg: 'gold' }}
      />,
    );
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should support rc prop', () => {
    cyMountWithProviders(
      <FramedImage
        imageUrl={ETH_TOKEN_IMAGE_URL}
        testId="moo"
        rc={<section />}
      />,
    );
    cySmartGet('moo').its('0.nodeName').should('equal', 'SECTION');
  });
});
