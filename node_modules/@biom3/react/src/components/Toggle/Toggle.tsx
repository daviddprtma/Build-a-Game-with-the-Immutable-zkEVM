import { ReactElement, Ref } from 'react';
import merge from 'ts-deepmerge';

import { useForwardLocalDomRef } from '../../hooks';
import { useHover } from '../../hooks/useHover';
import {
  InputTextAlign,
  InputValidationStatus,
  StandardInputComponentWithProps,
} from '../../types/input';
import { inputResetStyles } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { Icon } from '../Icon';
import {
  containerSx,
  handleSx,
  inputCss,
  tickSx,
  toggleContainerSx,
} from './styles';

export type ToggleProps = StandardInputComponentWithProps<
  'input',
  {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
  }
>;

export function Toggle<RC extends ReactElement | undefined = undefined>({
  sx = {},
  testId = 'Toggle',
  name,
  id = name,
  children,
  domRef = { current: null },
  className,
  onChange,
  checked,
  value,
  disabled,
  textAlign,
  validationStatus,
  inputRef,
  rc,
  ...inputHtmlAttrs
}: RC extends undefined ? ToggleProps : ToggleProps & { rc: RC }) {
  const localDomRef = useForwardLocalDomRef(domRef);
  const isHovering = useHover(localDomRef);
  const resetStyles = inputResetStyles(disabled);

  return (
    <Box
      rc={rc}
      domRef={localDomRef}
      testId={testId}
      className={className}
      sx={merge(containerSx, sx)}
    >
      <input
        {...inputHtmlAttrs}
        type="checkbox"
        data-testid={`${testId}__input`}
        id={id}
        name={name}
        value={value}
        checked={checked}
        onChange={onChange}
        disabled={disabled}
        ref={inputRef}
        css={merge(resetStyles, inputCss)}
        className="actualInput"
      />

      <Box
        className="toggleContainer"
        sx={toggleContainerSx}
        testId={`${testId}__toggleContainer`}
      >
        <Box className="toggleHandle" rc={<span />} sx={handleSx}>
          <Icon
            icon="Tick"
            variant={isHovering && !disabled ? 'regular' : 'bold'}
            testId={`${testId}__checkIcon`}
            sx={tickSx}
            className="toggleHandle__tickIcon"
          />
        </Box>
      </Box>
    </Box>
  );
}

Toggle.displayName = 'Toggle';
