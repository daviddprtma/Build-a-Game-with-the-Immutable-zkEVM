import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { Fit, Layout, useRive } from '@rive-app/react-canvas';
import { useState } from 'react';

import { BiomeCombinedProviders } from '../../providers';
import { DUMMY_RIVE_ANIMATION_URL } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { ButtCon } from '../Clickable';
import { LoadingOverlay } from './LoadingOverlay';

function UncontrolledLoadingOverlay({
  testId = 'moo',
  onCloseStub,
  ...props
}: any) {
  return (
    <LoadingOverlay {...props} testId={testId} onCloseModal={onCloseStub}>
      <LoadingOverlay.Target testId="button">
        <button type="button">open</button>
      </LoadingOverlay.Target>
      <LoadingOverlay.Content testId="content">
        <LoadingOverlay.Content.LoopingText
          text={['moo', 'cow', 'woof', 'dog']}
          textDuration={1000}
        />
      </LoadingOverlay.Content>
    </LoadingOverlay>
  );
}

function ControlledLoadingOverlay({ onCloseStub }: any) {
  const [visible, setVisible] = useState(false);
  return (
    <LoadingOverlay visible={visible} onCloseModal={onCloseStub} testId="moo">
      <LoadingOverlay.Target testId="button">
        <button type="button" onClick={() => setVisible(!visible)}>
          open
        </button>
      </LoadingOverlay.Target>
      <LoadingOverlay.Content testId="content">
        <LoadingOverlay.Content.LoopingText
          text={['moo', 'cow', 'woof', 'dog']}
          textDuration={1000}
        />
      </LoadingOverlay.Content>
    </LoadingOverlay>
  );
}

function CustomRive(props: any) {
  const { RiveComponent } = useRive({
    src: DUMMY_RIVE_ANIMATION_URL,
    autoplay: true,
    layout: new Layout({ fit: Fit.Cover }),
  });
  return <RiveComponent {...props} />;
}

describe('<LoadingOverlay />', () => {
  it('should have correct displayName', () => {
    expect(LoadingOverlay.displayName).to.eq('LoadingOverlay');
  });

  it('should correctly reveal LoadingOverlay.Content, when the button is clicked', () => {
    cyMountWithProviders(<UncontrolledLoadingOverlay />, {
      useAllProviders: true,
    });
    cySmartGet('button').should('exist');
    cySmartGet('content').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('content').should('exist');
  });

  it('should correctly forward the domRef of the target component', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(
      <LoadingOverlay domRef={domRef}>
        <LoadingOverlay.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </LoadingOverlay.Target>
      </LoadingOverlay>,
      { useAllProviders: true },
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should close the LoadingOverlay by default, when the user clicks outside', () => {
    cyMountWithProviders(<UncontrolledLoadingOverlay />, {
      useAllProviders: true,
    });

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('not.exist');
  });

  it('should not close the Modal, when the user clicks outside and outsideClicksClose is false', () => {
    cyMountWithProviders(
      <LoadingOverlay outsideClicksClose={false} testId="moo">
        <LoadingOverlay.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </LoadingOverlay.Target>
        <LoadingOverlay.Content testId="content">
          <LoadingOverlay.Content.LoopingText
            text={['moo', 'cow', 'woof', 'dog']}
            textDuration={1000}
          />
        </LoadingOverlay.Content>
      </LoadingOverlay>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('exist');
  });

  it('should render a background overlay color, by default', () => {
    cyMountWithProviders(<UncontrolledLoadingOverlay visible />, {
      useAllProviders: true,
    });
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });

  it('should not render a background overlay color, when neccissary', () => {
    cyMountWithProviders(
      <UncontrolledLoadingOverlay visible showBgOverlay={false} />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });
  it('should update visible LoadingOverlay.Content, as the parent component re-renders', () => {
    function LoadingOverlayWithCount() {
      const [count, setCount] = useState(0);
      return (
        <LoadingOverlay visible>
          <LoadingOverlay.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </LoadingOverlay.Target>
          <LoadingOverlay.Content testId="content">
            <LoadingOverlay.Content.LoopingText
              text={[`count: ${count}`]}
              textDuration={1000}
            />
          </LoadingOverlay.Content>
        </LoadingOverlay>
      );
    }
    cyMountWithProviders(<LoadingOverlayWithCount />, {
      useAllProviders: true,
    });
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click({ force: true });
    cySmartGet('content').should('have.text', 'count: 1');
  });
  it('should allow customisation of the bgOverlay via sx', () => {
    cyMountWithProviders(
      <UncontrolledLoadingOverlay
        visible
        showBgOverlay={false}
        testId="moo"
        bgOverlaySx={{ background: 'gold' }}
      />,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should('have.backgroundColor', 'gold');
  });
  it('should allow the use of an external container, when neccissary', () => {
    cyMountWithProviders(
      <BiomeCombinedProviders modalContainerId="moo">
        <Box
          id="moo"
          sx={{
            position: 'absolute',
            width: '100%',
            height: 'calc(100% - 50px)',
            top: '50px',
            left: '0',
            bg: 'red',
          }}
        />
        <UncontrolledLoadingOverlay />
      </BiomeCombinedProviders>,
    );
    cySmartGet('button').click();
    cySmartGet('#moo div[data-testid="content"]').should('exist');
    cySmartGet('content').should('exist');
  });
  it('should render centered by default, and left align when neccissary', () => {});

  context('Controlled API', () => {
    it('should not toggle visibility of the Modal.Content, if the control is not properly wired up', () => {
      cyMountWithProviders(
        <LoadingOverlay visible testId="moo">
          <LoadingOverlay.Content testId="content">
            hello
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('exist');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('content').should('exist');

      cyMountWithProviders(
        <LoadingOverlay visible={false}>
          <LoadingOverlay.Target>
            <button type="button" data-testid="button">
              open
            </button>
          </LoadingOverlay.Target>
          <LoadingOverlay.Content testId="content">
            hello
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });
    it('should call onCloseModal prop function, when something is trying to close the Modal', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(
        <ControlledLoadingOverlay onCloseStub={onCloseStub} />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('Uncontrolled API', () => {
    it('should open a LoadingOverlay, when the user clicks the target', () => {
      cyMountWithProviders(<UncontrolledLoadingOverlay />, {
        useAllProviders: true,
      });
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist');
    });
    it('should still fire onCloseModal prop function when a Modal is closed', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(
        <UncontrolledLoadingOverlay onCloseStub={onCloseStub} />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('supported children & sub-components', () => {
    it('should allow the rendering of anything aswell as supported children & sub-components', () => {
      cyMountWithProviders(
        <LoadingOverlay visible>
          <LoadingOverlay.Content testId="moo">
            <LoadingOverlay.Content.LoopingText
              text={['moo', 'cow', 'woof', 'dog']}
              textDuration={1000}
            />
            <div data-testid="div">will render</div>
            <ButtCon icon="Apple" testId="buttcon" />
            also will render
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );
      cySmartGet('moo__riveBox').should('exist');
      cySmartGet('moo__loopingText').should('exist');
      cySmartGet('div').should('exist');
      cy.contains('also will render').should('exist');
      cySmartGet('buttcon').should('exist');
    });

    it('should support rendering a rive animation', () => {
      cyMountWithProviders(
        <LoadingOverlay visible>
          <LoadingOverlay.Content>
            <LoadingOverlay.Content.RiveBox
              rc={<CustomRive />}
              testId="riveBox"
            />
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );

      cySmartGet('riveBox').should('exist');
    });

    it('should correctly apply sx style props to all supported children & sub-components', () => {
      cyMountWithProviders(
        <LoadingOverlay visible>
          <LoadingOverlay.Content sx={{ bg: 'gold' }} testId="moo">
            <LoadingOverlay.Content.LoopingText
              text={['moo', 'cow', 'woof', 'dog']}
              textDuration={1000}
              sx={{ bg: 'red' }}
            />
            <LoadingOverlay.Content.RiveBox
              rc={<CustomRive />}
              sx={{ bg: 'gold' }}
            />
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );

      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo__loopingText').should('have.backgroundColor', 'red');
      cySmartGet('moo__riveBox').should('have.backgroundColor', 'gold');
    });

    it('should correctly fwd domRef from all supported children & sub-components', () => {
      const contentRef = cy.stub().as('contentRef');
      const loopingTextRef = cy.stub().as('loopingTextRef');
      const riveBoxRef = cy.stub().as('riveBoxRef');
      cyMountWithProviders(
        <LoadingOverlay visible testId="moo">
          <LoadingOverlay.Content domRef={contentRef}>
            <LoadingOverlay.Content.LoopingText
              domRef={loopingTextRef}
              text={['moo', 'cow', 'woof', 'dog']}
              textDuration={1000}
              sx={{ bg: 'red' }}
            />
            <LoadingOverlay.Content.RiveBox
              rc={<CustomRive />}
              sx={{ bg: 'gold' }}
              domRef={riveBoxRef}
            />
          </LoadingOverlay.Content>
        </LoadingOverlay>,
        { useAllProviders: true },
      );

      cySmartGet('@contentRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
      cySmartGet('@riveBoxRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
      cySmartGet('@loopingTextRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
    });
  });
});
