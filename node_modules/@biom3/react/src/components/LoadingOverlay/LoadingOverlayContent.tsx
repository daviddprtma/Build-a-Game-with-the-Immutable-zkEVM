import { Fit, Layout, useRive } from '@rive-app/react-canvas';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useSplitApartChildrenAndSubComponents,
  useTheme,
} from '../../hooks';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { vFlex } from '../../utils/sxChunks';
import { BoxWithRCAndDomProps } from '../Box';
import { ModalContent } from '../Modal/ModalContent';
import { SmartClone } from '../SmartClone';
import { LoadingOverlayContentLoopingText } from './LoadingOverlayContentLoopingText';
import { LoadingOverlayContentRiveBox } from './LoadingOverlayContentRiveBox';
import { getContainerSx, getResponsiveContainerSx } from './style';

export const DEFAULT_LOADING_OVERLAY_SIZE = 'medium';
export const LOADING_OVERLAY_SIZES = ['small', 'medium'] as const;
export type LoadingOverlaySize = (typeof LOADING_OVERLAY_SIZES)[number];

export type LoadingOverlayContentProps<
  RC extends ReactElement | undefined = undefined,
> = BoxWithRCAndDomProps<RC> & {
  size?: MakeResponsive<LoadingOverlaySize>;
};

export function LoadingOverlayContent<
  RC extends ReactElement | undefined = undefined,
>({
  children,
  sx = {},
  testId,
  size = DEFAULT_LOADING_OVERLAY_SIZE,
  ...props
}: LoadingOverlayContentProps<RC>) {
  const theme = useTheme();
  const { RiveComponent: DefaultRive } = useRive({
    src: 'https://biome.immutable.com/hosted-assets/rive/immutable_loader.riv',
    autoplay: true,
    layout: new Layout({ fit: Fit.Contain }),
  });
  const riveBox = useGetSubcomponentChild(
    children,
    LoadingOverlayContentRiveBox,
  );
  const loopingText = useGetSubcomponentChild(
    children,
    LoadingOverlayContentLoopingText,
  );
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    LoadingOverlayContentRiveBox,
    LoadingOverlayContentLoopingText,
  ]);
  const startingSize = getStartingSize(
    size,
    DEFAULT_LOADING_OVERLAY_SIZE,
    LOADING_OVERLAY_SIZES,
  );
  const containerSx = merge(
    {
      ...vFlex,
      alignItems: 'center',
      bg:
        theme.base.colorMode === 'darkOnLight'
          ? 'base.color.translucent.inverse.800'
          : 'base.color.translucent.inverse.300',
      boxShadow: 'base.shadow.500',
      brad: 'base.borderRadius.x8',
      gap: 'base.spacing.x4',
      backdropFilter: 'blur(16px)',
    },
    getContainerSx({
      size: startingSize,
      theme,
    }),
    getResponsiveContainerSx({ size, theme }),
    sx,
  );

  return (
    <ModalContent {...props} sx={containerSx} testId={testId}>
      {riveBox ? (
        <SmartClone testId={riveBox.props.testId ?? `${testId}__riveBox`}>
          {riveBox}
        </SmartClone>
      ) : (
        <LoadingOverlayContentRiveBox
          rc={<DefaultRive />}
          testId={`${testId}__riveBox`}
        />
      )}

      {loopingText && (
        <SmartClone testId={`${testId}__loopingText`} size={size}>
          {loopingText}
        </SmartClone>
      )}

      {otherChildren}
    </ModalContent>
  );
}

LoadingOverlayContent.displayName = 'LoadingOverlay.Content';
LoadingOverlayContent.RiveBox = LoadingOverlayContentRiveBox;
LoadingOverlayContent.LoopingText = LoadingOverlayContentLoopingText;
