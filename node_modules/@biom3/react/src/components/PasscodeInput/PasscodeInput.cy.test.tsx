import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import { hexToRgbString } from '../../utils/colorHelpers';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { PasscodeInput } from './PasscodeInput';

const nativeInputValueSetter = Object.getOwnPropertyDescriptor(
  window.HTMLInputElement.prototype,
  'value',
)?.set as (v: string) => void;

function PasscodeInputWithInternalState() {
  const [currentPasscode, setCurrentPasscode] = useState('');

  return (
    <PasscodeInput
      testId="moo"
      currentPasscode={currentPasscode}
      onPasscodeChange={setCurrentPasscode}
    />
  );
}

describe('<PasscodeInput />', () => {
  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(<PasscodeInput testId="moo" domRef={domRefStub} />);
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should render 6 input fields by default', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" />);
    cySmartGet('moo').children().should('have.length', 6);
  });

  it('should render X input fields when passcodeLength is X', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" passcodeLength={3} />);
    cySmartGet('moo').children().should('have.length', 3);

    cyMountWithProviders(<PasscodeInput testId="moo" passcodeLength={8} />);
    cySmartGet('moo').children().should('have.length', 8);
  });

  it('should allow rendering dom attributes to the root node', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" aria-readonly="true" />);
    cySmartGet('moo').should('have.attr', 'aria-readonly', 'true');
  });

  it('should render inside a div by default, but allow rendering as a different root element', () => {
    cyMountWithProviders(
      <>
        <PasscodeInput testId="default" />
        <PasscodeInput testId="section" rc={<section />} />
      </>,
    );
    cySmartGet('default').its('0.nodeName').should('equal', 'DIV');
    cySmartGet('section').its('0.nodeName').should('equal', 'SECTION');
  });

  it('should accept sx style props', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should allow copy/pasting of the code, no matter how many digits are in the clipboard', () => {
    const code = '123456';
    cyMountWithProviders(<PasscodeInput testId="moo" />);
    cySmartGet('moo__TextInput--0__input')
      .then(el => {
        nativeInputValueSetter.call(el[0], code);
        el[0].dispatchEvent(
          new Event('change', { value: code, bubbles: true } as any),
        );
      })
      .trigger('change');

    cySmartGet('moo__TextInput--0__input').should('have.value', '1');
    cySmartGet('moo__TextInput--1__input').should('have.value', '2');
    cySmartGet('moo__TextInput--2__input').should('have.value', '3');
    cySmartGet('moo__TextInput--3__input').should('have.value', '4');
    cySmartGet('moo__TextInput--4__input').should('have.value', '5');
    cySmartGet('moo__TextInput--5__input').should('have.value', '6');

    const code2 = '1234';
    cyMountWithProviders(<PasscodeInput testId="moo" />);
    cySmartGet('moo__TextInput--0__input')
      .then(el => {
        nativeInputValueSetter.call(el[0], code2);
        el[0].dispatchEvent(
          new Event('change', { value: code, bubbles: true } as any),
        );
      })
      .trigger('change');

    cySmartGet('moo__TextInput--0__input').should('have.value', '1');
    cySmartGet('moo__TextInput--1__input').should('have.value', '2');
    cySmartGet('moo__TextInput--2__input').should('have.value', '3');
    cySmartGet('moo__TextInput--3__input').should('have.value', '4');
    cySmartGet('moo__TextInput--4__input').should('have.value', '');
    cySmartGet('moo__TextInput--5__input').should('have.value', '');
  });

  it('should paste in the first chunk of numbers, if the pasted number sequence is too long', () => {
    const code = '123456789123456789';
    cyMountWithProviders(<PasscodeInput testId="moo" />);
    cySmartGet('moo__TextInput--0__input')
      .then(el => {
        nativeInputValueSetter.call(el[0], code);
        el[0].dispatchEvent(
          new Event('change', { value: code, bubbles: true } as any),
        );
      })
      .trigger('change');
    cy.wait(100);

    cySmartGet('moo__TextInput--0__input').should('have.value', '1');
    cySmartGet('moo__TextInput--1__input').should('have.value', '2');
    cySmartGet('moo__TextInput--2__input').should('have.value', '3');
    cySmartGet('moo__TextInput--3__input').should('have.value', '4');
    cySmartGet('moo__TextInput--4__input').should('have.value', '5');
    cySmartGet('moo__TextInput--5__input').should('have.value', '6');
  });

  it('should only accept digits as input, not alphabetical characters', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" />);
    cySmartGet('moo__TextInput--0__input').type('asdf');
    cySmartGet('moo__TextInput--0__input').should('have.value', '');
  });

  it('should select the next input, once an input has been filled, and so on until the end', () => {
    cyMountWithProviders(<PasscodeInput testId="moo" passcodeLength={3} />);
    cySmartGet('moo__TextInput--0__input').type('1');
    cySmartGet('moo__TextInput--1__input').should('be.focused');
    cySmartGet('moo__TextInput--1__input').type('2');
    cySmartGet('moo__TextInput--2__input').should('be.focused');
    cySmartGet('moo__TextInput--2__input').type('2');
    cySmartGet('moo__TextInput--2__input').should('be.focused');
  });

  it('should allow the user to backspace to the previous input, and so on until the beginning', () => {
    cyMountWithProviders(
      <PasscodeInput testId="moo" passcodeLength={3} defaultPasscode="123" />,
    );
    cySmartGet('moo__TextInput--2__input').type('{backspace}{backspace}');
    cySmartGet('moo__TextInput--1__input').should('be.focused');
    cySmartGet('moo__TextInput--2__input').should('have.value', '');
    cySmartGet('moo__TextInput--1__input').should('have.value', '');
    cySmartGet('moo__TextInput--1__input').type('{backspace}');
    cySmartGet('moo__TextInput--0__input').should('have.value', '');
    cySmartGet('moo__TextInput--0__input').should('be.focused');
  });

  it('should allow the user to navigate the inputs, using ALL of the arrow keys', () => {
    cyMountWithProviders(
      <PasscodeInput testId="moo" passcodeLength={3} defaultPasscode="123" />,
    );
    cySmartGet('moo__TextInput--2__input').type('{leftArrow}');
    cySmartGet('moo__TextInput--1__input').should('be.focused');
    cySmartGet('moo__TextInput--1__input').type('{upArrow}');
    cySmartGet('moo__TextInput--0__input').should('be.focused');
    cySmartGet('moo__TextInput--0__input').type('{rightArrow}');
    cySmartGet('moo__TextInput--1__input').should('be.focused');
    cySmartGet('moo__TextInput--1__input').type('{downArrow}');
    cySmartGet('moo__TextInput--2__input').should('be.focused');
  });

  it('should correctly render the control in an "error" validation state', () => {
    cyMountWithProviders(
      <PasscodeInput
        testId="moo"
        passcodeLength={3}
        defaultPasscode="123"
        validationStatus="error"
      />,
    );
    [0, 1, 2].forEach(i => {
      cySmartGet(`moo__TextInput--${i}__input`).should(
        'have.css',
        'box-shadow',
        `rgba(0, 0, 0, 0) 0px 0px 0px 0px, ${hexToRgbString(
          smartPickTokenValue(designTokens, 'base.color.status.fatal.bright'),
        )} 0px 0px 0px 1px inset`,
      );
    });
  });

  context('Uncontrolled API', () => {
    it('should allow setting a default value', () => {
      const code = '123';
      cyMountWithProviders(
        <PasscodeInput
          testId="moo"
          defaultPasscode={code}
          passcodeLength={3}
        />,
      );
      cySmartGet('moo__TextInput--0__input').should('have.value', '1');
      cySmartGet('moo__TextInput--1__input').should('have.value', '2');
      cySmartGet('moo__TextInput--2__input').should('have.value', '3');
    });

    it('should allow parent to listen to passcode changes', () => {
      const onChange = cy.stub().as('onChange');
      cyMountWithProviders(
        <PasscodeInput testId="moo" onPasscodeChange={onChange} />,
      );
      cySmartGet('@onChange').should('not.have.been.called');
      cySmartGet('moo__TextInput--0__input').type('123456');
      cySmartGet('@onChange').should('have.been.calledWith', '123456');
    });
  });

  context('Controlled API', () => {
    it('should not update the currentValue when the user type into the inputs, but the control is not wired up properly', () => {
      cyMountWithProviders(
        <PasscodeInput
          currentPasscode="0"
          testId="moo"
          onPasscodeChange={() => {}}
        />,
      );
      cySmartGet('moo__TextInput--0__input').type('1');
      cySmartGet('moo__TextInput--0__input').should('have.value', '0');
    });

    it('should allow the user to type into the inputs, when the control is wired up properly', () => {
      cyMountWithProviders(<PasscodeInputWithInternalState />);
      cySmartGet('moo__TextInput--0__input').should('have.value', '');
      cySmartGet('moo__TextInput--0__input').type('1');
      cySmartGet('moo__TextInput--0__input').should('have.value', '1');
    });

    it('should allow the use of onPasscodeChange in controlled mode', () => {
      const onChange = cy.stub().as('onChange');
      cyMountWithProviders(
        <PasscodeInput
          testId="moo"
          currentPasscode="0"
          onPasscodeChange={onChange}
        />,
      );
      cySmartGet('@onChange').should('not.have.been.called');
      cySmartGet('moo__TextInput--0__input').type('1');
      cySmartGet('@onChange').should('have.been.calledWith', '1');
      cySmartGet('moo__TextInput--0__input').type('2');
      cySmartGet('@onChange').should('have.been.calledWith', '2');
    });

    it('should prefill inputs with whatever is passed to currentPasscodeProp', () => {
      cyMountWithProviders(
        <PasscodeInput
          testId="moo"
          currentPasscode="012345"
          onPasscodeChange={() => {}}
        />,
      );
      cySmartGet('moo__TextInput--0__input').should('have.value', '0');
      cySmartGet('moo__TextInput--1__input').should('have.value', '1');
      cySmartGet('moo__TextInput--2__input').should('have.value', '2');
      cySmartGet('moo__TextInput--3__input').should('have.value', '3');
      cySmartGet('moo__TextInput--4__input').should('have.value', '4');
      cySmartGet('moo__TextInput--5__input').should('have.value', '5');
    });
  });
});
