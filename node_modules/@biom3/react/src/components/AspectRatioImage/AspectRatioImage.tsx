import { Property } from 'csstype';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { MakeResponsive, MakeValidSxValue } from '../../types';
import { BiomeTheme } from '../../types/theme';
import { getStartingSize } from '../../utils/styleHelpers';
import { hFlex } from '../../utils/sxChunks';
import { isError } from '../../utils/textStyleHelpers';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { CloudImage, CloudImageProps } from '../CloudImage';

export const ASPECT_RATIOS = [
  '1:1',
  '3:4',
  '4:3',
  '7:5',
  '16:9',
  '21:9',
  '32:9',
] as const;
export const DEFAULT_ASPECT_RATIO: AspectRatio = '1:1';
export type AspectRatio = (typeof ASPECT_RATIOS)[number];

// @TODO: refactor this component to just use the new
// css aspect-ratio property: https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio
export type AspectRatioImageProps<
  RC extends ReactElement | undefined = undefined,
> = BoxWithRCAndDomProps<RC> &
  Pick<
    CloudImageProps,
    | 'imageUrl'
    | 'relativeImageSizeInLayout'
    | 'imageResizeServiceUrl'
    | 'responsiveSizes'
    | 'loading'
    | 'defaultImageUrl'
    | 'defaultImageClassName'
    | 'alt'
  > & {
    aspectRatio?: MakeResponsive<AspectRatio>;
    objectFit?: MakeValidSxValue<Property.ObjectFit>;
    objectPosition?: MakeValidSxValue<Property.ObjectPosition>;
  };

export function getAspectRatioSx(aspect: AspectRatio) {
  switch (aspect) {
    case '3:4':
      return { paddingBottom: '133.33%' };

    case '4:3':
      return { paddingBottom: '75%' };

    case '7:5':
      return { paddingBottom: '71.43%' };

    case '16:9':
      return { paddingBottom: '56.25%' };

    case '21:9':
      return { paddingBottom: '42.86%' };

    case '32:9':
      return { paddingBottom: '28.13%' };

    case '1:1':
    default:
      return { paddingBottom: '100%' };
  }
}

function getResponsiveAspectRatioSx({
  theme,
  aspect,
}: {
  theme: BiomeTheme;
  aspect: MakeResponsive<AspectRatio>;
}) {
  const aspectAsArray = Array.isArray(aspect) ? [...aspect] : [aspect];
  aspectAsArray.shift();

  const aspectStyles = merge(
    ...aspectAsArray.map((responsiveAspect, index) => {
      if (responsiveAspect != null && !isError(responsiveAspect)) {
        const mediaStyleRule = `@media screen and (min-width: ${theme.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: getAspectRatioSx(responsiveAspect),
        };
      }
      return {};
    }),
  );

  return aspectStyles;
}

export function AspectRatioImage<
  RC extends ReactElement | undefined = undefined,
>({
  imageUrl,
  relativeImageSizeInLayout,
  responsiveSizes,
  imageResizeServiceUrl,
  defaultImageClassName,
  defaultImageUrl,
  loading,
  sx = {},
  aspectRatio = DEFAULT_ASPECT_RATIO,
  objectFit = 'cover',
  objectPosition = '50% 50%',
  testId,
  rc,
  className,
  alt,
  ...props
}: AspectRatioImageProps<RC>) {
  const theme = useTheme();
  const startingAspect = getStartingSize(
    aspectRatio,
    DEFAULT_ASPECT_RATIO,
    ASPECT_RATIOS,
  );
  const innerContainerSx = merge(
    { ...hFlex, position: 'relative', width: '100%' },
    getResponsiveAspectRatioSx({ theme, aspect: aspectRatio }),
    getAspectRatioSx(startingAspect),
  );

  return (
    <Box
      {...props}
      testId={testId}
      sx={merge({ d: 'flex', w: '100%', minw: '16px' }, sx)}
      rc={rc}
      className={`${className ?? ''} AspectRatioImage`}
    >
      <Box
        sx={innerContainerSx}
        testId={`${testId}__innerContainer`}
        rc={rc}
        className="AspectRatioImage__inner"
      >
        <CloudImage
          alt={alt}
          className="AspectRatioImage__inner__image"
          testId={`${testId}__innerContainer__cloudImage`}
          imageUrl={imageUrl}
          relativeImageSizeInLayout={relativeImageSizeInLayout}
          responsiveSizes={responsiveSizes}
          imageResizeServiceUrl={imageResizeServiceUrl}
          loading={loading}
          defaultImageClassName={defaultImageClassName}
          defaultImageUrl={defaultImageUrl}
          sx={{
            position: 'absolute',
            width: '100%',
            height: '100%',
            top: '0',
            left: '0',
            objectFit,
            objectPosition,
          }}
        />
      </Box>
    </Box>
  );
}

AspectRatioImage.displayName = 'AspectRatioImage';
