import { ReactElement, Ref } from 'react';
import merge from 'ts-deepmerge';

import { useForwardLocalDomRef, useTheme } from '../../hooks';
import { useHover } from '../../hooks/useHover';
import {
  InputTextAlign,
  InputValidationStatus,
  StandardInputComponentWithProps,
} from '../../types/input';
import { inputResetStyles } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { Icon } from '../Icon';
import {
  checkContainerSx,
  containerStyles,
  inputCssStyles,
  tickSx,
} from './styles';

export type CheckboxProps = StandardInputComponentWithProps<
  'input',
  {
    validationStatus?: InputValidationStatus;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
  }
>;

export function Checkbox<RC extends ReactElement | undefined = undefined>({
  sx = {},
  testId = 'Checkbox',
  name,
  id = name,
  children,
  domRef = { current: null },
  className,
  onChange,
  checked,
  value,
  disabled,
  validationStatus,
  inputRef,
  rc,
  textAlign,
  ...inputHtmlAttrs
}: RC extends undefined ? CheckboxProps : CheckboxProps & { rc: RC }) {
  const localDomRef = useForwardLocalDomRef(domRef);
  const isHovering = useHover(localDomRef);
  const resetStyles = inputResetStyles(disabled);
  const theme = useTheme();

  return (
    <Box
      rc={rc}
      domRef={localDomRef}
      testId={testId}
      className={className}
      sx={merge(containerStyles, sx)}
    >
      <input
        {...inputHtmlAttrs}
        type="checkbox"
        data-testid={`${testId}__input`}
        ref={inputRef}
        id={id}
        name={name}
        value={value}
        checked={checked}
        onChange={onChange}
        disabled={disabled}
        css={merge(resetStyles, inputCssStyles(theme))}
        className="actualInput"
      />
      <Box
        className="checkContainer"
        sx={checkContainerSx}
        testId={`${testId}__checkboxContainer`}
      >
        <Icon
          icon="Tick"
          className="checkIcon"
          variant={isHovering && !disabled ? 'regular' : 'bold'}
          sx={tickSx}
          testId={`${testId}__checkIcon`}
        />
      </Box>
    </Box>
  );
}

Checkbox.displayName = 'Checkbox';
