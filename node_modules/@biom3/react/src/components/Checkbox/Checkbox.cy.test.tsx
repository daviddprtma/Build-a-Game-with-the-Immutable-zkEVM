import { onLightBase, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { Box } from '../Box';
import { Checkbox } from './Checkbox';

function ControlledFixture() {
  const [checked, setChecked] = useState(false);
  return (
    <Checkbox
      testId="moo"
      checked={checked}
      onChange={ev => setChecked(ev.target.checked)}
    />
  );
}

describe('<Checkbox />', () => {
  it('should have correct displayName', () => {
    expect(Checkbox.displayName).to.eq('Checkbox');
  });
  it('should correctly forward the domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(<Checkbox domRef={domRefStub} testId="moo" />);
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly forward the inputRef', () => {
    const inputRef = cy.stub().as('inputRef');
    cyMountWithProviders(<Checkbox inputRef={inputRef} testId="moo" />);
    cySmartGet('@inputRef').should('have.been.calledWithMatch', {
      nodeName: 'INPUT',
      type: 'checkbox',
    });
  });

  it('should correctly render a proper checkbox input', () => {
    cyMountWithProviders(<Checkbox testId="moo" />);
    cyGetByTestId('moo__input').should('have.attr', 'type', 'checkbox');
  });

  it('should allow parent component to tap into onChange events', () => {
    const onChange = cy.stub().as('onChangeStub');
    cyMountWithProviders(<Checkbox testId="moo" onChange={onChange} />);
    cySmartGet('@onChangeStub').should('not.have.been.called');
    cySmartGet('moo__input').check();
    cySmartGet('@onChangeStub').should('have.been.calledOnce');
  });

  it('should render tick arrow svg, when the checkbox is checked', () => {
    cyMountWithProviders(<Checkbox testId="moo" />);
    cySmartGet('moo__checkIcon').should('have.css', 'opacity', '0');
    cySmartGet('moo__input').check();
    cySmartGet('moo__checkIcon').should('have.css', 'opacity', '1');
  });

  it('should allow parent component to customise styles via sx', () => {
    cyMountWithProviders(<Checkbox testId="moo" sx={{ background: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should allow parent component to use design tokens via sx', () => {
    cyMountWithProviders(
      <Checkbox testId="moo" sx={{ background: 'base.color.brand.4' }} />,
    );
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue({ base: onLightBase }, 'base.color.brand.4'),
    );
  });

  it('should not stretch when put into a flex container', () => {
    cyMountWithProviders(
      <Box sx={{ d: 'flex', height: '300px', alignItems: 'stretch' }}>
        <Checkbox testId="moo" />
      </Box>,
    );
    cySmartGet('moo').should('have.css', 'height', '20px');
  });

  it('should allow parent component to init checkbox already checked', () => {
    cyMountWithProviders(<Checkbox testId="moo" checked />);
    cySmartGet('moo__input').should('be.checked');
    cySmartGet('moo__checkIcon').should('exist');
  });

  it('should show interactivity by changing border-width on hover', () => {
    cyMountWithProviders(<Checkbox testId="moo" />);
    cySmartGet('moo__input').realHover();
    cySmartGet('moo__checkboxContainer').should(
      'have.css',
      'border-width',
      '2px',
    );
  });

  it('should show boxShadow by default', () => {
    cyMountWithProviders(<Checkbox testId="moo" />);
    cySmartGet('moo__checkboxContainer').should(
      'have.css',
      'box-shadow',
      'rgba(0, 0, 0, 0.16) 0px 1px 2px 0px, rgba(0, 0, 0, 0.32) 0px 1px 4px 1px',
    );
  });

  it('should not show boxShadow when input is disabled', () => {
    cyMountWithProviders(<Checkbox testId="moo" disabled />);
    cySmartGet('moo__checkboxContainer').should(
      'have.css',
      'box-shadow',
      'none',
    );
  });

  it('should not show hover FX, when disabled', () => {
    cyMountWithProviders(<Checkbox testId="moo" disabled />);
    cySmartGet('moo__input').realHover();
    cySmartGet('moo__checkboxContainer').should(
      'have.css',
      'border-width',
      '1px',
    );
  });

  it('should not show hover FX, when checked and disabled', () => {
    cyMountWithProviders(<Checkbox testId="moo" disabled checked />);
    cySmartGet('moo__input').realHover();
    cySmartGet('moo__checkboxContainer').should(
      'have.css',
      'border-width',
      '2px',
    );
  });

  it('should act like a controlled component, when neccissary', () => {
    const onChangeStub = cy.stub().as('onChangeStub');
    cyMountWithProviders(
      <Checkbox testId="moo" checked onChange={onChangeStub} />,
    );
    cySmartGet('moo__input').check();
    cySmartGet('@onChangeStub').should('not.have.been.called');
    cySmartGet('moo__input').should('be.checked');
  });

  context('Uncontrolled', () => {
    it('should correctly toggle between checked and unchecked states', () => {
      cyMountWithProviders(<Checkbox testId="moo" />);
      cySmartGet('moo__input').should('not.be.checked');
      cySmartGet('moo__input').click();
      cySmartGet('moo__input').should('be.checked');
    });

    it('should still let the parent tap into input state changes', () => {
      const onChangeStub = cy.stub().as('onChangeStub');
      cyMountWithProviders(<Checkbox testId="moo" onChange={onChangeStub} />);

      cySmartGet('moo__input').click();
      cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
        target: { checked: true },
      });
    });
  });

  context('Controlled', () => {
    it('should not change the checked state, when clicked - but not wired up correctly', () => {
      cyMountWithProviders(<Checkbox testId="moo" checked />);

      cySmartGet('moo__input').should('be.checked');
      cySmartGet('moo__input').click();
      cySmartGet('moo__input').should('be.checked');
    });

    it('should change the checked state, when clicked - but wired up correctly', () => {
      cyMountWithProviders(<ControlledFixture />);

      cySmartGet('moo__input').should('not.be.checked');
      cySmartGet('moo__input').click();
      cySmartGet('moo__input').should('be.checked');
    });
  });
});
