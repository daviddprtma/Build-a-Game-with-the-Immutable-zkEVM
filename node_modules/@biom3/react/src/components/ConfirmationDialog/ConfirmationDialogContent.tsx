import { Children, ReactElement, ReactNode } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useGetSubcomponentChildren,
  useSplitApartChildrenAndSubComponents,
} from '../../hooks';
import { setDefaultMinWidthSx } from '../../utils/styleHelpers';
import { vFlex } from '../../utils/sxChunks';
import { AspectRatioImage } from '../AspectRatioImage';
import { Box, BoxWithRCAndDomProps } from '../Box';
import { Button } from '../Clickable';
import { DuoCon } from '../DuoCon';
import { ModalContent } from '../Modal/ModalContent';
import { SmartClone } from '../SmartClone';
import { Stack } from '../Stack';
import { Body, Heading } from '../Text';
import { ConfirmationDialogContentRiveBox } from './ConfirmationDialogContentRiveBox';

export type ConfirmationDialogTextAlign = 'left' | 'center';
export type ConfirmationDialogContentProps<
  RC extends ReactElement | undefined,
> = BoxWithRCAndDomProps<RC> & {
  children?: ReactNode;
  textAlign?: ConfirmationDialogTextAlign;
  id?: string;
};

export function ConfirmationDialogContent<
  RC extends ReactElement | undefined = undefined,
>({
  children,
  sx = {},
  testId,
  textAlign = 'center',
  ...props
}: ConfirmationDialogContentProps<RC>) {
  const aspectRatioImage = useGetSubcomponentChild(children, AspectRatioImage);
  const riveBox = useGetSubcomponentChild(
    children,
    ConfirmationDialogContentRiveBox,
  );
  const duoCon = useGetSubcomponentChild(children, DuoCon);
  const buttons = useGetSubcomponentChildren(children, Button);
  const title = useGetSubcomponentChild(children, Heading);
  const captions = useGetSubcomponentChildren(children, Body);
  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    DuoCon,
    Button,
    Heading,
    Body,
    AspectRatioImage,
    ConfirmationDialogContentRiveBox,
  ]);

  console.log('@@@@@2', otherChildren);
  return (
    <ModalContent
      {...props}
      sx={merge(
        setDefaultMinWidthSx(sx, '320px'),
        {
          ...vFlex,
          justifyContent: 'center',
          bg: 'base.color.neutral.500',
          boxShadow: 'base.shadow.500',
          brad: 'base.borderRadius.x8',
          p: '0px',
        },
        sx,
      )}
      testId={testId}
    >
      {aspectRatioImage ? (
        <SmartClone testId={`${testId}__aspectRaioImage`}>
          {aspectRatioImage}
        </SmartClone>
      ) : riveBox ? (
        <SmartClone testId={riveBox.props.testId ?? `${testId}__riveBox`}>
          {riveBox}
        </SmartClone>
      ) : duoCon ? (
        <Stack
          alignItems="center"
          justifyContent={textAlign === 'center' ? 'center' : 'flex-start'}
          gap="0px"
          sx={{
            pt: 'base.spacing.x10',
            ml: textAlign === 'center' ? 'unset' : 'base.spacing.x6',
          }}
          testId={`${testId}__duoConContainer`}
        >
          <SmartClone
            sx={{ w: '72px' }}
            testId={`${testId}__duoConContainer__duoCon`}
          >
            {duoCon}
          </SmartClone>
        </Stack>
      ) : null}

      <Stack
        gap="0px"
        sx={{
          px: 'base.spacing.x6',
          pt: 'base.spacing.x8',
          pb: 'base.spacing.x10',
          textAlign,
        }}
      >
        {title && (
          <SmartClone
            size="small"
            sx={{ textAlign }}
            testId={`${testId}__title`}
          >
            {title}
          </SmartClone>
        )}

        {captions && (
          <Box
            sx={{
              ...vFlex,
              gap: 'base.spacing.x3',
              pt: 'base.spacing.x2',
              textAlign,
            }}
            testId={`${testId}__captions`}
          >
            {Children.map(captions, child => (
              <SmartClone
                size="small"
                sx={{ textAlign }}
                testId={`${testId}__captions__caption`}
              >
                {child}
              </SmartClone>
            ))}
          </Box>
        )}

        {buttons && (
          <Box
            testId={`${testId}__buttons`}
            sx={{
              ...vFlex,
              gap: 'base.spacing.x2',
              mt: 'base.spacing.x8',
            }}
          >
            {Children.map(buttons, child => (
              <SmartClone testId={`${testId}__buttons__button`}>
                {child}
              </SmartClone>
            ))}
          </Box>
        )}

        {otherChildren}
      </Stack>
    </ModalContent>
  );
}

ConfirmationDialogContent.displayName = 'ConfirmationDialog.Content';
ConfirmationDialogContent.RiveBox = ConfirmationDialogContentRiveBox;
ConfirmationDialogContent.AspectRatioImage = AspectRatioImage;
ConfirmationDialogContent.DuoCon = DuoCon;
ConfirmationDialogContent.Title = Heading;
ConfirmationDialogContent.Caption = Body;
ConfirmationDialogContent.Button = Button;
