import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { Fit, Layout, useRive } from '@rive-app/react-canvas';
import { useState } from 'react';

import { BiomeCombinedProviders } from '../../providers';
import { DUMMY_RASTER_IMAGE_URL, DUMMY_RIVE_ANIMATION_URL } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { AspectRatioImage } from '../AspectRatioImage';
import { Box } from '../Box';
import { ButtCon, Button } from '../Clickable';
import { DuoCon } from '../DuoCon';
import { Body, Heading } from '../Text';
import { ConfirmationDialog } from './ConfirmationDialog';

function ControlledConfirmationDialog({ onCloseStub }: any) {
  const [visible, setVisible] = useState(false);
  return (
    <ConfirmationDialog
      visible={visible}
      onCloseModal={onCloseStub}
      testId="moo"
    >
      <ConfirmationDialog.Target testId="button">
        <button type="button" onClick={() => setVisible(!visible)}>
          open
        </button>
      </ConfirmationDialog.Target>
      <ConfirmationDialog.Content testId="content">
        hello
      </ConfirmationDialog.Content>
    </ConfirmationDialog>
  );
}

function UncontrolledConfirmationDialog({ onCloseStub }: any) {
  return (
    <ConfirmationDialog onCloseModal={onCloseStub} testId="moo">
      <ConfirmationDialog.Target testId="button">
        <button type="button">open</button>
      </ConfirmationDialog.Target>
      <ConfirmationDialog.Content testId="content">
        <ConfirmationDialog.Content.Title>
          Title here...
        </ConfirmationDialog.Content.Title>
      </ConfirmationDialog.Content>
    </ConfirmationDialog>
  );
}

function CustomRive(props: any) {
  const { RiveComponent } = useRive({
    src: DUMMY_RIVE_ANIMATION_URL,
    autoplay: true,
    layout: new Layout({ fit: Fit.Cover }),
  });

  return <RiveComponent {...props} />;
}

describe('<ConfirmationDialog />', () => {
  it('should have correct displayName', () => {
    expect(ConfirmationDialog.displayName).to.eq('ConfirmationDialog');
  });
  it('should correctly reveal ConfirmationDialog.Content, when the button is clicked', () => {
    cyMountWithProviders(<UncontrolledConfirmationDialog />, {
      useAllProviders: true,
    });
    cySmartGet('button').should('exist');
    cySmartGet('content').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('content').should('exist');
  });

  it('should correctly forward the domRef of the target component', () => {
    const domRef = cy.stub().as('domRef');
    cyMountWithProviders(
      <ConfirmationDialog domRef={domRef}>
        <ConfirmationDialog.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </ConfirmationDialog.Target>
      </ConfirmationDialog>,
      { useAllProviders: true },
    );
    cySmartGet('@domRef').should('have.been.calledWithMatch', {
      nodeName: 'BUTTON',
    });
  });

  it('should close the ConfirmationDialog by default, when the user clicks outside', () => {
    cyMountWithProviders(<UncontrolledConfirmationDialog />, {
      useAllProviders: true,
    });

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('not.exist');
  });

  it('should not close the Modal, when the user clicks outside and outsideClicksClose is false', () => {
    cyMountWithProviders(
      <ConfirmationDialog outsideClicksClose={false} testId="moo">
        <ConfirmationDialog.Target>
          <button type="button" data-testid="button">
            open
          </button>
        </ConfirmationDialog.Target>
        <ConfirmationDialog.Content testId="content">
          <ConfirmationDialog.Content.Title>
            Mooo
          </ConfirmationDialog.Content.Title>
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      { useAllProviders: true },
    );

    cySmartGet('button').click();
    cySmartGet('content').should('exist');
    cySmartGet('moo__bgOverlay').click({ force: true });
    cySmartGet('content').should('exist');
  });

  it('should render a background overlay color, by default', () => {
    cyMountWithProviders(
      <ConfirmationDialog visible testId="moo">
        <ConfirmationDialog.Content testId="content">
          <ConfirmationDialog.Content.Title>
            Mooo
          </ConfirmationDialog.Content.Title>
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });

  it('should not render a background overlay color, when neccissary', () => {
    cyMountWithProviders(
      <ConfirmationDialog visible showBgOverlay={false} testId="moo">
        <ConfirmationDialog.Content testId="content">
          <ConfirmationDialog.Content.Title>
            Mooo
          </ConfirmationDialog.Content.Title>
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.standard.600'),
    );
  });

  it('should update visible ConfirmationDialog.Content, as the parent component re-renders', () => {
    function ConfirmationDialogWithCount() {
      const [count, setCount] = useState(0);
      return (
        <ConfirmationDialog visible>
          <ConfirmationDialog.Target testId="button">
            <button type="button" onClick={() => setCount(count + 1)}>
              increment
            </button>
          </ConfirmationDialog.Target>
          <ConfirmationDialog.Content testId="content">
            <ConfirmationDialog.Content.Title>
              count: {count}
            </ConfirmationDialog.Content.Title>
          </ConfirmationDialog.Content>
        </ConfirmationDialog>
      );
    }
    cyMountWithProviders(<ConfirmationDialogWithCount />, {
      useAllProviders: true,
    });
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click({ force: true });
    cySmartGet('content').should('have.text', 'count: 1');
  });

  it('should allow customisation of the bgOverlay via sx', () => {
    cyMountWithProviders(
      <ConfirmationDialog
        visible
        testId="moo"
        bgOverlaySx={{ background: 'gold' }}
      >
        <ConfirmationDialog.Content testId="content">
          <ConfirmationDialog.Content.Title>
            Mooo
          </ConfirmationDialog.Content.Title>
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      { useAllProviders: true },
    );
    cySmartGet('moo__bgOverlay').should('have.backgroundColor', 'gold');
  });

  it('should allow the use of an external container, when neccissary', () => {
    cyMountWithProviders(
      <BiomeCombinedProviders modalContainerId="moo">
        <Box
          id="moo"
          sx={{
            position: 'absolute',
            width: '100%',
            height: 'calc(100% - 50px)',
            top: '50px',
            left: '0',
            bg: 'red',
          }}
        />
        <UncontrolledConfirmationDialog />
      </BiomeCombinedProviders>,
    );
    cySmartGet('button').click();
    cySmartGet('#moo div[data-testid="content"]').should('exist');
    cySmartGet('content').should('exist');
  });

  it('should render centered by default, and left align when neccissary', () => {
    cyMountWithProviders(
      <ConfirmationDialog visible>
        <ConfirmationDialog.Content testId="moo">
          <Heading testId="title">Title renders</Heading>
          <Body testId="caption">caption renders</Body>
          <Button testId="button">button renders</Button>
          <DuoCon icon="Apple" />
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('title').should('have.css', 'text-align', 'center');
    cySmartGet('caption').should('have.css', 'text-align', 'center');
    cySmartGet('moo__duoConContainer').should(
      'have.css',
      'justify-content',
      'center',
    );

    cyMountWithProviders(
      <ConfirmationDialog visible>
        <ConfirmationDialog.Content testId="moo" textAlign="left">
          <Heading testId="title">Title renders</Heading>
          <Body testId="caption">caption renders</Body>
          <Button testId="button">button renders</Button>
          <DuoCon icon="Apple" />
        </ConfirmationDialog.Content>
      </ConfirmationDialog>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('title').should('have.css', 'text-align', 'left');
    cySmartGet('caption').should('have.css', 'text-align', 'left');
    cySmartGet('moo__duoConContainer').should(
      'have.css',
      'justify-content',
      'flex-start',
    );
  });

  context('Controlled API', () => {
    it('should not toggle visibility of the Modal.Content, if the control is not properly wired up', () => {
      cyMountWithProviders(
        <ConfirmationDialog visible testId="moo">
          <ConfirmationDialog.Content testId="content">
            hello
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('exist');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('content').should('exist');

      cyMountWithProviders(
        <ConfirmationDialog visible={false}>
          <ConfirmationDialog.Target>
            <button type="button" data-testid="button">
              open
            </button>
          </ConfirmationDialog.Target>
          <ConfirmationDialog.Content testId="content">
            hello
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('not.exist');
    });
    it('should call onCloseModal prop function, when something is trying to close the Modal', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(
        <ControlledConfirmationDialog onCloseStub={onCloseStub} />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('Uncontrolled API', () => {
    it('should open a ConfirmationDialog, when the user clicks the target', () => {
      cyMountWithProviders(<UncontrolledConfirmationDialog />, {
        useAllProviders: true,
      });
      cySmartGet('content').should('not.exist');
      cySmartGet('button').click();
      cySmartGet('content').should('exist');
    });
    it('should still fire onCloseModal prop function when a Modal is closed', () => {
      const onCloseStub = cy.stub().as('onCloseStub');
      cyMountWithProviders(
        <UncontrolledConfirmationDialog onCloseStub={onCloseStub} />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('button').click();
      cySmartGet('@onCloseStub').should('not.have.been.called');
      cySmartGet('moo__bgOverlay').click({ force: true });
      cySmartGet('@onCloseStub').should('have.been.called');
    });
  });

  context('supported children & sub-components', () => {
    it('should allow the rendering of anything aswell as supported children & sub-components', () => {
      cyMountWithProviders(
        <ConfirmationDialog visible testId="moo">
          <ConfirmationDialog.Content>
            <ConfirmationDialog.Content.Title testId="title">
              Title renders
            </ConfirmationDialog.Content.Title>
            <ConfirmationDialog.Content.Caption testId="caption">
              caption renders
            </ConfirmationDialog.Content.Caption>
            <ConfirmationDialog.Content.Button testId="button">
              button renders
            </ConfirmationDialog.Content.Button>
            <ConfirmationDialog.Content.AspectRatioImage
              testId="aspectRatioImage"
              imageUrl={DUMMY_RASTER_IMAGE_URL}
            />
            <div data-testid="div">will render</div>
            <ButtCon icon="Apple" testId="buttcon" />
            also will render
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );
      cySmartGet('title').should('exist');
      cySmartGet('caption').should('exist');
      cySmartGet('button').should('exist');
      cySmartGet('aspectRatioImage').should('exist');
      cySmartGet('div').should('exist');
      cy.contains('also will render').should('exist');
      cySmartGet('buttcon').should('exist');

      cyMountWithProviders(
        <ConfirmationDialog visible testId="moo">
          <ConfirmationDialog.Content>
            <Heading testId="title">Title renders</Heading>
            <Body testId="caption">caption renders</Body>
            <Button testId="button">button renders</Button>
            <AspectRatioImage
              testId="aspectRatioImage"
              imageUrl={DUMMY_RASTER_IMAGE_URL}
            />
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );
      cySmartGet('title').should('exist');
      cySmartGet('caption').should('exist');
      cySmartGet('button').should('exist');
      cySmartGet('aspectRatioImage').should('exist');
    });

    it('should support rendering a rive animation', () => {
      cyMountWithProviders(
        <ConfirmationDialog visible>
          <ConfirmationDialog.Content>
            <ConfirmationDialog.Content.Title>
              Title
            </ConfirmationDialog.Content.Title>
            <ConfirmationDialog.Content.Caption>
              Caption
            </ConfirmationDialog.Content.Caption>
            <ConfirmationDialog.Content.RiveBox
              rc={<CustomRive />}
              testId="riveBox"
            />
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );

      cySmartGet('riveBox').should('exist');
    });

    it('should correctly apply sx style props to all supported children & sub-components', () => {
      cyMountWithProviders(
        <ConfirmationDialog visible>
          <ConfirmationDialog.Content sx={{ bg: 'gold' }}>
            <Heading testId="title" sx={{ bg: 'gold' }}>
              Title renders
            </Heading>
            <Body testId="caption" sx={{ bg: 'gold' }}>
              caption renders
            </Body>
            <Button testId="button" sx={{ bg: 'gold' }}>
              button renders
            </Button>
            <AspectRatioImage
              testId="aspectRatioImage"
              imageUrl={DUMMY_RASTER_IMAGE_URL}
              sx={{ bg: 'gold' }}
            />
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );

      cySmartGet('title').should('have.backgroundColor', 'gold');
      cySmartGet('caption').should('have.backgroundColor', 'gold');
      cySmartGet('button').should('have.backgroundColor', 'gold');
      cySmartGet('aspectRatioImage').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <ConfirmationDialog visible>
          <ConfirmationDialog.Content sx={{ bg: 'gold' }}>
            <ConfirmationDialog.Content.RiveBox
              testId="riveBox"
              rc={<CustomRive />}
              sx={{ bg: 'gold' }}
            />
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );

      cySmartGet('riveBox').should('have.backgroundColor', 'gold');
    });

    it('should correctly fwd domRef from all supported children & sub-components', () => {
      const contentRef = cy.stub().as('contentRef');
      const titleRef = cy.stub().as('titleRef');
      const captionRef = cy.stub().as('captionRef');
      const buttonRef = cy.stub().as('buttonRef');
      const aspectRatioImageRef = cy.stub().as('aspectRatioImageRef');
      cyMountWithProviders(
        <ConfirmationDialog visible testId="moo">
          <ConfirmationDialog.Content domRef={contentRef}>
            <Heading testId="title" domRef={titleRef}>
              Title renders
            </Heading>
            <Body testId="caption" domRef={captionRef}>
              caption renders
            </Body>
            <Button testId="button" domRef={buttonRef}>
              button renders
            </Button>
            <AspectRatioImage
              testId="aspectRatioImage"
              imageUrl={DUMMY_RASTER_IMAGE_URL}
              domRef={aspectRatioImageRef}
            />
          </ConfirmationDialog.Content>
        </ConfirmationDialog>,
        { useAllProviders: true },
      );

      cySmartGet('@contentRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
      cySmartGet('@titleRef').should('have.been.calledWithMatch', {
        nodeName: 'H1',
      });
      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });
      cySmartGet('@buttonRef').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });
      cySmartGet('@aspectRatioImageRef').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
    });
  });
});
