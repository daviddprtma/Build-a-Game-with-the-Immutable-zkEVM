import { designTokens } from '@biom3/design-tokens';
import { useState } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { NumberStepper } from './NumberStepper';

function TestFixture({ testId = 'moo', ...props }: any) {
  return <NumberStepper testId={testId} {...props} />;
}

function NumberStepperWithInternalState() {
  const [currentValue, setCurrentValue] = useState('0');
  return <TestFixture value={currentValue} onChange={setCurrentValue} />;
}

describe('<NumberStepper />', () => {
  it('should have correct displayName', () => {
    expect(NumberStepper.displayName).to.eq('NumberStepper');
  });

  it('should render a plain text input by default', () => {
    cyMountWithProviders(<TestFixture />);
    cySmartGet('moo').find('input').should('exist');
  });

  it('should render as a plain div, but as anything else when neccissary', () => {
    cyMountWithProviders(<TestFixture />);
    cySmartGet('moo').its('0.nodeName').should('equal', 'DIV');
    cyMountWithProviders(<TestFixture rc={<section />} />);
    cySmartGet('moo').its('0.nodeName').should('equal', 'SECTION');
  });

  it('should correctly forward domRef to rootNode', () => {
    const domRef = cy.stub().as('domRefStub');
    cyMountWithProviders(<TestFixture domRef={domRef} />, {
      useAllProviders: true,
    });
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(<TestFixture aria-atomic="true" data-moo="cow" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should correctly render custom sx styles', () => {
    cyMountWithProviders(<TestFixture sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should correctly render custom className', () => {
    cyMountWithProviders(<TestFixture className="moo" />);
    cySmartGet('moo').should('have.class', 'moo');
  });

  context('Min and Max support', () => {
    it('should display a tooltip when the user tries to increment past the max value', () => {
      cyMountWithProviders(<TestFixture max="1" defaultValue="0" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 100, 30);
      cySmartGet('moo__tooltipContent').should('exist');
    });

    it('should display a tooltip when the user tries to decrement past the min value', () => {
      cyMountWithProviders(<TestFixture min="-1" defaultValue="0" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__decrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 30, 30);
      cySmartGet('moo__tooltipContent').should('exist');
    });

    it('should remove tooltip, when user changes number so that its not the min anymore', () => {
      cyMountWithProviders(<TestFixture min="-1" defaultValue="0" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__decrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 30, 30);
      cySmartGet('moo__tooltipContent').should('exist');
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 30, 30);
      cySmartGet('moo__tooltipContent').should('not.exist');
    });

    it('should remove tooltip, when user changes number so that its not the max anymore', () => {
      cyMountWithProviders(<TestFixture max="1" defaultValue="0" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 100, 30);
      cySmartGet('moo__tooltipContent').should('exist');
      cySmartGet('moo__decrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 100, 30);
      cySmartGet('moo__tooltipContent').should('not.exist');
    });

    it('should render standard max error text by default', () => {
      cyMountWithProviders(<TestFixture max="1" defaultValue="1" />, {
        useAllProviders: true,
      });
      cySmartGet('html > body').trigger('mousemove', 100, 30);
      cySmartGet('moo__tooltipContent').should(
        'include.text',
        'Maximum value reached',
      );
    });

    it('should render standard min error text by default', () => {
      cyMountWithProviders(<TestFixture min="-1" defaultValue="-1" />, {
        useAllProviders: true,
      });
      cySmartGet('html > body').trigger('mousemove', 30, 30);
      cySmartGet('moo__tooltipContent').should(
        'include.text',
        'Minimum value reached',
      );
    });

    it('should allow customisation of the min error tooltip text', () => {
      cyMountWithProviders(
        <TestFixture min="-1" defaultValue="-1" minErrorText="oh snap!" />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('moo__decrementBtn').click();
      cySmartGet('html > body').trigger('mousemove', 30, 30);
      cySmartGet('moo__tooltipContent').should('include.text', 'oh snap!');
    });

    it('should allow customisation of the max error tooltip text', () => {
      cyMountWithProviders(
        <TestFixture max="1" defaultValue="1" maxErrorText="oh snap!" />,
        {
          useAllProviders: true,
        },
      );
      cySmartGet('html > body').trigger('mousemove', 100, 30);
      cySmartGet('moo__tooltipContent').should('include.text', 'oh snap!');
    });
  });

  context('Size support', () => {
    it('should render at "medium" size by default', () => {
      cyMountWithProviders(<TestFixture />);
      cySmartGet('moo').should('have.css', 'height', '48px');
    });

    it('should render at "large" size, when neccissary', () => {
      cyMountWithProviders(<TestFixture size="large" />);
      cySmartGet('moo').should('have.css', 'height', '64px');
    });

    it('should allow responsive sizing', () => {
      cy.viewport(200, 200);
      cyMountWithProviders(<TestFixture size={['medium', null, 'large']} />);
      cySmartGet('moo').should('have.css', 'height', '48px');

      cy.viewport(designTokens.base.breakpoint.medium, 200);
      cySmartGet('moo').should('have.css', 'height', '64px');
    });
  });

  context('Uncontrolled API', () => {
    it('should allow the input to be initialised with a value, but still be un-controlled', () => {
      cyMountWithProviders(<TestFixture defaultValue="100" />);
      cySmartGet('moo__value').should('have.text', '100');
    });

    it(`should allow the parent component to track when an input's value changes`, () => {
      const onChange = cy.stub().as('onChangeStub');
      cyMountWithProviders(<TestFixture onChange={onChange} />);
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('@onChangeStub').should('have.been.calledWith', '2');
    });
  });

  context('Controlled API', () => {
    it('should not update the input text, when the user interacts, but the input is controlled and not wired up correctly', () => {
      cyMountWithProviders(<TestFixture value="2" />);
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('moo__value').should('have.text', '2');
    });

    it('should correctly update, when the parent component updates the value prop', () => {
      cyMountWithProviders(<NumberStepperWithInternalState />);
      cySmartGet('moo__value').should('have.text', '0');
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('moo__incrementBtn').click();
      cySmartGet('moo__value').should('have.text', '2');
    });
  });
});
