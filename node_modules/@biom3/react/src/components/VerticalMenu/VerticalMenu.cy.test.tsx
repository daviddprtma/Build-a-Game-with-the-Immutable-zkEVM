import { base } from '@biom3/design-tokens';
import { Ref } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Divider } from '../Divider';
import { MenuItem } from '../MenuItem';
import { VerticalMenu } from './VerticalMenu';

describe('<VerticalMenu />', () => {
  it('should render as a div by default, and other tags as neccisary', () => {
    cyMountWithProviders(
      <VerticalMenu testId="moo">
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(
      <VerticalMenu testId="moo" rc={<section />}>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });
  it('should not render any children except for sub-components', () => {
    cyMountWithProviders(
      <VerticalMenu testId="moo">
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <div>Not a sub-component</div>
        <>also not a sub-component</>
      </VerticalMenu>,
    );
    cySmartGet('moo').children().should('have.length', 1);
  });

  it('should pass on size prop onto all children', () => {
    cyMountWithProviders(
      <VerticalMenu testId="moo" size="small">
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '72px');
    cyMountWithProviders(
      <VerticalMenu testId="moo" size="medium">
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '96px');
  });

  it('should allow individual children to override size prop', () => {
    cyMountWithProviders(
      <VerticalMenu testId="moo" size="small">
        <MenuItem size="medium">
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '96px');
  });

  it('should allow responsively sized button children', () => {
    cy.viewport(300, 100);
    cyMountWithProviders(
      <VerticalMenu testId="moo" size={['small', 'medium']}>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').children().should('have.css', 'height', '72px');
    cy.viewport(base.breakpoint.small, 100);
    cySmartGet('moo').children().should('have.css', 'height', '96px');
  });

  it('should pass through html dom attr props, where neccissary', () => {
    cyMountWithProviders(
      <VerticalMenu testId="moo" id="moo" aria-details="moo">
        <MenuItem testId="moo__button" id="moo" aria-details="moo">
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );
    cySmartGet('moo').should('have.attr', 'id', 'moo');
    cySmartGet('moo__button').should('have.attr', 'id', 'moo');
    cySmartGet('moo').should('have.attr', 'aria-details', 'moo');
    cySmartGet('moo__button').should('have.attr', 'aria-details', 'moo');
  });

  it('should correctly forward domRef property', () => {
    const ref = cy.stub().as('refStub') as unknown as Ref<HTMLDivElement>;

    cyMountWithProviders(
      <VerticalMenu testId="moo" domRef={ref}>
        <MenuItem>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
      </VerticalMenu>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly render only sub-component children', () => {
    cyMountWithProviders(
      <VerticalMenu>
        <MenuItem testId="menuItem">
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <div data-testid="div">moo cow</div>
        <>moo cow</>
        <Divider testId="divider" />
      </VerticalMenu>,
    );

    cySmartGet('menuItem').should('exist');
    cySmartGet('divider').should('exist');
    cySmartGet('div').should('not.exist');
    cy.contains('moo cow').should('not.exist');
  });

  it('all subcomponents should support sx', () => {
    cyMountWithProviders(
      <VerticalMenu>
        <MenuItem testId="menuItem" sx={{ bg: 'gold' }}>
          <MenuItem.Label>some label text</MenuItem.Label>
        </MenuItem>
        <Divider testId="divider" sx={{ bg: 'gold' }} />
      </VerticalMenu>,
    );

    cySmartGet('menuItem').should('have.backgroundColor', 'gold');
    cySmartGet('divider').should('have.backgroundColor', 'gold');
    cySmartGet('divider').should('have.css', 'margin-top', '4px');
  });
});
