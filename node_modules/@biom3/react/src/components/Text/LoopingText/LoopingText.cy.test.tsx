import { designTokens } from '@biom3/design-tokens';

import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { Caption } from '../Caption';
import { Heading } from '../Heading';
import { LoopingText } from './LoopingText';

describe('<LoopingText />', () => {
  beforeEach(() => {
    cy.viewport(100, 100);
  });

  it('should have correct displayName', () => {
    expect(LoopingText.displayName).to.eq('LoopingText');
  });

  it('should endlessly loop through snippets of text', () => {
    cyMountWithProviders(
      <LoopingText testId="fixture" text={['moo', 'cow']} textDuration={430} />,
    );
    cySmartGet('fixture__text--moo__animatingSpan').should('have.text', 'moo');
    cySmartGet('fixture__text--cow__animatingSpan').should('have.text', 'cow');
    cySmartGet('fixture__text--moo__animatingSpan').should('have.text', 'moo');
    cySmartGet('fixture__text--cow__animatingSpan').should('have.text', 'cow');
    cySmartGet('fixture__text--moo__animatingSpan').should('have.text', 'moo');
    cySmartGet('fixture__text--cow__animatingSpan').should('have.text', 'cow');
  });

  it('should warn the user if the textDuration is too short', () => {
    cy.window().then(win => {
      cy.spy(win.console, 'warn').as('consoleWarn');
    });
    cy.get('@consoleWarn').should('not.have.been.called');
    cyMountWithProviders(
      <LoopingText testId="fixture" text={['moo', 'cow']} textDuration={200} />,
    );
    cy.get('@consoleWarn').should(
      'be.calledWithMatch',
      /LoopingText has recieved 200ms as a duration\./,
    );
  });

  it('should allow responsive text sizing', () => {
    cy.viewport(100, 100);
    cyMountWithProviders(
      <LoopingText
        testId="moo"
        text={['moo', 'cow']}
        size={['xxSmall', 'xSmall', 'small', 'medium']}
      />,
    );

    cySmartGet('moo__text--moo').should('have.css', 'font-size', '10px');

    cy.viewport(designTokens.base.breakpoint.small, 100);
    cySmartGet('moo__text--moo').should('have.css', 'font-size', '12px');

    cy.viewport(designTokens.base.breakpoint.medium, 100);
    cySmartGet('moo__text--moo').should('have.css', 'font-size', '14px');

    cy.viewport(designTokens.base.breakpoint.large, 100);
    cySmartGet('moo__text--moo').should('have.css', 'font-size', '16px');
  });

  it('should use Body by default, but support the use of different text components', () => {
    cyMountWithProviders(<LoopingText testId="moo" text={['moo', 'cow']} />);

    cySmartGet('moo__text--moo')
      .should('have.css', 'font-family', 'Roboto, sans-serif')
      .and('not.have.css', 'text-transform', 'uppercase');

    cyMountWithProviders(
      <LoopingText testId="moo" text={['moo', 'cow']} use={<Heading />} />,
    );
    cySmartGet('moo__text--moo').should(
      'have.css',
      'font-family',
      'Suisse-Intl, sans-serif',
    );

    cyMountWithProviders(
      <LoopingText testId="moo" text={['moo', 'cow']} use={<Caption />} />,
    );
    cySmartGet('moo__text--moo')
      .should('have.css', 'font-family', 'Roboto, sans-serif')
      .and('css', 'text-transform', 'uppercase');
  });

  it('should accept custom sx', () => {
    cyMountWithProviders(
      <LoopingText
        testId="fixture"
        text={['moo', 'cow']}
        sx={{ bgc: 'red' }}
      />,
    );
    cySmartGet('fixture').should('have.backgroundColor', 'rgb(255, 0, 0)');
  });

  it('should correctly fwd domRef', () => {
    const refStub = cy.stub().as('refStub');
    cyMountWithProviders(
      <LoopingText testId="fixture" text={['moo', 'cow']} domRef={refStub} />,
    );
    cySmartGet('@refStub').should('be.calledWithMatch', {
      nodeName: 'DIV',
    });
  });
});
