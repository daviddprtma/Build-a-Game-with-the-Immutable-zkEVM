import { ReactElement, useEffect, useMemo, useState } from 'react';

import { useTheme } from '../../../hooks';
import { GetMultiTextProps } from '../../../types/text';
import { warnUser } from '../../../utils';
import { BoxWithRCAndDomProps } from '../../Box';
import { RollingText } from '../RollingText';

export type TextMessages = Array<string>;

export type LoopingTextBaseProps = {
  text: TextMessages;
  textDuration?: number;
};

export type LoopingTextProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
> = GetMultiTextProps<RC, Use, LoopingTextBaseProps> & BoxWithRCAndDomProps<RC>;

const DEFAULT_TEXT_DURATION = 3 * 1000;

export function LoopingText<
  RC extends ReactElement | undefined = undefined,
  Use extends ReactElement | undefined = undefined,
>({
  text,
  textDuration = DEFAULT_TEXT_DURATION,
  className,
  testId = 'LoopingText',
  rc,
  ...props
}: LoopingTextProps<RC, Use>) {
  const [index, setIndex] = useState(0);
  const { base } = useTheme();

  const safeDuration = useMemo(() => {
    if (textDuration <= base.motion.normal.gentle.jsDuration * 1030) {
      const currentMotionDuration = `${
        base.motion.normal.gentle.jsDuration * 1030
      }ms`;
      warnUser(
        `LoopingText has recieved ${textDuration}ms as a duration. This is invalid, as the text animation takes longer than this (${currentMotionDuration}). 
  TextDuration must be longer than ${currentMotionDuration}.
  A default duration (${DEFAULT_TEXT_DURATION}ms) has been applied instead.`,
      );
      return DEFAULT_TEXT_DURATION;
    }

    return textDuration;
  }, [base.motion.normal.gentle.jsDuration, textDuration]);
  useEffect(() => {}, [textDuration]);

  useEffect(() => {
    setTimeout(() => {
      let next = index + 1;
      if (next === text.length) {
        next = 0;
      }
      setIndex(next);
    }, safeDuration);
  }, [index, setIndex, text, safeDuration]);

  return (
    <RollingText
      {...props}
      rc={rc}
      testId={testId}
      text={text[index]}
      className={`${className ?? ''} LoopingText`}
    />
  );
}

LoopingText.displayName = 'LoopingText';
