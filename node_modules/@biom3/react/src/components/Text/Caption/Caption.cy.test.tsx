import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { BiomeTheme } from '../../../types/theme';
import {
  cyGetByTestId,
  cyMountWithProviders,
} from '../../../utils/testHelpers';
import { Box } from '../../Box';
import { Caption } from './Caption';

describe('<Caption />', () => {
  context('Default styles', () => {
    it('should render Caption text with default styling', () => {
      cyMountWithProviders(<Caption testId="moo">some caption text</Caption>);
      cyGetByTestId('moo').should(
        'have.css',
        'letter-spacing',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.letterSpacing',
        ),
      );
      cyGetByTestId('moo').should(
        'have.css',
        'text-transform',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.casing',
        ),
      );
    });
  });

  context('Coloring', () => {
    it('should allow Caption to render text with default coloring', () => {
      cyMountWithProviders(<Caption testId="moo">some caption text</Caption>);
      cyGetByTestId('moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });

    it('should allow Caption to render text with custom css coloring', () => {
      cyMountWithProviders(
        <Caption testId="moo" sx={{ c: 'dodgerblue' }}>
          some caption text
        </Caption>,
      );
      cyGetByTestId('moo').should('have.color', 'dodgerblue');
    });
  });

  context('Sizes', () => {
    it('should allow different sizes of Caption to render with different font-sizes', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Caption testId="moo" size="medium">
            some caption text
          </Caption>
          <Caption testId="moo2" size="small">
            some caption text
          </Caption>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.fontSize',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.small.regular.fontSize',
        ),
      );
    });

    it('should allow different sizes of Caption to render with different line-heights', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Caption testId="moo" size="medium">
            some caption text
          </Caption>
          <Caption testId="moo2" size="small">
            some caption text
          </Caption>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.small.regular.lineHeight',
        ),
      );
    });

    it('should allow different sizes of Caption to render with different letter-spacing', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Caption testId="moo" size="medium">
            some caption text
          </Caption>
          <Caption testId="moo2" size="small">
            some caption text
          </Caption>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'letter-spacing',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.letterSpacing',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'letter-spacing',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.small.regular.letterSpacing',
        ),
      );
    });

    it('should render text with default fontWeight', () => {
      cyMountWithProviders(<Caption testId="moo">some caption text</Caption>);
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.fontWeight',
        )?.toString(),
      );
    });

    it('should render text with bold fontWeight, when required', () => {
      cyMountWithProviders(
        <Caption testId="moo" weight="bold">
          some caption text
        </Caption>,
      );
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.bold.fontWeight',
        )?.toString(),
      );
    });

    it('should allow responsive size selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Caption testId="moo" size={['medium', null, null, 'small']}>
          some caption text
        </Caption>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.large, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.small.regular.fontSize',
        ),
      );
    });

    it('should allow responsive weight selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Caption testId="moo" weight={['regular', null, null, null, 'bold']}>
          some caption text
        </Caption>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.regular.fontWeight',
        )?.toString(),
      );

      cy.viewport(base.breakpoint.xLarge, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.caption.medium.bold.fontWeight',
        )?.toString(),
      );
    });
  });

  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <Caption
        testId="moo"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      >
        dsads
      </Caption>,
    );

    cyGetByTestId('moo').should('have.css', 'padding', '8px 16px');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <Caption testId="moo" rc={<span ref={ref} />}>
        dsads
      </Caption>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'SPAN',
      innerHTML: 'dsads',
    });
  });

  it('should render <Caption /> as a <em> tag', () => {
    cyMountWithProviders(
      <Caption testId="moo" rc={<em />}>
        dsads
      </Caption>,
    );

    cyGetByTestId('moo').its('0.nodeName').should('eq', 'EM');
  });

  it('should render <Caption /> as itatlic, where neccissary', () => {
    cyMountWithProviders(
      <Caption testId="moo" sx={{ fontStyle: 'italic' }}>
        dsads
      </Caption>,
    );

    cyGetByTestId('moo').should('have.css', 'font-style', 'italic');
  });

  it('should NOT render <Caption /> as itatlic, by default', () => {
    cyMountWithProviders(<Caption testId="moo">dsads</Caption>);

    cyGetByTestId('moo').should('have.css', 'font-style', 'normal');
  });
});
