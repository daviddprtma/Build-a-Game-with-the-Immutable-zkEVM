import { BodySize, BodyWeight } from '@biom3/design-tokens';
import { ReactElement, Ref, useMemo } from 'react';
import merge from 'ts-deepmerge';

import { StandardComponentWithProps } from '../../../types/shared';
import { GetMultiTextProps } from '../../../types/text';
import { cloneElementWithCssProp } from '../../../utils';
import { prettyFormatNumber } from '../../../utils/numberHelpers';
import { Box } from '../../Box';
import { CloudImage, CloudImageProps } from '../../CloudImage';
import { Body } from '../Body';

type PriceDisplayBaseProps = Pick<CloudImageProps, 'imageResizeServiceUrl'> &
  StandardComponentWithProps<
    HTMLSpanElement,
    {
      price: string;
      fiatAmount?: string;
      currencyImageUrl?: string | null;
      use?: ReactElement;
    }
  >;

export type PriceDisplayProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
> = GetMultiTextProps<RC, Use, PriceDisplayBaseProps>;

const baseOuterContainerStyles = {
  display: 'inline-flex',
  flexDirection: 'column',
  alignItems: 'flex-end',
  textAlign: 'right',
  wordBreak: 'break-word',
  position: 'relative',
  c: 'base.color.text.primary',
};

export function PriceDisplay<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined = undefined,
>({
  price,
  fiatAmount,
  domRef,
  currencyImageUrl,
  imageResizeServiceUrl,
  sx = {},
  testId = 'PriceDisplay',
  rc = <span />,
  ...props
}: PriceDisplayProps<RC, Use>) {
  const { use, ...boxDomAttrProps } =
    'use' in props ? props : { ...props, use: undefined };
  const { size } = 'size' in props ? props : { size: undefined };
  const { weight } = 'weight' in props ? props : { weight: undefined };

  const prettyPrice = prettyFormatNumber(price);
  const prettyFiatAmount = fiatAmount ? prettyFormatNumber(fiatAmount) : null;

  const priceContent = useMemo(
    () =>
      cloneElementWithCssProp(
        use || <Body size={size as BodySize} weight={weight as BodyWeight} />,
        {
          testId: `${testId}__price`,
          ...(size ? { size } : {}),
          sx: {
            d: 'flex',
            alignItems: 'baseline',
            gap: '0.3em',
          },
          children: (
            <>
              {prettyPrice}
              {currencyImageUrl && (
                <CloudImage
                  testId={`${testId}__price__currencyImage`}
                  imageUrl={currencyImageUrl}
                  imageResizeServiceUrl={imageResizeServiceUrl}
                  sx={{ width: '0.76em' }}
                />
              )}
            </>
          ),
        },
      ),
    [
      currencyImageUrl,
      imageResizeServiceUrl,
      prettyPrice,
      size,
      testId,
      use,
      weight,
    ],
  );

  return (
    <Box
      {...boxDomAttrProps}
      rc={rc}
      testId={testId}
      // @TODO: this should be a Span element, not HTMLDivElement
      domRef={domRef as Ref<HTMLDivElement>}
      sx={merge({}, baseOuterContainerStyles, sx)}
    >
      {priceContent}
      {prettyFiatAmount && (
        <Body
          sx={{ color: 'base.color.text.secondary', textAlign: 'left' }}
          size="xSmall"
          weight="regular"
          testId={`${testId}__fiatAmount`}
          className="fiatPrice"
        >
          {prettyFiatAmount}
        </Body>
      )}
    </Box>
  );
}

PriceDisplay.displayName = 'PriceDisplay';
