import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { BiomeTheme } from '../../../types/theme';
import { ETH_TOKEN_IMAGE_URL, IMX_TOKEN_IMAGE_URL } from '../../../utils';
import { base64UrlEncode } from '../../../utils/encodeHelpers';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { Caption } from '../Caption';
import { Heading } from '../Heading';
import { PriceDisplay } from './PriceDisplay';

const DUMMY_RASTER_IMAGE_URL =
  'https://design-system.immutable.com/hosted-for-ds/images/immutable-logo-horizontal-onlight.png';
const DUMMY_VECTOR_IMAGE_URL =
  'https://design-system.immutable.com/hosted-for-ds/currency-icons/currency--eth.svg';

describe('<PriceDisplay />', () => {
  it('should not break down when the price string is already partly human readable', () => {
    cyMountWithProviders(
      <PriceDisplay
        testId="moo"
        price="453,455,678"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.text', '453,455,678');
  });

  it('should make the number more human readable', () => {
    cyMountWithProviders(
      <PriceDisplay
        testId="moo"
        price="453455678"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.text', '453,455,678');
  });
  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <PriceDisplay
        testId="moo"
        price="453455678"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      />,
      { useAllProviders: true },
    );

    cySmartGet('moo').should('have.css', 'padding', '8px 16px');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <PriceDisplay testId="moo" price="453455678" domRef={ref as any} />,
      { useAllProviders: true },
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'SPAN',
      innerHTML: Cypress.sinon.match(/453,455,678/),
    });
  });

  it('should render as a <em> tag, where neccissary', () => {
    cyMountWithProviders(
      <PriceDisplay testId="moo" price="453455678" rc={<em />} />,
      { useAllProviders: true },
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'EM');
  });

  it('should not render out a currency image, when none is supplied', () => {
    cyMountWithProviders(<PriceDisplay testId="moo" price="453455678" />, {
      useAllProviders: true,
    });
    cySmartGet('moo__price__currencyImage').should('not.exist');
  });

  context('responsive sizing', () => {
    it('should correctly render responsive body text', () => {
      cy.viewport(300, 300);
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          price="453455678"
          size={['small', 'medium', 'large']}
          currencyImageUrl={ETH_TOKEN_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').should('have.css', 'font-size', '14px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /10\.6/);
      cy.viewport(designTokens.base.breakpoint.small, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '16px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /12.1/);
      cy.viewport(designTokens.base.breakpoint.medium, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '20px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /15\.1/);
    });

    it('should correctly render responsive heading text', () => {
      cy.viewport(300, 300);
      cyMountWithProviders(
        <PriceDisplay
          use={
            <Heading size={['xSmall', 'small', 'medium', 'large', 'xLarge']} />
          }
          testId="moo"
          price="453455678"
          currencyImageUrl={ETH_TOKEN_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').should('have.css', 'font-size', '16px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /12\./);
      cy.viewport(designTokens.base.breakpoint.small, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '20px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /15\./);
      cy.viewport(designTokens.base.breakpoint.medium, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '28px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /21\./);
      cy.viewport(designTokens.base.breakpoint.large, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '40px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /30\./);
      cy.viewport(designTokens.base.breakpoint.xLarge, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '64px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /48\./);
    });

    it('should correctly render responsive caption text', () => {
      cy.viewport(300, 300);
      cyMountWithProviders(
        <PriceDisplay
          use={<Caption size={['small', 'medium']} />}
          testId="moo"
          price="453455678"
          currencyImageUrl={IMX_TOKEN_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').should('have.css', 'font-size', '10px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /7\./);
      cy.viewport(designTokens.base.breakpoint.small, 300);
      cySmartGet('moo__price').should('have.css', 'font-size', '14px');
      cySmartGet('moo__price__currencyImage')
        .should('have.css', 'width')
        .and('match', /10\./);
    });
  });

  context('Currency Price Image', () => {
    it('should render out a custom currency image, when one is supplied', () => {
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          price="453455678"
          currencyImageUrl={DUMMY_VECTOR_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price__currencyImage')
        .should('exist')
        .and(
          'have.attr',
          'src',
          `https://image-resizer-cache.dev.immutable.com/url=${base64UrlEncode(
            DUMMY_VECTOR_IMAGE_URL,
          )}`,
        );
    });

    it('should render out a custom RASTER currency image, when one is supplied', () => {
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          price="453455678"
          currencyImageUrl={DUMMY_RASTER_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price__currencyImage')
        .should('have.attr', 'srcset')
        .then(srcset => {
          expect(srcset).to.contain(
            `https://image-resizer-cache.dev.immutable.com/url=${base64UrlEncode(
              DUMMY_RASTER_IMAGE_URL,
            )}`,
          );
        });
    });

    it('should render default gap for Body text', () => {
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          price="453455678"
          currencyImageUrl={IMX_TOKEN_IMAGE_URL}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price')
        .should('have.css', 'gap')
        .then(gap => {
          expect(parseFloat(gap as unknown as string)).to.be.within(4, 6);
        });
    });

    it('should render extra gap for Heading text', () => {
      cyMountWithProviders(
        <PriceDisplay testId="moo" price="453455678" use={<Heading />} />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').should('have.css', 'gap', '8.4px');
    });
  });

  it('should correctly render a fiat price, when neccissary', () => {
    cyMountWithProviders(
      <PriceDisplay testId="moo" price="453455678" fiatAmount="AUD $1234" />,
      { useAllProviders: true },
    );
    cySmartGet('moo__fiatAmount').should('have.text', 'AUD $1,234');
  });

  context('Coloring', () => {
    it('should allow PriceDisplay to render text with default coloring', () => {
      cyMountWithProviders(<PriceDisplay testId="moo" price="453455678" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__price').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });

    it('should allow PriceDisplay to render text with custom css coloring', () => {
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          sx={{ c: 'dodgerblue' }}
          price="453455678"
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.color', 'dodgerblue');
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          sx={{ c: 'dodgerblue' }}
          price="453455678"
          use={<Heading />}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.color', 'dodgerblue');
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          sx={{ c: 'dodgerblue' }}
          price="453455678"
          use={<Caption />}
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.color', 'dodgerblue');
    });

    it("should allow PriceDisplay to 'atmosphere' gradient", () => {
      cyMountWithProviders(
        <PriceDisplay
          testId="moo"
          sx={{ c: 'base.gradient.1' }}
          price="453455678"
        />,
        { useAllProviders: true },
      );
      cySmartGet('moo')
        .should('have.css', 'backgroundImage')
        .and('match', /linear-gradient/);
      cySmartGet('moo').should(
        'have.css',
        'background-blend-mode',
        smartPickTokenValue(designTokens, 'base.gradient.1.blendMode'),
      );
    });
  });

  context('Different `use` text componentry', () => {
    it('should render Body text by default', () => {
      cyMountWithProviders(<PriceDisplay testId="moo" price="453455678" />, {
        useAllProviders: true,
      });
      cySmartGet('moo__price').its('0.nodeName').should('eq', 'SPAN');
      cySmartGet('moo__price')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto, sans-serif/);
    });

    it('should allow Heading text to be rendered', () => {
      cyMountWithProviders(
        <PriceDisplay use={<Heading />} testId="moo" price="453455678" />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').its('0.nodeName').should('eq', 'H1');
      cySmartGet('moo__price')
        .should('have.css', 'fontFamily')
        .and('match', /Suisse-Intl, sans-serif/);
    });

    it('should allow Caption text to be rendered', () => {
      cyMountWithProviders(
        <PriceDisplay use={<Caption />} testId="moo" price="453455678" />,
        { useAllProviders: true },
      );
      cySmartGet('moo__price').its('0.nodeName').should('eq', 'SPAN');
      cySmartGet('moo__price')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto, sans-serif/);
      cySmartGet('moo__price')
        .should('have.css', 'text-transform', 'uppercase')
        .and('have.css', 'letter-spacing', '2px');
    });
  });
});
