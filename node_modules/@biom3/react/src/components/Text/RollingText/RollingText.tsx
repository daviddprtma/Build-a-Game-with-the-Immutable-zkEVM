import { BodySize, BodyWeight } from '@biom3/design-tokens';
import { Property } from 'csstype';
import { AnimatePresence, motion } from 'framer-motion';
import { ReactElement } from 'react';

import { useTheme } from '../../../hooks';
import { AnimationKind } from '../../../types';
import { StandardComponentWithProps } from '../../../types/shared';
import { GetMultiTextProps } from '../../../types/text';
import { cloneElementWithCssProp } from '../../../utils';
import { Box, BoxWithRCAndDomProps } from '../../Box';
import { Body } from '../Body';

const variants = {
  enter: {
    y: '-0.7em',
    opacity: 0,
    position: 'absolute' as Property.Position,
  },
  center: {
    y: 0,
    opacity: 1,
    position: 'relative' as Property.Position,
  },
  exit: {
    y: '0.7em',
    opacity: 0,
    position: 'absolute' as Property.Position,
  },
};

export type RollingTextBaseProps = StandardComponentWithProps<
  HTMLSpanElement,
  {
    text: string;
    use?: ReactElement;
  }
>;

export type RollingTextProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
> = GetMultiTextProps<RC, Use, RollingTextBaseProps> &
  BoxWithRCAndDomProps<RC> & { animationKind?: AnimationKind };

export function RollingText<
  RC extends ReactElement | undefined = undefined,
  Use extends ReactElement | undefined = undefined,
>({
  text,
  testId = 'RollingText',
  className,
  domRef,
  animationKind = 'gentle',
  ...props
}: RollingTextProps<RC, Use>) {
  const themeProps = useTheme();
  const { base } = themeProps;
  const { use, ...otherProps } =
    'use' in props ? props : { ...props, use: undefined };
  const { size } = 'size' in props ? props : { ...props, size: undefined };
  const { weight } =
    'weight' in props ? props : { ...props, weight: undefined };

  return (
    <Box
      {...otherProps}
      testId={testId}
      domRef={domRef}
      className={`${className ?? ''} RollingText`}
    >
      {cloneElementWithCssProp(
        use || <Body size={size as BodySize} weight={weight as BodyWeight} />,
        {
          testId: `${testId}__text--${text}`,
          sx: {
            lineHeight: '1',
            d: 'flex',
            justifyContent: 'center',
            whiteSpace: 'nowrap',
          },
          className: 'text',
          children: (
            <AnimatePresence>
              {text && (
                <motion.span
                  style={{
                    position: 'absolute',
                  }}
                  className="animatingSpan"
                  key={text}
                  data-testid={`${testId}__text--${text}__animatingSpan`}
                  {...{
                    variants,
                    initial: 'enter',
                    animate: 'center',
                    exit: 'exit',
                    transition: {
                      duration: base.motion.normal[animationKind].jsDuration,
                      ease: base.motion.normal[animationKind].jsEase,
                    },
                  }}
                >
                  {text}
                </motion.span>
              )}
            </AnimatePresence>
          ),
        },
      )}
    </Box>
  );
}

RollingText.displayName = 'RollingText';
