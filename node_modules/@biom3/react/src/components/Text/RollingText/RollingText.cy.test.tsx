import { designTokens } from '@biom3/design-tokens';
import { useState } from 'react';

import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { Button } from '../../Clickable';
import { Caption } from '../Caption';
import { Heading } from '../Heading';
import { RollingText } from './RollingText';

describe('<RollingText />', () => {
  it('should have correct displayName', () => {
    expect(RollingText.displayName).to.eq('RollingText');
  });

  it('should roll old text out, and new text in, when the text prop changes', () => {
    function DummyFixtureApp() {
      const [flip, setFlip] = useState(false);
      return (
        <>
          <Button testId="button" onClick={() => setFlip(old => !old)}>
            change
          </Button>
          <RollingText testId="moo" text={flip ? 'Moo' : 'Cow'} />
        </>
      );
    }
    cyMountWithProviders(<DummyFixtureApp />);
    cySmartGet('moo').should('have.text', 'Cow');
    cySmartGet('button').click();
    cySmartGet('moo__text--Moo__animatingSpan')
      .should('have.css', 'transform')
      .and('match', /matrix()/);
    cySmartGet('moo__text--Cow__animatingSpan')
      .should('have.css', 'transform')
      .and('match', /matrix()/);
  });

  it('should set the correct font size, based on use prop', () => {
    cyMountWithProviders(<RollingText testId="moo" text="text" />);
    cySmartGet('moo__text--text').should('have.css', 'font-size', '16px');

    cyMountWithProviders(
      <RollingText testId="moo" text="text" size="xxSmall" />,
    );
    cySmartGet('moo__text--text').should('have.css', 'font-size', '10px');

    cyMountWithProviders(<RollingText testId="moo" text="text" size="small" />);
    cySmartGet('moo__text--text').should('have.css', 'font-size', '14px');

    cyMountWithProviders(<RollingText testId="moo" text="text" size="large" />);
    cySmartGet('moo__text--text').should('have.css', 'font-size', '20px');

    cyMountWithProviders(
      <RollingText testId="moo" text="text" use={<Heading size="xLarge" />} />,
    );
    cySmartGet('moo__text--text').should('have.css', 'font-size', '64px');

    cyMountWithProviders(
      <RollingText testId="moo" text="text" use={<Heading size="large" />} />,
    );
    cySmartGet('moo__text--text').should('have.css', 'font-size', '40px');
  });

  it('should allow responsive text sizing', () => {
    cy.viewport(100, 100);
    cyMountWithProviders(
      <RollingText
        testId="moo"
        text="something"
        size={['xxSmall', 'xSmall', 'small', 'medium']}
      />,
    );

    cySmartGet('moo__text--something').should('have.css', 'font-size', '10px');

    cy.viewport(designTokens.base.breakpoint.small, 100);
    cySmartGet('moo__text--something').should('have.css', 'font-size', '12px');

    cy.viewport(designTokens.base.breakpoint.medium, 100);
    cySmartGet('moo__text--something').should('have.css', 'font-size', '14px');

    cy.viewport(designTokens.base.breakpoint.large, 100);
    cySmartGet('moo__text--something').should('have.css', 'font-size', '16px');
  });

  it('should use Body by default, but support the use of different text components', () => {
    cyMountWithProviders(<RollingText testId="moo" text="something" />);

    cySmartGet('moo__text--something')
      .should('have.css', 'font-family', 'Roboto, sans-serif')
      .and('not.have.css', 'text-transform', 'uppercase');

    cyMountWithProviders(
      <RollingText testId="moo" text="something" use={<Heading />} />,
    );
    cySmartGet('moo__text--something').should(
      'have.css',
      'font-family',
      'Suisse-Intl, sans-serif',
    );

    cyMountWithProviders(
      <RollingText testId="moo" text="something" use={<Caption />} />,
    );
    cySmartGet('moo__text--something')
      .should('have.css', 'font-family', 'Roboto, sans-serif')
      .and('css', 'text-transform', 'uppercase');
  });

  it('should accept custom sx', () => {
    cyMountWithProviders(
      <RollingText testId="moo" text="text" sx={{ bgc: 'red' }} />,
    );
    cySmartGet('moo').should('have.backgroundColor', 'rgb(255, 0, 0)');
  });

  it('should correctly fwd domRef', () => {
    const ref = cy.stub().as('refStub');
    cyMountWithProviders(<RollingText testId="moo" text="text" domRef={ref} />);
    cySmartGet('@refStub').should('be.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should have rootNode: "div", or anything else as neccissary', () => {
    cyMountWithProviders(<RollingText testId="moo" text="text" />);
    cySmartGet('moo').should('have.prop', 'nodeName', 'DIV');

    cyMountWithProviders(
      <RollingText testId="moo" text="text" rc={<span />} />,
    );
    cySmartGet('moo').should('have.prop', 'nodeName', 'SPAN');
  });
});
