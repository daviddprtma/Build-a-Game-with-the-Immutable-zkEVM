import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { BiomeTheme } from '../../../types/theme';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../../utils/testHelpers';
import { Box } from '../../Box';
import { Heading } from './Heading';

describe('<Heading />', () => {
  context('Coloring', () => {
    it('should allow Heading to render text with default coloring', () => {
      cyMountWithProviders(<Heading testId="moo">some body text</Heading>);
      cyGetByTestId('moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });

    it('should allow Heading to render text with custom css coloring', () => {
      cyMountWithProviders(
        <Heading testId="moo" sx={{ c: 'dodgerblue' }}>
          some body text
        </Heading>,
      );
      cyGetByTestId('moo').should('have.color', 'dodgerblue');
    });

    it("should allow Heading to 'atmosphere' gradient", () => {
      cyMountWithProviders(
        <Heading testId="moo" sx={{ c: 'base.gradient.1' }}>
          some body text
        </Heading>,
      );
      cyGetByTestId('moo')
        .should('have.css', 'backgroundImage')
        .and('match', /linear-gradient/);
      cyGetByTestId('moo').should(
        'have.css',
        'background-blend-mode',
        smartPickTokenValue(designTokens, 'base.gradient.1.blendMode'),
      );
    });
  });

  context('Sizes', () => {
    it('should allow different sizes of Heading to render with different font-sizes', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Heading testId="moo" size="medium">
            some body text
          </Heading>
          <Heading testId="moo2" size="small">
            some body text
          </Heading>
          <Heading testId="moo3" size="xSmall">
            some body text
          </Heading>
          <Heading testId="moo4" size="large">
            some body text
          </Heading>
          <Heading testId="moo5" size="xLarge">
            some body text
          </Heading>
          <Heading testId="moo6" size="xxLarge">
            some body text
          </Heading>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.regular.fontSize',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.small.regular.fontSize',
        ),
      );
      cyGetByTestId('moo3').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xSmall.regular.fontSize',
        ),
      );
      cyGetByTestId('moo4').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.large.regular.fontSize',
        ),
      );
      cyGetByTestId('moo5').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xLarge.regular.fontSize',
        ),
      );
      cyGetByTestId('moo6').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xxLarge.regular.fontSize',
        ),
      );
    });

    it('should allow different sizes of Heading to render with different line-heights', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Heading testId="moo" size="medium">
            some body text
          </Heading>
          <Heading testId="moo2" size="small">
            some body text
          </Heading>
          <Heading testId="moo3" size="xSmall">
            some body text
          </Heading>
          <Heading testId="moo4" size="large">
            some body text
          </Heading>
          <Heading testId="moo5" size="xLarge">
            some body text
          </Heading>
          <Heading testId="moo6" size="xxLarge">
            some body text
          </Heading>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.small.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo3').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xSmall.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo4').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.large.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo5').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xLarge.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo6').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xxLarge.regular.lineHeight',
        ),
      );
    });

    it('should render text with default fontWeight', () => {
      cyMountWithProviders(<Heading testId="moo">some body text</Heading>);
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.regular.fontWeight',
        )?.toString(),
      );
    });

    it('should render text with bold fontWeight, when required', () => {
      cyMountWithProviders(
        <Heading testId="moo" weight="bold">
          some body text
        </Heading>,
      );
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.bold.fontWeight',
        )?.toString(),
      );
    });

    it('should render text with light fontWeight, when required', () => {
      cyMountWithProviders(
        <Heading testId="moo" weight="light">
          some body text
        </Heading>,
      );
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.light.fontWeight',
        )?.toString(),
      );
    });

    it('should allow responsive size selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Heading
          testId="moo"
          size={['xSmall', 'small', 'medium', 'large', 'xLarge']}
        >
          some body text
        </Heading>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xSmall.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.medium - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.small.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.large - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.xLarge - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.large.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.xxLarge - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.xLarge.regular.fontSize',
        ),
      );
    });

    it('should allow responsive weight selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Heading testId="moo" weight={['light', null, null, 'regular', 'bold']}>
          some body text
        </Heading>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.light.fontWeight',
        )?.toString(),
      );

      cy.viewport(base.breakpoint.large, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.regular.fontWeight',
        )?.toString(),
      );

      cy.viewport(base.breakpoint.xLarge, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.heading.medium.bold.fontWeight',
        )?.toString(),
      );
    });
  });

  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <Heading
        testId="moo"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      >
        dsads
      </Heading>,
    );

    cyGetByTestId('moo').should('have.css', 'padding', '8px 16px');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <Heading testId="moo" rc={<h1 ref={ref} />}>
        dsads
      </Heading>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'H1',
      innerHTML: 'dsads',
    });
  });

  it('should render <Heading /> as a <em> tag', () => {
    cyMountWithProviders(
      <Heading testId="moo" rc={<em />}>
        dsads
      </Heading>,
    );

    cyGetByTestId('moo').its('0.nodeName').should('eq', 'EM');
  });

  it('should render <Heading /> as itatlic, where neccissary', () => {
    cyMountWithProviders(
      <Heading testId="moo" sx={{ fontStyle: 'italic' }}>
        dsads
      </Heading>,
    );

    cyGetByTestId('moo').should('have.css', 'font-style', 'italic');
  });

  it('should NOT render <Heading /> as itatlic, by default', () => {
    cyMountWithProviders(<Heading testId="moo">dsads</Heading>);

    cyGetByTestId('moo').should('have.css', 'font-style', 'normal');
  });

  it('should render heading font, by default', () => {
    cyMountWithProviders(<Heading testId="moo">some body text</Heading>);
    cyGetByTestId('moo')
      .should('have.css', 'fontFamily')
      .and('match', /Suisse-Intl, sans-serif/);
  });

  it('should auto-genrate an id slug, when neccissary', () => {
    cyMountWithProviders(
      <Heading testId="moo" autoGenerateId>
        some body text
      </Heading>,
    );
    cySmartGet('moo').should('have.attr', 'id', 'some-body-text');
  });
});
