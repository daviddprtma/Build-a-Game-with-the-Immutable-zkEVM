import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';

import { BiomeTheme } from '../../../types/theme';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../../utils/testHelpers';
import { Caption } from '../Caption';
import { Heading } from '../Heading';
import { EllipsizedText } from './EllipsizedText';

describe('<EllipsizedText />', () => {
  it('should split the string at the correct place', () => {
    cyMountWithProviders(
      <EllipsizedText
        testId="moo"
        text="0x1234567890123455678"
        leftSideLength={4}
        rightSideLength={4}
      />,
    );

    cyGetByTestId('moo').should('have.text', '0x12...5678');

    cyMountWithProviders(
      <EllipsizedText
        testId="moo"
        text="0x1234567890123455678"
        leftSideLength={8}
        rightSideLength={8}
      />,
    );

    cyGetByTestId('moo').should('have.text', '0x123456...23455678');
  });

  it('should simply return un-truncated text, when the input is not long enough to be truncated', () => {
    cyMountWithProviders(
      <EllipsizedText
        testId="moo"
        text="0x123456788"
        leftSideLength={8}
        rightSideLength={8}
      />,
    );
    cyGetByTestId('moo').should('have.text', '0x123456788');
  });

  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <EllipsizedText
        testId="moo"
        text="0x1234567890123455678"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      />,
    );

    cyGetByTestId('moo').should('have.css', 'padding', '8px 16px');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub');

    cyMountWithProviders(
      <EllipsizedText testId="moo" text="0x1234567890123455678" domRef={ref} />,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'SPAN',
      innerHTML: Cypress.sinon.match(/0x12345/),
    });
  });

  it('should render as a <em> tag, where neccissary', () => {
    cyMountWithProviders(
      <EllipsizedText testId="moo" text="0x1234567890123455678" rc={<em />} />,
    );

    cyGetByTestId('moo').its('0.nodeName').should('eq', 'EM');
  });

  context('Coloring', () => {
    it('should allow EllipsizedText to render text with default coloring', () => {
      cyMountWithProviders(
        <EllipsizedText testId="moo" text="0x1234567890123455678" />,
      );
      cyGetByTestId('moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });
    it('should allow EllipsizedText to render text with custom css coloring', () => {
      cyMountWithProviders(
        <EllipsizedText
          testId="moo"
          sx={{ c: 'dodgerblue' }}
          text="0x1234567890123455678"
        />,
      );
      cyGetByTestId('moo').should('have.color', 'dodgerblue');
    });
    it("should allow EllipsizedText to 'atmosphere' gradient", () => {
      cyMountWithProviders(
        <EllipsizedText
          testId="moo"
          sx={{ c: 'base.gradient.1' }}
          text="0x1234567890123455678"
        />,
      );
      cyGetByTestId('moo')
        .should('have.css', 'backgroundImage')
        .and('match', /linear-gradient/);
      cyGetByTestId('moo').should(
        'have.css',
        'background-blend-mode',
        smartPickTokenValue(designTokens, 'base.gradient.1.blendMode'),
      );
    });
  });

  context('Different `use` text componentry', () => {
    it('should render Body text by default', () => {
      cyMountWithProviders(
        <EllipsizedText testId="moo" text="0x1234567890123455678" />,
      );
      cyGetByTestId('moo').its('0.nodeName').should('eq', 'SPAN');
      cyGetByTestId('moo')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto, sans-serif/);
    });

    it('should allow Heading text to be rendered', () => {
      cyMountWithProviders(
        <EllipsizedText
          use={<Heading />}
          testId="moo"
          text="0x1234567890123455678"
        />,
      );
      cyGetByTestId('moo')
        .should('have.css', 'fontFamily')
        .and('match', /Suisse-Intl, sans-serif/);
    });

    it('should allow Caption text to be rendered', () => {
      cyMountWithProviders(
        <EllipsizedText
          use={<Caption />}
          testId="moo"
          text="0x1234567890123455678"
        />,
      );
      cyGetByTestId('moo')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto, sans-serif/);
      cySmartGet('moo')
        .should('have.css', 'text-transform', 'uppercase')
        .and('have.css', 'letter-spacing', '2px');
    });
  });
});
