import { base, designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { Ref } from 'react';

import { BiomeTheme } from '../../../types/theme';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../../utils/testHelpers';
import { Box } from '../../Box';
import { Body } from './Body';

describe('<Body />', () => {
  context('Shimmer', () => {
    it('should NOT render the shimmer state by default', () => {
      cyMountWithProviders(<Body testId="moo" />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').should('not.exist');
    });

    it('should render the shimmer state, when shimme prop is truthy', () => {
      cyMountWithProviders(<Body shimmer={1} testId="moo" />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').should('exist').and('be.visible');
      cySmartGet('moo__shimmer__line--0').should('be.visible');
      cySmartGet('moo__shimmer__line--0').should(
        'have.css',
        'background-image',
      );
    });

    it('should accept rc prop, even while shimmer prop is active', () => {
      cyMountWithProviders(<Body testId="moo" shimmer={1} rc={<section />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').its('0.nodeName').should('eq', 'SECTION');

      cyMountWithProviders(<Body testId="moo" shimmer={1} rc={<article />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').its('0.nodeName').should('eq', 'ARTICLE');
    });

    it('should allow parent component to pass in sx for the shimmer state', () => {
      cyMountWithProviders(
        <Body testId="moo" shimmer={1} shimmerSx={{ bg: 'gold' }} />,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__shimmer').should('have.backgroundColor', 'gold');
    });
  });

  context('Coloring', () => {
    it('should allow Body to render text with default coloring', () => {
      cyMountWithProviders(<Body testId="moo">some body text</Body>);
      cyGetByTestId('moo').should(
        'have.color',
        smartPickTokenValue(designTokens, 'base.color.brand.1'),
      );
    });

    it('should allow Body to render text with custom css coloring', () => {
      cyMountWithProviders(
        <Body testId="moo" sx={{ c: 'dodgerblue' }}>
          some body text
        </Body>,
      );
      cyGetByTestId('moo').should('have.color', 'dodgerblue');
    });
  });

  context('Sizes', () => {
    it('should allow different sizes of Body to render with different font-sizes', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Body testId="moo" size="medium">
            some body text
          </Body>
          <Body testId="moo2" size="small">
            some body text
          </Body>
          <Body testId="moo3" size="xSmall">
            some body text
          </Body>
          <Body testId="moo4" size="xxSmall">
            some body text
          </Body>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.fontSize',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.small.regular.fontSize',
        ),
      );
      cyGetByTestId('moo3').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xSmall.regular.fontSize',
        ),
      );
      cyGetByTestId('moo4').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xxSmall.regular.fontSize',
        ),
      );
    });

    it('should allow different sizes of Body to render with different line-heights', () => {
      cyMountWithProviders(
        <Box sx={{ d: 'flex', flexDirection: 'column' }}>
          <Body testId="moo" size="medium">
            some body text
          </Body>
          <Body testId="moo2" size="small">
            some body text
          </Body>
          <Body testId="moo3" size="xSmall">
            some body text
          </Body>
          <Body testId="moo4" size="xxSmall">
            some body text
          </Body>
        </Box>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo2').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.body.small.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo3').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xSmall.regular.lineHeight',
        ),
      );
      cyGetByTestId('moo4').should(
        'have.css',
        'line-height',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xxSmall.regular.lineHeight',
        ),
      );
    });

    it('should render body font, by default', () => {
      cyMountWithProviders(<Body testId="moo">some body text</Body>);
      cyGetByTestId('moo')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto, sans-serif/);
    });

    it('should render monospace font, when required', () => {
      cyMountWithProviders(
        <Body testId="moo" mono>
          some body text
        </Body>,
      );
      cyGetByTestId('moo')
        .should('have.css', 'fontFamily')
        .and('match', /Roboto Mono/)
        .and('match', /monospace/);
    });

    it('should render text with default fontWeight', () => {
      cyMountWithProviders(<Body testId="moo">some body text</Body>);
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.fontWeight',
        )?.toString(),
      );
    });

    it('should render text with bold fontWeight, when required', () => {
      cyMountWithProviders(
        <Body testId="moo" weight="bold">
          some body text
        </Body>,
      );
      cyGetByTestId('moo').should(
        'have.css',
        'fontWeight',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.bold.fontWeight',
        )?.toString(),
      );
    });

    it('should allow responsive size selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Body testId="moo" size={['medium', 'small', 'xSmall', 'xxSmall']}>
          some body text
        </Body>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.medium - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.small.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.large - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xSmall.regular.fontSize',
        ),
      );

      cy.viewport(base.breakpoint.xLarge - 100, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          designTokens,
          'base.text.body.xxSmall.regular.fontSize',
        ),
      );
    });

    it('should allow responsive weight selection', () => {
      cy.viewport(base.breakpoint.small - 100, 200);
      cyMountWithProviders(
        <Body testId="moo" weight={['regular', null, null, null, 'bold']}>
          some body text
        </Body>,
      );

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.regular.fontWeight',
        )?.toString(),
      );

      cy.viewport(base.breakpoint.xLarge, 200);

      cyGetByTestId('moo').should(
        'have.css',
        'font-weight',
        smartPickTokenValue(
          designTokens,
          'base.text.body.medium.bold.fontWeight',
        )?.toString(),
      );
    });
  });

  it('should allow consumer to render compund rules, where neccissary', () => {
    cyMountWithProviders(
      <Body
        testId="moo"
        sx={{
          padding: (theme: BiomeTheme) =>
            `${theme.base.spacing.x2} ${theme.base.spacing.x4}`,
        }}
      >
        dsads
      </Body>,
    );

    cyGetByTestId('moo').should('have.css', 'padding', '8px 16px');
  });

  it('should correctly forward ref', () => {
    const ref = cy.stub().as('refStub') as unknown as Ref<HTMLDivElement>;

    cyMountWithProviders(
      <Body testId="moo" rc={<span ref={ref} />}>
        dsads
      </Body>,
    );

    cy.get('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'SPAN',
      innerHTML: 'dsads',
    });
  });

  it('should render <Body /> as a <em> tag', () => {
    cyMountWithProviders(
      <Body testId="moo" rc={<em />}>
        dsads
      </Body>,
    );

    cyGetByTestId('moo').its('0.nodeName').should('eq', 'EM');
  });

  it('should render <Body /> as itatlic, where neccissary', () => {
    cyMountWithProviders(
      <Body testId="moo" sx={{ fontStyle: 'italic' }}>
        dsads
      </Body>,
    );

    cyGetByTestId('moo').should('have.css', 'font-style', 'italic');
  });

  it('should NOT render <Body /> as itatlic, by default', () => {
    cyMountWithProviders(<Body testId="moo">dsads</Body>);

    cyGetByTestId('moo').should('have.css', 'font-style', 'normal');
  });
});
