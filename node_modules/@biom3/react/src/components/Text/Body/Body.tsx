import { DistributiveOmit } from '@emotion/react';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../../hooks';
import { useConvertSxToEmotionStyles } from '../../../hooks/useConvertSxToEmotionStyles';
import { BodyProps } from '../../../types/text';
import { cloneElementWithCssProp } from '../../../utils';
import { setDefaultSxTextColor } from '../../../utils/styleHelpers';
import { getBodyTextStyles } from '../../../utils/textStyleHelpers';
import { BodyShimmer } from './BodyShimmer';
import { DEFAULT_BODY_COLOR, DEFAULT_BODY_SIZE } from './shared';

function BodyContent<RC extends ReactElement | undefined = undefined>({
  size = DEFAULT_BODY_SIZE,
  rc = <span />,
  weight = 'regular',
  sx = {},
  testId,
  mono,
  children,
  domRef,
  ...props
}: DistributiveOmit<BodyProps<RC>, 'shimmer' | 'shimmerSx' | 'shimmerLines'>) {
  const themeProps = useTheme();
  const customStyles = useConvertSxToEmotionStyles(
    merge(setDefaultSxTextColor(sx, DEFAULT_BODY_COLOR), sx),
  );

  const css = merge(
    getBodyTextStyles({ themeProps, mono, size, weight }),
    customStyles,
  );

  return cloneElementWithCssProp(rc, {
    ...props,
    ...(testId ? { 'data-testid': testId } : {}),
    ...(domRef ? { ref: domRef } : {}),
    css,
    children,
  });
}

export function Body<RC extends ReactElement | undefined = undefined>({
  size = DEFAULT_BODY_SIZE,
  weight = 'regular',
  shimmer,
  shimmerSx,
  sx,
  children,
  mono,
  rc = <span />,
  domRef,
  testId,
  className,
  ...props
}: BodyProps<RC>) {
  return shimmer ? (
    <BodyShimmer
      size={size}
      sx={shimmerSx}
      shimmerLines={shimmer}
      rc={rc}
      className={className}
      testId={`${testId}__shimmer`}
    />
  ) : (
    <BodyContent
      {...props}
      size={size}
      sx={sx}
      weight={weight}
      mono={mono}
      rc={rc}
      domRef={domRef}
      testId={testId}
      className={className}
    >
      {children}
    </BodyContent>
  );
}

Body.displayName = 'Body';
