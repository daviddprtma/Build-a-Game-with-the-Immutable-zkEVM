import { BodySize, designTokens } from '@biom3/design-tokens';
import { Properties } from 'csstype';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useTheme } from '../../../hooks';
import { MakeResponsive } from '../../../types/shared';
import { BiomeTheme } from '../../../types/theme';
import { getResponsiveSx, getStartingSize } from '../../../utils/styleHelpers';
import { vFlex } from '../../../utils/sxChunks';
import { getBodyTextStyles } from '../../../utils/textStyleHelpers';
import { Box, BoxWithRCAndDomProps } from '../../Box';
import { ShimmerBox } from '../../Shimmer';
import { DEFAULT_BODY_SIZE } from './shared';

export type BodyShimmerProps<RC extends ReactElement | undefined = undefined> =
  BoxWithRCAndDomProps<RC> & {
    size?: MakeResponsive<BodySize>;
    shimmerLines?: number;
  };

function renderGapAndPadding({
  size,
}: {
  size: BodySize;
  theme?: BiomeTheme;
}): Properties {
  switch (size) {
    case 'large': {
      return { gap: '0.25em' };
    }
    case 'small': {
      return { gap: '0.3em' };
    }
    case 'xSmall': {
      return { gap: '0.2em' };
    }
    case 'xxSmall': {
      return { gap: '0.26em' };
    }
    case 'medium':
    default: {
      return { gap: '0.35em' };
    }
  }
}

const getResponsiveGap = ({
  size,
  theme,
}: {
  size: MakeResponsive<BodySize>;
  theme: BiomeTheme;
}) => getResponsiveSx({ theme, size, renderSxAtSize: renderGapAndPadding });

export function BodyShimmer<RC extends ReactElement | undefined = undefined>({
  size = DEFAULT_BODY_SIZE,
  shimmerLines = 1,
  sx = {},
  testId,
  ...props
}: BodyShimmerProps<RC>) {
  const themeProps = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_BODY_SIZE,
    Object.keys(designTokens.base.text.body),
  );
  const allSx = merge(
    {
      ...vFlex,
      display: 'inline-flex',
      minWidth: '50px',
      verticalAlign: 'text-top',
    },
    getBodyTextStyles({ themeProps, mono: false, size, weight: 'regular' }),
    renderGapAndPadding({ size: startingSize }),
    getResponsiveGap({ size, theme: themeProps }),
    sx,
  );
  return (
    <Box {...props} sx={allSx} testId={testId}>
      {Array.from({ length: shimmerLines }, (item, index) => (
        <ShimmerBox
          testId={`${testId}__line--${index}`}
          key={index}
          sx={{
            height: '1.2em',
            ...(shimmerLines > 1 && index === shimmerLines - 1
              ? { w: '75%' }
              : {}),
          }}
        />
      ))}
    </Box>
  );
}
