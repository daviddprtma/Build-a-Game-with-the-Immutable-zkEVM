import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getResponsiveSx } from '../../utils/styleHelpers';
import { CountdownTimerSize, CountdownTimerVariant } from './shared';

export const countDownContainerBaseSx = {
  flexShrink: 0,
  flexGrow: 0,
  position: 'relative',
};

export const baseTileSx = {
  backdropFilter: 'blur(28px)',
};

export function getContainerSx({
  size,
}: {
  size: CountdownTimerSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'small':
      return {
        width: '204px',
      };

    case 'large':
      return {
        width: '292px',
      };

    case 'xLarge':
      return {
        width: '356px',
      };

    case 'medium':
    default:
      return {
        width: '216px',
      };
  }
}

export const getResponsiveContainerSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<CountdownTimerSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getContainerSx,
  });

export function getTileSx({
  size,
  theme,
}: {
  size: CountdownTimerSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'small':
      return {
        width: theme.base.spacing.x12,
        height: theme.base.spacing.x8,
        borderRadius: theme.base.borderRadius.x2,
      };

    case 'large':
      return {
        width: theme.base.spacing.x16,
        height: theme.base.spacing.x16,
        borderRadius: theme.base.borderRadius.x6,
      };

    case 'xLarge':
      return {
        width: theme.base.spacing.x20,
        height: theme.base.spacing.x20,
        borderRadius: theme.base.borderRadius.x6,
      };

    case 'medium':
    default:
      return {
        width: theme.base.spacing.x12,
        height: theme.base.spacing.x12,
        borderRadius: theme.base.borderRadius.x4,
      };
  }
}

export const getResponsiveTileSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<CountdownTimerSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: getTileSx,
  });

export function getTileVariantSx(variant: CountdownTimerVariant) {
  switch (variant) {
    case 'inverse':
      return {
        bg: 'base.color.translucent.inverse.600',
      };

    case 'primary':
    default:
      return {
        bg: 'base.color.translucent.standard.100',
      };
  }
}
