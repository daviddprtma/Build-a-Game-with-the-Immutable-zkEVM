import { ReactElement, useEffect, useMemo, useState } from 'react';
import merge from 'ts-deepmerge';

import {
  useBrowserEffect,
  useGetCurrentSizeClass,
  useInterval,
  useTheme,
} from '../../hooks';
import { MakeResponsive } from '../../types/shared';
import { warnUser } from '../../utils';
import { getStartingSize } from '../../utils/styleHelpers';
import { Stack, StackProps } from '../Stack';
import { CountdownTile } from './CountdownTile';
import {
  COUNTDOWN_TIMER_SIZES,
  CountdownTimerSize,
  CountdownTimerVariant,
  DEFAULT_COUNTDOWN_TIMER_SIZE,
  DEFAULT_COUNTDOWN_TIMER_VARIANT,
} from './shared';
import {
  countDownContainerBaseSx,
  getContainerSx,
  getResponsiveContainerSx,
} from './styles';

export type CountdownTimerProps<
  RC extends ReactElement | undefined = undefined,
> = StackProps<RC> & {
  futureTarget: Date;
  size?: MakeResponsive<CountdownTimerSize>;
  variant?: CountdownTimerVariant;
  onCountdownEnd?: () => void;
};

function getTimeLeft(futureTarget: Date) {
  const diffTime = Math.abs(
    new Date().valueOf() - new Date(futureTarget).valueOf(),
  );
  let days = diffTime / (24 * 60 * 60 * 1000);
  let hours = (days % 1) * 24;
  let minutes = (hours % 1) * 60;
  let seconds = (minutes % 1) * 60;
  [days, hours, minutes, seconds] = [
    Math.floor(days),
    Math.floor(hours),
    Math.floor(minutes),
    Math.floor(seconds),
  ];
  return { days, hours, minutes, seconds };
}

export function CountdownTimer<
  RC extends ReactElement | undefined = undefined,
>({
  futureTarget,
  size = DEFAULT_COUNTDOWN_TIMER_SIZE,
  variant = DEFAULT_COUNTDOWN_TIMER_VARIANT,
  className,
  testId,
  onCountdownEnd,
  direction = 'row',
  justifyContent = 'space-between',
  sx = {},
  ...props
}: CountdownTimerProps<RC>) {
  const theme = useTheme();
  const [timeLeft, setTimeLeft] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0,
  });
  useBrowserEffect(() => {
    setTimeLeft(getTimeLeft(futureTarget));
  }, []);
  const pollIntervalRef = useInterval(() => {
    const newTimeLeft = getTimeLeft(futureTarget);
    const now = new Date();
    if (
      now >= futureTarget ||
      (newTimeLeft.days === 0 &&
        newTimeLeft.hours === 0 &&
        newTimeLeft.minutes === 0 &&
        newTimeLeft.seconds === 0)
    ) {
      setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
      clearInterval(pollIntervalRef.current);
      return onCountdownEnd?.();
    }
    return setTimeLeft(newTimeLeft);
  }, 1000);

  useEffect(() => {
    const now = new Date();
    if (now >= futureTarget) {
      warnUser(
        `CountdownTimer has recieved ${futureTarget.toLocaleString()} as a futureTarget. This is invalid, as it is in the past.
  Timer interval has been disabled`,
      );
      clearInterval(pollIntervalRef.current);
      setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
    }
  }, [futureTarget, pollIntervalRef]);

  const startingSize = getStartingSize(
    size,
    DEFAULT_COUNTDOWN_TIMER_SIZE,
    COUNTDOWN_TIMER_SIZES,
  );
  const sizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_COUNTDOWN_TIMER_SIZE,
    COUNTDOWN_TIMER_SIZES,
  );
  const allSx = useMemo(
    () =>
      merge(
        countDownContainerBaseSx,
        getContainerSx({ theme, size: startingSize }),
        getResponsiveContainerSx({ theme, size }),
        sx,
      ),
    [sx, theme, size, startingSize],
  );

  return (
    <Stack
      {...props}
      direction={direction}
      justifyContent={justifyContent}
      testId={testId}
      sx={allSx}
      className={`${
        className ?? ''
      } CountdownTimer CountdownTimer--${variant} CountdownTimer--${sizeClass}`}
    >
      <CountdownTile
        label="days"
        digit={timeLeft.days}
        size={size}
        variant={variant}
      />
      <CountdownTile
        label="hours"
        digit={timeLeft.hours}
        size={size}
        variant={variant}
      />
      <CountdownTile
        label="minutes"
        digit={timeLeft.minutes}
        size={size}
        variant={variant}
      />
      <CountdownTile
        label="seconds"
        digit={timeLeft.seconds}
        size={size}
        variant={variant}
      />
    </Stack>
  );
}

CountdownTimer.displayName = 'CountdownTimer';
