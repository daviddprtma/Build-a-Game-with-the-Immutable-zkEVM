import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { CountdownTimer } from './CountdownTimer';

describe('<CountdownTimer />', () => {
  it('should have correct displayName', () => {
    expect(CountdownTimer.displayName).to.eq('CountdownTimer');
  });

  it('should render as div by default, or anything else as neccissary', () => {
    const today = new Date();
    const next4Seconds = new Date(today.setSeconds(today.getSeconds() + 4));
    cyMountWithProviders(
      <CountdownTimer testId="moo" futureTarget={next4Seconds} />,
    );
    cySmartGet('moo').should('have.prop', 'nodeName', 'DIV');

    cyMountWithProviders(
      <CountdownTimer testId="moo" futureTarget={next4Seconds} rc={<span />} />,
    );
    cySmartGet('moo').should('have.prop', 'nodeName', 'SPAN');
  });

  it('should correctly render a countdown timer', () => {
    const today = new Date();
    const next4Seconds = new Date(today.setSeconds(today.getSeconds() + 3));
    cyMountWithProviders(
      <CountdownTimer testId="moo" futureTarget={next4Seconds} />,
    );
    cySmartGet('CountdownTimer__Tile--days').should('have.text', '00days');
    cySmartGet('CountdownTimer__Tile--hours').should('have.text', '00hours');
    cySmartGet('CountdownTimer__Tile--minutes').should(
      'have.text',
      '00minutes',
    );
    cySmartGet('CountdownTimer__Tile--seconds').should(
      'have.text',
      '02seconds',
    );
    cySmartGet('CountdownTimer__Tile--seconds').should(
      'have.text',
      '01seconds',
    );
    cySmartGet('CountdownTimer__Tile--seconds').should(
      'have.text',
      '00seconds',
    );
  });

  it('should accept custom sx', () => {
    cyMountWithProviders(
      <CountdownTimer
        testId="moo"
        futureTarget={new Date()}
        sx={{ bgc: 'red' }}
      />,
    );
    cySmartGet('moo').should('have.backgroundColor', 'rgb(255, 0, 0)');
  });

  it('should correctly fwd domRef', () => {
    const ref = cy.stub().as('refStub');
    const today = new Date();
    const next4Seconds = new Date(today.setSeconds(today.getSeconds() + 4));
    cyMountWithProviders(
      <CountdownTimer testId="moo" futureTarget={next4Seconds} domRef={ref} />,
    );
    cySmartGet('@refStub').should('be.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should call onCountdownEnd when the countdown ends', () => {
    const today = new Date();
    const next4Seconds = new Date(today.setSeconds(today.getSeconds() + 1));
    const onCountdownEnd = cy.stub().as('onCountdownEnd');
    cyMountWithProviders(
      <CountdownTimer
        testId="moo"
        futureTarget={next4Seconds}
        onCountdownEnd={onCountdownEnd}
      />,
    );
    cySmartGet('@onCountdownEnd').should('not.have.been.called');
    cy.wait(1000);
    cySmartGet('@onCountdownEnd').should('have.been.called');
  });

  it('should warn the user if the futureTarget is in the past', () => {
    cy.window().then(win => {
      cy.spy(win.console, 'warn').as('consoleWarn');
    });
    const pastDate = new Date('Dec 2, 2021');
    cyMountWithProviders(
      <CountdownTimer testId="moo" futureTarget={pastDate} />,
    );
    cy.get('@consoleWarn')
      .should('be.calledWithMatch', /CountdownTimer has recieved/)
      .and('be.calledWithMatch', /This is invalid, as it is in the past\./);
  });

  it('should correctly render a far away date', () => {
    const today = new Date();
    const distantFuture = new Date(
      today.setUTCMonth(today.getUTCMonth() + 150),
    );
    cyMountWithProviders(
      <CountdownTimer
        testId="moo"
        futureTarget={distantFuture}
        size="xLarge"
      />,
    );
    cySmartGet('CountdownTimer__Tile--days').should('have.text', '4565days');
  });
});
