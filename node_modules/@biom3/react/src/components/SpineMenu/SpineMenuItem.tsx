import { ClassNames } from '@emotion/react';
import { ReactElement } from 'react';
import merge from 'ts-deepmerge';

import { useGetSubcomponentChild } from '../../hooks';
import { BaseClickableWithRCAndDomProps } from '../../types/clickable';
import { Badge } from '../Badge';
import { BaseClickable } from '../Clickable';
import { Icon } from '../Icon';
import { SmartClone } from '../SmartClone';
import { Body } from '../Text';
import { badgeSx, iconSx, spineMenuItemSx } from './styles';

export type SpineMenuItemProps<
  RC extends ReactElement | undefined = undefined,
> = BaseClickableWithRCAndDomProps<RC> & {
  selected?: boolean;
};
export function SpineMenuItem<RC extends ReactElement | undefined = undefined>({
  sx = {},
  children,
  testId,
  selected,
  className,
  ...props
}: SpineMenuItemProps<RC>) {
  const label = useGetSubcomponentChild(children, Body);
  const icon = useGetSubcomponentChild(children, Icon);
  const badge = useGetSubcomponentChild(children, Badge);
  return (
    <ClassNames>
      {({ cx }) => (
        <BaseClickable
          {...props}
          testId={testId}
          sx={merge(spineMenuItemSx, sx)}
          className={cx(className, { selected })}
        >
          {icon && (
            <SmartClone testId={`${testId}__icon`} sx={iconSx}>
              {icon}
            </SmartClone>
          )}
          {label && (
            <SmartClone
              testId={`${testId}__label`}
              size="small"
              sx={{ c: 'inherit' }}
            >
              {label}
            </SmartClone>
          )}
          {badge && (
            <SmartClone testId={`${testId}__badge`} sx={badgeSx}>
              {badge}
            </SmartClone>
          )}
        </BaseClickable>
      )}
    </ClassNames>
  );
}

SpineMenuItem.displayName = 'SpineMenu.Item';
SpineMenuItem.Label = Body;
SpineMenuItem.Icon = Icon;
SpineMenuItem.Badge = Badge;
