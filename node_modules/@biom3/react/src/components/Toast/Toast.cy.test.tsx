import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import { BiomeCombinedProviders } from '../../providers';
import { ToastVariant } from '../../types/overlays';
import { hexToRgbString } from '../../utils';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Box } from '../Box';
import { Button } from '../Clickable';
import { Icon } from '../Icon';
import { Toast } from './Toast';

// @TODO: add test to check for property changes (just like modal)

function ControlledToastApp({ autoDismissDuration }: any) {
  const [visible, setVisible] = useState(false);
  return (
    <>
      <Button
        testId="button"
        onClick={() => {
          setVisible(!visible);
        }}
      >
        toggle
      </Button>
      <Toast
        visible={visible}
        testId="moo"
        onCloseToast={() => setVisible(false)}
        {...(autoDismissDuration ? { autoDismissDuration } : {})}
      >
        <Toast.Message>hello</Toast.Message>
      </Toast>
    </>
  );
}

describe('<Toast />', () => {
  it('should be controlled by default (closing the toast does nothing unless its wired up correctly)', () => {
    cyMountWithProviders(
      <Toast visible>
        <Toast.Message testId="content">this is a toast!</Toast.Message>
      </Toast>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('content').should('exist');
    cySmartGet('dismissToastButton').click();
    cySmartGet('content').should('exist');

    cy.clock();

    cyMountWithProviders(
      <Toast visible autoDismissDuration={1000}>
        <Toast.Message testId="content">this is a toast!</Toast.Message>
      </Toast>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('content').should('exist');
    cy.clock().tick(1050);
    cySmartGet('content').should('exist');
  });

  it('should not render anything, when visible is false', () => {
    cyMountWithProviders(
      <Toast visible={false}>
        <Toast.Message testId="content">this is a toast!</Toast.Message>
      </Toast>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('content').should('not.exist');
  });

  it('should update visible Toast.Message, as the parent component re-renders', () => {
    function ToastWithCount() {
      const [count, setCount] = useState(0);
      return (
        <Toast visible>
          <Toast.Message testId="content">count: {count}</Toast.Message>
          <Toast.Button
            testId="button"
            onClick={() => setCount(old => old + 1)}
          >
            increment
          </Toast.Button>
        </Toast>
      );
    }
    cyMountWithProviders(<ToastWithCount />, { useAllProviders: true });
    cySmartGet('content').should('have.text', 'count: 0');
    cySmartGet('button').click();
    cySmartGet('content').should('have.text', 'count: 1');
  });

  it('should call onCloseToast prop callback, when user closes the Toast', () => {
    const onCloseStub = cy.stub().as('onCloseStub');
    cyMountWithProviders(
      <Toast visible onCloseToast={onCloseStub}>
        <Toast.Message testId="content">this is a toast!</Toast.Message>
      </Toast>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('@onCloseStub').should('not.have.been.called');
    cySmartGet('dismissToastButton').click();
    cySmartGet('@onCloseStub').should('have.been.called');
  });

  it('should allow the use of an external container, when neccissary', () => {
    cyMountWithProviders(
      <BiomeCombinedProviders toastContainerId="moo">
        <Box
          id="moo"
          sx={{
            position: 'absolute',
            width: '100%',
            height: 'calc(100% - 50px)',
            top: '50px',
            left: '0',
            bg: 'red',
          }}
        />
        <Toast visible>
          <Toast.Message testId="message">this is a toast!</Toast.Message>
        </Toast>
      </BiomeCombinedProviders>,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('#moo span[data-testid="message"]').should('exist');
  });

  it('should position toast top right, by default', () => {
    cyMountWithProviders(
      <Toast visible>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );

    cySmartGet('toastsContainer--topRight')
      .should('have.css', 'top', '24px')
      .and('have.css', 'right', '24px');
  });

  it('should allow the custom positioning of the Toast.Message', () => {
    cyMountWithProviders(
      <Toast visible position={{ x: 'left', y: 'top' }}>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );

    cySmartGet('toastsContainer--topLeft')
      .should('have.css', 'top', '24px')
      .and('have.css', 'left', '24px');

    cyMountWithProviders(
      <Toast visible position={{ x: 'right', y: 'bottom' }}>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );

    cySmartGet('toastsContainer--bottomRight')
      .should('have.css', 'bottom', '24px')
      .and('have.css', 'right', '24px');

    cyMountWithProviders(
      <Toast visible position={{ x: 'center', y: 'bottom' }}>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );

    cySmartGet('toastsContainer--bottomCenter')
      .should('have.css', 'bottom', '24px')
      .and('have.css', 'left', '250px');
  });

  it('should default to guidance variant, when no variant is provided', () => {
    cyMountWithProviders(
      <Toast visible>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('toastVariantBar').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.status.guidance.bright'),
    );
  });

  it('should open toast, when neccissary', () => {
    cyMountWithProviders(<ControlledToastApp />, { useAllProviders: true });
    cySmartGet('moo').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('moo').should('exist');
  });

  it('should automatically close toast, when neccissary', () => {
    cy.clock();
    cyMountWithProviders(<ControlledToastApp autoDismissDuration={10000} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('not.exist');
    cySmartGet('button').click();
    cySmartGet('moo').should('exist').and('be.visible');
    cy.clock().tick(10050);
    cySmartGet('moo').should('not.be.visible');
  });

  it('should show dismiss button by default', () => {
    cyMountWithProviders(
      <Toast visible>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('dismissToastButton').should('exist');
  });

  it('should show dismiss button, when neccissary', () => {
    cyMountWithProviders(
      <Toast visible hideDismissButton>
        <Toast.Message>hello</Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('dismissToastButton').should('not.exist');
  });

  it('should show buttons on right, by default', () => {
    cyMountWithProviders(
      <Toast visible hideDismissButton>
        <Toast.Message>hello</Toast.Message>
        <Toast.ButtCon icon="AirDrop" />
        <Toast.Button testId="button">hello</Toast.Button>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('button').within($el => {
      const rect = $el[0].getBoundingClientRect();
      expect(rect.top).to.be.lessThan(41);
    });
  });

  it('should show buttons on bottom-right, when neccissary', () => {
    cyMountWithProviders(
      <Toast visible hideDismissButton buttonsPosition="bottomRight">
        <Toast.Message>hello</Toast.Message>
        <Toast.ButtCon icon="AirDrop" />
        <Toast.Button testId="button">hello</Toast.Button>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('button').within($el => {
      const rect = $el[0].getBoundingClientRect();
      expect(rect.top).to.be.greaterThan(62);
    });
  });

  it('should add some extra styles when the user puts an Icon inside of Toast.Message', () => {
    cyMountWithProviders(
      <Toast visible>
        <Toast.Message>
          <Icon testId="icon" icon="Apple" /> hello
        </Toast.Message>
      </Toast>,
      { useAllProviders: true },
    );
    cySmartGet('icon').should('have.css', 'margin-right', '8px');
    cySmartGet('icon').should(
      'have.css',
      'fill',
      hexToRgbString(
        smartPickTokenValue(designTokens, 'base.color.text.inverse.primary'),
      ),
    );
    cySmartGet('icon').should('have.css', 'font-size', '16px');
  });

  context('Coloring', () => {
    Object.keys(designTokens.base.color.status).forEach(variant => {
      it(`should correctly color toast, based on the variant (${variant})`, () => {
        cyMountWithProviders(
          <Toast visible variant={variant as ToastVariant}>
            <Toast.Message>hello</Toast.Message>
          </Toast>,
          { useAllProviders: true },
        );

        cySmartGet('toastVariantBar').should(
          'have.backgroundColor',
          smartPickTokenValue(
            designTokens,
            `base.color.status.${variant}.bright`,
          ),
        );
      });
    });
  });
});
