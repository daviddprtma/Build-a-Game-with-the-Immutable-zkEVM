import { Properties } from 'csstype';

import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getResponsiveSx } from '../../utils/styleHelpers';
import {
  getBodyTextStyles,
  getHeadingTextStyles,
} from '../../utils/textStyleHelpers';
import { MenuItemSize } from './shared';

export const innerTextContainerSxProps = {
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'flex-start',
  justifyContent: 'center',
  flexGrow: 1,
};

export const renderSizeBasedStyles = ({
  size,
  theme,
}: {
  size: MakeResponsive<MenuItemSize>;
  theme: BiomeTheme;
}) => {
  switch (size) {
    case 'xSmall':
      return {
        paddingTop: `${parseInt(theme.base.spacing.x2, 10) - 2}px`,
        paddingBottom: `${parseInt(theme.base.spacing.x2, 10) - 2}px`,
        paddingLeft: theme.base.spacing.x2,
        minHeight: '50px',
        borderRadius: 'base.borderRadius.x4',

        '& .innerTextContainer': {
          minHeight: '34px',
        },
      };

    case 'small':
      return {
        paddingTop: `${parseInt(theme.base.spacing.x3, 10) - 2}px`,
        paddingBottom: `${parseInt(theme.base.spacing.x3, 10) - 2}px`,
        minHeight: '72px',
        borderRadius: 'base.borderRadius.x6',

        '& .innerTextContainer': {
          minHeight: '48px',
        },
      };

    case 'medium':
    default:
      return {
        paddingTop: `${parseInt(theme.base.spacing.x6, 10) - 2}px`,
        paddingBottom: `${parseInt(theme.base.spacing.x6, 10) - 2}px`,
        minHeight: '96px',
        borderRadius: 'base.borderRadius.x6',

        '& .innerTextContainer': {
          minHeight: '48px',
        },
      };
  }
};

export const baseStyles = {
  display: 'flex',
  alignItems: 'center',
  paddingX: 'base.spacing.x3',
  width: '100%',
  gap: 'base.spacing.x4',
  transitionProperty: 'border, background, box-shadow',
  transitionDuration: 'base.motion.normal.fast.cssDuration',
  transitionTimingFunction: 'base.motion.normal.fast.cssEase',
  border: 'solid transparent',
  borderWidth: 'base.border.size.200',

  '&.emphasized': {
    bgc: 'base.color.translucent.emphasis.100',
  },

  'div&': {
    cursor: 'pointer',
  },

  '&:not(article).hover': {
    bgc: 'base.color.translucent.emphasis.200',
    boxShadow: 'base.shadow.200',
  },

  '&.selected': {
    bgc: 'base.color.translucent.emphasis.200',
    borderColor: 'base.color.translucent.standard.1000',
  },

  '&.selected:not(article).hover': {
    boxShadow: 'base.shadow.200',
  },

  '&:not(article):active': {
    bgc: 'base.color.translucent.emphasis.100',
    boxShadow: 'base.shadow.100',
  },
};

export const renderResponsiveStyles = ({
  size,
  theme,
}: {
  size: MakeResponsive<MenuItemSize>;
  theme: BiomeTheme;
}) => getResponsiveSx({ size, theme, renderSxAtSize: renderSizeBasedStyles });

export const baseFramedIconStyles = {
  d: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  bg: 'base.color.translucent.standard.100',
  flexShrink: 0,
};

export const baseFramedImageStyles = {
  width: 'base.spacing.x12',
  height: 'base.spacing.x12',
  flexShrink: 0,
};

export function renderLabelStyles({
  size,
  theme,
}: {
  size: MenuItemSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'xSmall':
      return getBodyTextStyles({
        themeProps: theme,
        mono: false,
        size: 'small',
        weight: 'regular',
      });

    case 'small':
      return getBodyTextStyles({
        themeProps: theme,
        mono: false,
        size: 'medium',
        weight: 'regular',
      });

    case 'medium':
    default:
      return getHeadingTextStyles({
        themeProps: theme,
        size: 'xSmall',
        weight: 'bold',
      });
  }
}

export const renderResponsiveLabelStyles = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<MenuItemSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: renderLabelStyles,
  });

export function renderCaptionSx({
  size,
  theme,
}: {
  size: MenuItemSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'xSmall':
      return getBodyTextStyles({
        themeProps: theme,
        mono: false,
        size: 'xxSmall',
        weight: 'regular',
      });

    case 'small':
    case 'medium':
    default:
      return getBodyTextStyles({
        themeProps: theme,
        mono: false,
        size: 'xSmall',
        weight: 'regular',
      });
  }
}

export const renderResponsiveCaptionSx = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<MenuItemSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: renderCaptionSx,
  });

export const baseShimmerOuterSx = {
  position: 'relative',
  w: '100%',
};

export function renderShimmerOuterStyles({ size }: { size: MenuItemSize }) {
  switch (size) {
    case 'xSmall':
      return { height: '50px', borderRadius: 'base.borderRadius.x4' };

    case 'small':
      return { height: '72px', borderRadius: 'base.borderRadius.x6' };

    case 'medium':
    default:
      return { height: '96px', borderRadius: 'base.borderRadius.x6' };
  }
}

export const renderResponsiveOuterStyles = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<MenuItemSize>;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: renderShimmerOuterStyles,
  });

export const shimmerLeftMaskSx = {
  display: 'block',
  width: '60%',
  height: '100%',
  WebkitMaskPosition: 'left center',
  WebkitMaskRepeat: 'no-repeat',
  WebkitMaskSize: 'contain',
};

export const shimmerRightMaskSx = {
  position: 'absolute',
  width: '40%',
  height: '100%',
  top: '0',
  right: '0',
  display: 'block',
  WebkitMaskPosition: 'right center',
  WebkitMaskRepeat: 'no-repeat',
  WebkitMaskSize: 'contain',
};

export function getFramedContainerSx({
  size,
  theme: { base },
}: {
  size: MenuItemSize;
  theme: BiomeTheme;
}): Properties {
  switch (size) {
    case 'xSmall':
      return {
        width: base.icon.size[400],
        height: base.icon.size[400],
      };

    case 'small':
    case 'medium':
    default:
      return {
        width: base.icon.size[500],
        height: base.icon.size[500],
      };
  }
}

export const getResponsiveFramedContainerSx = (props: {
  size: MakeResponsive<MenuItemSize>;
  theme: BiomeTheme;
}) => getResponsiveSx({ ...props, renderSxAtSize: getFramedContainerSx });
