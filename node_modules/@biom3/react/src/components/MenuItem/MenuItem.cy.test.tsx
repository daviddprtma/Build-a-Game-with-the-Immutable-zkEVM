/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/click-events-have-key-events */
import {
  designTokens,
  onLightBase,
  smartPickTokenValue,
} from '@biom3/design-tokens';
import NextLink from 'next/link';

import { MockNextRouter } from '../../mocks';
import { hexToRgbString } from '../../utils/colorHelpers';
import { ETH_TOKEN_IMAGE_URL } from '../../utils/dummyImages';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { Icon } from '../Icon';
import { Tooltip } from '../Tooltip';
import { MenuItem } from './MenuItem';

const TEST_FIXTURE = (
  <MenuItem testId="moo">
    <MenuItem.Icon icon="Discord" />
    <MenuItem.Label testId="label">moo cow</MenuItem.Label>
  </MenuItem>
);

describe('<MenuItem />', () => {
  it('should have correct displayName', () => {
    expect(MenuItem.displayName).to.eq('MenuItem');
  });

  it('should correctly forward the MenuItem domRef', () => {
    const domRefStub = cy.stub().as('domRefStub');
    cyMountWithProviders(
      <MenuItem domRef={domRefStub} testId="moo">
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'ARTICLE',
      innerHTML: Cypress.sinon.match('moo cow'),
    });
  });

  it(`should correctly render an <article> tag, by default`, () => {
    cyMountWithProviders(TEST_FIXTURE);
    cySmartGet('moo').its('0.nodeName').should('eq', 'ARTICLE');
  });

  it('should render as an <div> tag when there is an onclick prop provided, but the MenuItem contains clickable components inside it', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" onClick={() => console.log('@@@@@@')}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.StatefulButtCon icon="AirDrop" />
      </MenuItem>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
  });

  it(`should correctly render a <button> tag, when onClick is passed (but no clickables are contained within)`, () => {
    cyMountWithProviders(
      <MenuItem testId="moo" onClick={() => console.log('@@@@@2')}>
        <MenuItem.Icon icon="Discord" />
        <MenuItem.Label testId="label">moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'BUTTON');
  });

  it('should render as a <a> tag when neccissary', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" rc={<a href="/moo" />}>
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
  });

  it('should render as a <div> (with hover FX), when there is an internal clickable used, AND an onClick prop', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" onClick={cy.stub()}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.StatefulButtCon icon="Add" />
      </MenuItem>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cySmartGet('moo').realHover();
    cySmartGet('moo').should(
      'have.css',
      'box-shadow',
      'rgba(0, 0, 0, 0.16) 0px 2px 6px 2px, rgba(0, 0, 0, 0.32) 0px 1px 2px 0px',
    );
  });

  it('should still allow onClick prop, when there is an internal clickable used', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <MenuItem testId="moo" onClick={onClickStub}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.StatefulButtCon icon="Add" />
      </MenuItem>,
    );
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should allow onClick prop to be passed through, when its used on an <a> inside rc', () => {
    const onClickStub = cy.stub().as('onClickStub');
    cyMountWithProviders(
      <MenuItem testId="moo" rc={<a onClick={onClickStub} />}>
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('@onClickStub').should('not.have.been.calledOnce');
    cySmartGet('moo').click();
    cySmartGet('@onClickStub').should('have.been.calledOnce');
  });

  it('should NOT fire the root onClick, when an internal clickable (StatefulButtCon) is clicked', () => {
    const outerOnClickStub = cy.stub().as('outerOnClickStub');
    const innerOnClickStub = cy.stub().as('innerOnClickStub');
    cyMountWithProviders(
      <MenuItem onClick={outerOnClickStub}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.StatefulButtCon
          icon="Add"
          onClick={innerOnClickStub}
          testId="innerButton"
        />
      </MenuItem>,
    );
    cySmartGet('@outerOnClickStub').should('not.have.been.called');
    cySmartGet('@innerOnClickStub').should('not.have.been.called');
    cySmartGet('innerButton').click();
    cySmartGet('@outerOnClickStub').should('not.have.been.called');
    cySmartGet('@innerOnClickStub').should('have.been.calledOnce');
  });

  it('should NOT fire the root onClick, when an internal clickable (OverflowPopoverMenu) is clicked', () => {
    const outerOnClickStub = cy.stub().as('outerOnClickStub');
    cyMountWithProviders(
      <MenuItem onClick={outerOnClickStub}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.OverflowPopoverMenu testId="innerButton">
          <MenuItem>
            <MenuItem.Label>mooo</MenuItem.Label>
          </MenuItem>
          <MenuItem>
            <MenuItem.Label>cow</MenuItem.Label>
          </MenuItem>
        </MenuItem.OverflowPopoverMenu>
      </MenuItem>,
      { useAllProviders: true },
    );
    cySmartGet('@outerOnClickStub').should('not.have.been.called');
    cySmartGet('innerButton').click();
    cySmartGet('@outerOnClickStub').should('not.have.been.called');
  });

  it(`should render as a <a> tag when neccissary, even when there are internal clickables used`, () => {
    cyMountWithProviders(
      <MenuItem testId="moo" rc={<a href="/moo" />}>
        <MenuItem.Label>moo cow</MenuItem.Label>
        <MenuItem.StatefulButtCon icon="Add" />
      </MenuItem>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
  });

  it(`should allow next/link component to be rendered`, () => {
    const onPushStub = cy.stub().as('onPushStub');
    cyMountWithProviders(
      <MockNextRouter pushStub={onPushStub}>
        <MenuItem testId="moo" rc={<NextLink href="/moo/cow" />}>
          <MenuItem.Label>moo cow</MenuItem.Label>
        </MenuItem>
      </MockNextRouter>,
    );
    cySmartGet('moo').its('0.nodeName').should('eq', 'A');
    cySmartGet('moo').click();
    cySmartGet('@onPushStub').should('have.been.calledWith', '/moo/cow');
  });

  it('should render anything including subcomponent children', () => {
    cyMountWithProviders(
      <MenuItem>
        <div data-testid="not-a-subcomponent">some other text</div>
      </MenuItem>,
    );
    cySmartGet('not-a-subcomponent').should('exist');

    cyMountWithProviders(
      <MenuItem>
        <>how now brown cow</>
      </MenuItem>,
    );
    cy.contains('how now brown cow').should('exist');

    cyMountWithProviders(
      <MenuItem>
        <Icon icon="Discord" testId="moo" />
      </MenuItem>,
    );
    cySmartGet('moo').should('exist');

    cyMountWithProviders(
      <MenuItem>
        <MenuItem.Label testId="moo">moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo').should('exist');
  });

  it('should "emphasize" the menuItem, when neccissary', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" emphasized>
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );
  });

  it('should align text to the left by default', () => {
    cyMountWithProviders(
      <MenuItem testId="moo">
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-start');
  });

  it('should render with right aligned text, when neccissary', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" textAlign="right">
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo')
      .find('.innerTextContainer')
      .should('have.css', 'align-items', 'flex-end');
  });

  it('should render a "selected" GUI state, when neccissary', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" selected>
        <MenuItem.Label>moo cow</MenuItem.Label>
      </MenuItem>,
    );
    cySmartGet('moo').should(
      'have.backgroundColor',
      smartPickTokenValue(
        { base: onLightBase },
        'base.color.translucent.emphasis.200',
      ),
    );
    cySmartGet('moo')
      .should('have.css', 'border-width', '2px')
      .and(
        'have.css',
        'border-color',
        hexToRgbString(
          smartPickTokenValue(
            { base: onLightBase },
            'base.color.translucent.standard.1000',
          ),
        ),
      );
  });

  it('should render the menuItem in "medium" sizing by default', () => {
    cyMountWithProviders(
      <MenuItem testId="moo">
        <MenuItem.Icon icon="Discord" />
      </MenuItem>,
    );

    cySmartGet('moo').should('have.css', 'padding-top', '22px');
  });

  it('should render the menuItem in "small" sizing, when neccissary', () => {
    cyMountWithProviders(
      <MenuItem testId="moo" size="small">
        <MenuItem.Icon icon="Discord" />
      </MenuItem>,
    );

    cySmartGet('moo').should('have.css', 'padding-top', '10px');
  });

  it('should responsively change the size of the menuItem, when neccissary', () => {
    cy.viewport(onLightBase.breakpoint.small - 10, 200);
    cyMountWithProviders(
      <MenuItem testId="moo" size={['small', null, 'medium']}>
        <MenuItem.Icon icon="Discord" />
      </MenuItem>,
    );

    cySmartGet('moo').should('have.css', 'padding-top', '10px');

    cy.viewport(onLightBase.breakpoint.medium, 200);

    cySmartGet('moo').should('have.css', 'padding-top', '22px');
  });
  /*








  */
  context('Shimmer', () => {
    it('should NOT render the shimmer state by default', () => {
      cyMountWithProviders(<MenuItem testId="moo" />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').should('not.exist');
    });

    it('should render the shimmer state, when shimme prop is true', () => {
      cyMountWithProviders(<MenuItem shimmer testId="moo" />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').should('exist').and('be.visible');
      cySmartGet('moo__shimmer__rightMask__shimmer').should('be.visible');
      cySmartGet('moo__shimmer__rightMask__shimmer').should(
        'have.css',
        'background-image',
      );
    });

    it('should not allow onClick props when the shimmer is active', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <MenuItem testId="moo" shimmer onClick={onClickStub} />,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('@onClickStub').should('not.have.been.called');
      cySmartGet('moo__shimmer').click();
      cySmartGet('@onClickStub').should('not.have.been.called');
    });

    it('should accept rc prop, even while shimmer prop is active', () => {
      cyMountWithProviders(<MenuItem testId="moo" shimmer rc={<section />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').its('0.nodeName').should('eq', 'SECTION');

      cyMountWithProviders(<MenuItem testId="moo" shimmer rc={<article />} />, {
        useAllProviders: true,
      });

      cySmartGet('moo__shimmer').its('0.nodeName').should('eq', 'ARTICLE');
    });

    it('should allow parent component to pass in sx for the shimmer state', () => {
      cyMountWithProviders(
        <MenuItem testId="moo" shimmer shimmerSx={{ bg: 'gold' }} />,
        {
          useAllProviders: true,
        },
      );

      cySmartGet('moo__shimmer').should('have.backgroundColor', 'gold');
    });
  });

  /*








  */

  context('Subcomponents', () => {
    it('should render the <MenuItem.Icon /> subcomponent', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Icon icon="Discord" testId="icon" />
        </MenuItem>,
      );
      cySmartGet('icon').should(
        'have.fillColor',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.primary'),
      );
    });

    it('should render the <MenuItem.IntentIcon /> subcomponent', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.IntentIcon testId="intentIcon" />
        </MenuItem>,
      );
      cySmartGet('intentIcon').should(
        'have.fillColor',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.secondary'),
      );
    });

    it('should render the <MenuItem.Label /> subcomponent', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Label testId="label">moo cow</MenuItem.Label>
        </MenuItem>,
      );
      cySmartGet('label').should(
        'have.color',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.primary'),
      );
    });

    it('should correctly render the <MenuItem.Caption /> subcomponent', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Caption testId="caption">moo cow</MenuItem.Caption>
        </MenuItem>,
      );
      cySmartGet('caption').should(
        'have.color',
        smartPickTokenValue({ base: onLightBase }, 'base.color.text.secondary'),
      );
    });

    it('should correctly render the <MenuItem.Badge /> subcomponent', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Badge testId="badge" />
        </MenuItem>,
      );
      cySmartGet('badge').should('exist').and('be.visible');
    });

    it('should allow sx to be passed through to all subcomponents', () => {
      cyMountWithProviders(
        <MenuItem sx={{ bg: 'gold' }} testId="moo">
          <MenuItem.Icon icon="Cart" sx={{ bg: 'gold' }} />
          <MenuItem.IntentIcon sx={{ bg: 'gold' }} />
          <MenuItem.Label sx={{ bg: 'gold' }}>Some label text</MenuItem.Label>
          <MenuItem.Caption sx={{ bg: 'gold' }}>
            Some caption text
          </MenuItem.Caption>
          <MenuItem.Badge sx={{ bg: 'gold' }} />
          <MenuItem.PriceDisplay price="1.2345" sx={{ bg: 'gold' }} />
          <MenuItem.StatefulButtCon icon="AirDrop" sx={{ bg: 'gold' }} />
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('moo').should('have.backgroundColor', 'gold');
      cySmartGet('moo__icon').should('have.backgroundColor', 'gold');
      cySmartGet('moo__label').should('have.backgroundColor', 'gold');
      cySmartGet('moo__caption').should('have.backgroundColor', 'gold');
      cySmartGet('moo__intentIcon').should('have.backgroundColor', 'gold');
      cySmartGet('moo__badge').should('have.backgroundColor', 'gold');
      cySmartGet('moo__statefulButtCon').should('have.backgroundColor', 'gold');
      cySmartGet('moo__priceDisplay').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <MenuItem testId="moo">
          <MenuItem.FramedIcon icon="Add" sx={{ bg: 'gold' }} />
        </MenuItem>,
      );

      cySmartGet('moo__framedIcon').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <MenuItem testId="moo">
          <MenuItem.FramedImage
            imageUrl="https://placekitten.com/200/150"
            sx={{ bg: 'gold' }}
          />
        </MenuItem>,
      );

      cySmartGet('moo__framedImage').should('have.backgroundColor', 'gold');

      cyMountWithProviders(
        <MenuItem testId="moo">
          <MenuItem.FramedLogo logo="PassportSymbol" sx={{ bg: 'gold' }} />
        </MenuItem>,
      );

      cySmartGet('moo__framedLogo').should('have.backgroundColor', 'gold');
    });

    it(`should allow fontSizes for caption subcomponents to be any of MenuItem's size tokens`, () => {
      cyMountWithProviders(
        <MenuItem size="medium">
          <MenuItem.Caption testId="caption">caption</MenuItem.Caption>
        </MenuItem>,
      );
      cySmartGet('caption').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.xSmall.regular.fontSize',
        ),
      );

      cyMountWithProviders(
        <MenuItem size="xSmall">
          <MenuItem.Caption testId="caption">caption</MenuItem.Caption>
        </MenuItem>,
      );
      cySmartGet('caption').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.xxSmall.regular.fontSize',
        ),
      );
    });

    it(`should allow size prop for label subcomponents to be any of MenuItem's size tokens`, () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Label testId="label" size="small">
            caption
          </MenuItem.Label>
        </MenuItem>,
      );
      cySmartGet('label').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.body.medium.regular.fontSize',
        ),
      );
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Label testId="label" size="medium">
            caption
          </MenuItem.Label>
        </MenuItem>,
      );
      cySmartGet('label').should(
        'have.css',
        'font-size',
        smartPickTokenValue(
          { base: onLightBase },
          'base.text.heading.xSmall.regular.fontSize',
        ),
      );
    });

    it(`should correctly forward domRef for all subcomponents`, () => {
      cyMountWithProviders(
        <MenuItem.FramedLogo
          logo="PassportSymbol"
          domRef={cy.stub().as('framedLogoRef')}
        />,
      );
      cySmartGet('@framedLogoRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.Icon icon="Cart" domRef={cy.stub().as('iconRef')} />,
      );
      cySmartGet('@iconRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });

      cyMountWithProviders(
        <MenuItem.FramedIcon
          icon="Cart"
          domRef={cy.stub().as('framedIconRef')}
        />,
      );
      cySmartGet('@framedIconRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.FramedImage
          imageUrl="https://placekitten.com/200/150"
          domRef={cy.stub().as('framedImageRef')}
        />,
      );
      cySmartGet('@framedImageRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.PriceDisplay
          price="1.234"
          domRef={cy.stub().as('priceDisplayRef')}
        />,
        { useAllProviders: true },
      );
      cySmartGet('@priceDisplayRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.OverflowDrawerMenu
          domRef={cy.stub().as('overflowDrawerMenuRef')}
        >
          <MenuItem>
            <MenuItem.Label>moo</MenuItem.Label>
          </MenuItem>
        </MenuItem.OverflowDrawerMenu>,
        { useAllProviders: true },
      );
      cySmartGet('@overflowDrawerMenuRef').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });

      cyMountWithProviders(
        <MenuItem.OverflowPopoverMenu
          domRef={cy.stub().as('overflowPopoverMenuRef')}
        >
          <MenuItem>
            <MenuItem.Label>moo</MenuItem.Label>
          </MenuItem>
        </MenuItem.OverflowPopoverMenu>,
        { useAllProviders: true },
      );
      cySmartGet('@overflowPopoverMenuRef').should(
        'have.been.calledWithMatch',
        {
          nodeName: 'BUTTON',
        },
      );

      cyMountWithProviders(
        <MenuItem.Label domRef={cy.stub().as('labelRef')}>
          some text
        </MenuItem.Label>,
      );
      cySmartGet('@labelRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.Caption domRef={cy.stub().as('captionRef')}>
          some text
        </MenuItem.Caption>,
      );
      cySmartGet('@captionRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.StatefulButtCon
          icon="AirDrop"
          domRef={cy.stub().as('statefulButtConRef')}
        />,
        { useAllProviders: true },
      );
      cySmartGet('@statefulButtConRef').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });

      cyMountWithProviders(
        <MenuItem.Badge domRef={cy.stub().as('badgeRef')} />,
        { useAllProviders: true },
      );
      cySmartGet('@badgeRef').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      cyMountWithProviders(
        <MenuItem.IntentIcon domRef={cy.stub().as('intentIconRef')} />,
        { useAllProviders: true },
      );
      cySmartGet('@intentIconRef').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });
    });

    it('should render only <FramedLogo /> when <FramedLogo />, <FramedImage />, <MenuItem.Icon />, <MenuItem.FramedIcon />, <MenuItem.FramedImage /> subcomponents are all supplied', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedLogo logo="PassportSymbol" testId="framedLogo" />
          <MenuItem.Icon icon="Cart" testId="icon" />
          <MenuItem.FramedIcon icon="Cart" testId="framedIcon" />
          <MenuItem.FramedImage
            testId="framedImage"
            imageUrl="https://placekitten.com/200/150"
            sx={{ bg: 'gold' }}
          />
        </MenuItem>,
      );
      cySmartGet('icon').should('not.exist');
      cySmartGet('framedIcon').should('not.exist');
      cySmartGet('framedImage').should('not.exist');
      cySmartGet('framedLogo').should('exist');
    });

    it('should render only <FramedIcon /> when <MenuItem.Icon />, <MenuItem.FramedIcon /> subcomponents are all supplied', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Icon icon="Cart" testId="icon" />
          <MenuItem.FramedIcon icon="Cart" testId="framedIcon" />
        </MenuItem>,
      );
      cySmartGet('icon').should('not.exist');
      cySmartGet('framedIcon').should('exist');
    });

    it('should allow IntentIcon to be anything other than ChevronForward', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.IntentIcon icon="Cart" testId="icon" />
        </MenuItem>,
      );
      cySmartGet('svg path').should(
        'have.attr',
        'd',
        'M15.55 13C16.3 13 16.96 12.59 17.3 11.97L20.88 5.48C21.25 4.82 20.77 4 20.01 4H5.21L4.27 2H1V4H3L6.6 11.59L5.25 14.03C4.52 15.37 5.48 17 7 17H19V15H7L8.1 13H15.55ZM6.16 6H18.31L15.55 11H8.53L6.16 6ZM7 18C5.9 18 5.01 18.9 5.01 20C5.01 21.1 5.9 22 7 22C8.1 22 9 21.1 9 20C9 18.9 8.1 18 7 18ZM17 18C15.9 18 15.01 18.9 15.01 20C15.01 21.1 15.9 22 17 22C18.1 22 19 21.1 19 20C19 18.9 18.1 18 17 18Z',
      );
    });

    it('should correctly render MenuItem.PriceDisplay, when neccissary', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.PriceDisplay
            testId="moo"
            price="122345678"
            fiatAmount="USD $12345"
          />
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('moo__fiatAmount')
        .should('exist')
        .and('include.text', 'USD $12,345');
    });

    it('should correctly render <MenuItem.OverflowPopoverMenu />, when neccissary', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.OverflowPopoverMenu testId="moo">
            <MenuItem testId="popoverMenuItem1">
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
          </MenuItem.OverflowPopoverMenu>
        </MenuItem>,
        { useAllProviders: true },
      );

      cySmartGet('moo').should('exist');
      cySmartGet('popoverMenuItem1').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('popoverMenuItem1').should('exist');
    });

    it('should correctly pass though sx and onClick props to <MenuItem.OverflowPopoverMenu /> children, when neccissary', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.OverflowPopoverMenu testId="moo">
            <MenuItem
              testId="popoverMenuItem1"
              sx={{ bg: 'gold' }}
              onClick={onClickStub}
            >
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
          </MenuItem.OverflowPopoverMenu>
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('moo').click();
      cySmartGet('popoverMenuItem1').should('have.backgroundColor', 'gold');
      cySmartGet('@onClickStub').should('not.have.been.calledOnce');
      cySmartGet('popoverMenuItem1').click();
      cySmartGet('@onClickStub').should('have.been.calledOnce');
    });

    it('should close an open <MenuItem.OverflowPopoverMenu />, when a menu item (which contains an onClick prop) is clicked', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.OverflowPopoverMenu testId="moo">
            <MenuItem
              testId="popoverMenuItem1"
              onClick={() => console.log('CLICKED')}
            >
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>Some Label text</MenuItem.Label>
            </MenuItem>
          </MenuItem.OverflowPopoverMenu>
        </MenuItem>,
        { useAllProviders: true },
      );

      cySmartGet('moo').should('exist');
      cySmartGet('popoverMenuItem1').should('not.exist');
      cySmartGet('moo').click();
      cySmartGet('popoverMenuItem1').should('exist');
      cySmartGet('popoverMenuItem1').click();
      cySmartGet('popoverMenuItem1').should('not.exist');
    });

    it('should render FramedImage with standard borderRadius by default', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedIcon"
          />
        </MenuItem>,
      );
      cySmartGet('framedIcon')
        .should('exist')
        .and('have.css', 'border-radius', '4px');
    });

    it('should allow FramedImage to be framed inside a circle, when neccissary', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedIcon"
            circularFrame
          />
        </MenuItem>,
      );
      cySmartGet('framedIcon')
        .should('exist')
        .and('have.css', 'border-radius', '50%');
    });

    it('should render FramedIcon with "bold" icon, when neccissary', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedIcon icon="Cart" testId="framedIcon" variant="bold" />
        </MenuItem>,
      );

      cySmartGet('framedIcon')
        .find('svg')
        .should('have.attr', 'data-variant', 'bold');
    });

    it('should not squish specific sub-component items, when the Label field is really long', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedImage
            imageUrl={ETH_TOKEN_IMAGE_URL}
            testId="framedImage"
            circularFrame
          />
          <MenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.StatefulButtCon icon="Add" testId="buttcon" />
        </MenuItem>,
      );

      cySmartGet('framedImage').should('have.css', 'width', '48px');
      cySmartGet('buttcon').should('have.css', 'width', '32px');
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedIcon icon="Add" testId="framedIcon" />
          <MenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.IntentIcon testId="intentIcon" />
        </MenuItem>,
      );
      cySmartGet('framedIcon').should('have.css', 'width', '48px');
      cySmartGet('intentIcon').should('have.css', 'width', '16px');

      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedLogo logo="MetaMaskSymbol" testId="framedLogo" />
          <MenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.OverflowPopoverMenu testId="overflowMenu">
            <MenuItem>
              <MenuItem.Label>mooo</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>mooo</MenuItem.Label>
            </MenuItem>
          </MenuItem.OverflowPopoverMenu>
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('framedLogo').should('have.css', 'width', '48px');
      cySmartGet('overflowMenu').should('have.css', 'width', '32px');

      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Icon icon="Add" testId="icon" />
          <MenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.OverflowDrawerMenu testId="overflowMenu">
            <MenuItem>
              <MenuItem.Label>mooo</MenuItem.Label>
            </MenuItem>
            <MenuItem>
              <MenuItem.Label>mooo</MenuItem.Label>
            </MenuItem>
          </MenuItem.OverflowDrawerMenu>
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('icon').should('have.css', 'width', '24px');
      cySmartGet('overflowMenu').should('have.css', 'width', '32px');

      cyMountWithProviders(
        <MenuItem>
          <MenuItem.Icon icon="Add" testId="icon" />
          <MenuItem.Label>
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.PriceDisplay price="some text here" testId="priceDisplay" />
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('icon').should('have.css', 'width', '24px');
      cySmartGet('priceDisplay')
        .should('have.css', 'width')
        .then(width => {
          expect(parseInt(width, 10)).to.be.within(119, 120);
        });
    });

    it('should apply line clamping by default, to handle when MenuItem.Label is really long', () => {
      cyMountWithProviders(
        <MenuItem>
          <MenuItem.FramedImage imageUrl={ETH_TOKEN_IMAGE_URL} circularFrame />
          <MenuItem.Label testId="moo">
            ldkas jasdlkjadslkjadskjhadskj adsjhadslkjh adlskjh ladjkslkjads
            lkad hlklka lk lkajd alkds adls adlskh aldh alkjhadsl dasljk
            asdlkhadsklj h daskjlhadslkjh ads lkjhadslkjh adslkjhasdlkjh
          </MenuItem.Label>
          <MenuItem.Caption>moo cow</MenuItem.Caption>
          <MenuItem.StatefulButtCon icon="Add" />
        </MenuItem>,
      );

      cySmartGet('moo').should('have.css', 'height', '48px');
    });

    it(`should correctly render PriceDisplay even when the MenuItem's size is "xSmall"`, () => {
      cyMountWithProviders(
        <MenuItem size="xSmall">
          <MenuItem.PriceDisplay price="some text here" testId="priceDisplay" />
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('priceDisplay').should('include.text', 'some text here');
    });

    it('should still render a sub-component, even when it is wrapped by a Tooltip component', () => {
      cyMountWithProviders(
        <MenuItem size="xSmall">
          <Tooltip>
            <Tooltip.Target>
              <MenuItem.StatefulButtCon icon="AirDrop" testId="buttcon" />
            </Tooltip.Target>
            <Tooltip.Content>mooo</Tooltip.Content>
          </Tooltip>
        </MenuItem>,
        { useAllProviders: true },
      );
      cySmartGet('buttcon').should('exist');
    });
  });
});
