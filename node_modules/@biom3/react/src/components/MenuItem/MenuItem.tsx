import { ClassNames } from '@emotion/react';
import { ReactElement, useEffect, useState } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetSubcomponentChild,
  useGetSubcomponentChildren,
  useSplitApartChildrenAndSubComponents,
  useTheme,
} from '../../hooks';
import {
  isBaseClickable,
  isBox,
  MenuItemContentProps,
  MenuItemProps,
} from '../../types/clickable';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { BaseClickable } from '../Clickable';
import { SmartClone } from '../SmartClone';
import { Stack } from '../Stack';
import { DEFAULT_TEXT_INPUT_ALIGN } from '../TextInput';
import { MenuItemBadge } from './MenuItemBadge';
import { MenuItemCaption } from './MenuItemCaption';
import { MenuItemFramedIcon } from './MenuItemFramedIcon';
import { MenuItemFramedImage } from './MenuItemFramedImage';
import { MenuItemFramedLogo } from './MenuItemFramedLogo';
import { MenuItemIcon } from './MenuItemIcon';
import { MenuItemIntentIcon } from './MenuItemIntentIcon';
import { MenuItemLabel } from './MenuItemLabel';
import { MenuItemOverflowDrawerMenu } from './MenuItemOverflowDrawerMenu';
import { MenuItemOverflowPopoverMenu } from './MenuItemOverflowPopoverMenu';
import { MenuItemPriceDisplay } from './MenuItemPriceDisplay';
import { MenuItemShimmer } from './MenuItemShimmer';
import { MenuItemStatefulButtCon } from './MenuItemStatefulButtCon';
import { DEFAULT_MENU_ITEM_SIZE, MENU_ITEM_SIZES } from './shared';
import {
  baseStyles,
  innerTextContainerSxProps,
  renderResponsiveStyles,
  renderSizeBasedStyles,
} from './styles';

function MenuItemContent<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
>({
  testId,
  className,
  children,
  emphasized,
  selected,
  sx = {},
  rc,
  size = DEFAULT_MENU_ITEM_SIZE,
  controlledHover,
  textAlign = DEFAULT_TEXT_INPUT_ALIGN,
  ...otherProps
}: MenuItemContentProps<RC, OnClick>) {
  const { onClick } =
    'onClick' in otherProps ? otherProps : { ...otherProps, onClick: null };
  const theme = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_MENU_ITEM_SIZE,
    MENU_ITEM_SIZES,
  );

  const allStyles = merge(
    {},
    baseStyles,
    renderSizeBasedStyles({ size: startingSize, theme }),
    renderResponsiveStyles({
      size,
      theme,
    }),
    sx,
  );

  const icon = useGetSubcomponentChild(children, MenuItemIcon);
  const framedIcon = useGetSubcomponentChild(children, MenuItemFramedIcon);
  const framedImage = useGetSubcomponentChild(children, MenuItemFramedImage);
  const framedLogo = useGetSubcomponentChild(children, MenuItemFramedLogo);
  const label = useGetSubcomponentChild(children, MenuItemLabel);
  const caption = useGetSubcomponentChild(children, MenuItemCaption);
  const intentIcon = useGetSubcomponentChild(children, MenuItemIntentIcon);
  const badge = useGetSubcomponentChild(children, MenuItemBadge);
  const priceDisplay = useGetSubcomponentChild(children, MenuItemPriceDisplay);
  const popoverMenu = useGetSubcomponentChild(
    children,
    MenuItemOverflowPopoverMenu,
  );
  const drawerMenu = useGetSubcomponentChild(
    children,
    MenuItemOverflowDrawerMenu,
  );
  const statefulButtCons = useGetSubcomponentChildren(
    children,
    MenuItemStatefulButtCon,
  );

  const { otherChildren } = useSplitApartChildrenAndSubComponents(children, [
    MenuItemIcon,
    MenuItemFramedIcon,
    MenuItemFramedImage,
    MenuItemFramedLogo,
    MenuItemLabel,
    MenuItemCaption,
    MenuItemIntentIcon,
    MenuItemBadge,
    MenuItemPriceDisplay,
    MenuItemOverflowPopoverMenu,
    MenuItemOverflowDrawerMenu,
    MenuItemStatefulButtCon,
  ]);
  const baseClickableProps = { ...otherProps, onClick, rc };
  const boxProps = { ...otherProps, onClick };
  const containsClickables =
    Boolean(Array.isArray(statefulButtCons) && statefulButtCons.length) ||
    Boolean(popoverMenu) ||
    Boolean(drawerMenu);
  const [isHovering, setIsHovering] = useState<boolean>(false);
  useEffect(() => {
    if (typeof controlledHover === 'undefined') return;
    setIsHovering(controlledHover);
  }, [controlledHover]);

  const innerContents = (
    <>
      {framedLogo ? (
        <SmartClone
          testId={framedLogo.props.testId || `${testId}__framedLogo`}
          size={size}
        >
          {framedLogo}
        </SmartClone>
      ) : framedImage ? (
        <SmartClone
          size={size}
          testId={framedImage.props.testId || `${testId}__framedImage`}
        >
          {framedImage}
        </SmartClone>
      ) : framedIcon ? (
        <SmartClone
          testId={framedIcon.props.testId || `${testId}__framedIcon`}
          size={size}
        >
          {framedIcon}
        </SmartClone>
      ) : icon ? (
        <SmartClone testId={icon.props.testId || `${testId}__icon`}>
          {icon}
        </SmartClone>
      ) : null}

      <Box
        rc={<span />}
        sx={merge(innerTextContainerSxProps, {
          alignItems: textAlign === 'left' ? 'flex-start' : 'flex-end',
        })}
        className="innerTextContainer"
      >
        {label && (
          <SmartClone
            testId={label.props.testId || `${testId}__label`}
            size={size}
          >
            {label}
          </SmartClone>
        )}

        {caption && (
          <SmartClone
            testId={caption.props.testId || `${testId}__caption`}
            size={size}
          >
            {caption}
          </SmartClone>
        )}
      </Box>

      {priceDisplay ||
      statefulButtCons ||
      drawerMenu ||
      popoverMenu ||
      badge ||
      intentIcon ? (
        <Box
          sx={{
            d: 'flex',
            gap: 'base.spacing.x2',
            alignItems: 'center',
            flexShrink: 0,
          }}
          rc={<span />}
        >
          {priceDisplay && (
            <SmartClone
              testId={priceDisplay.props.testId || `${testId}__priceDisplay`}
              size={size}
            >
              {priceDisplay}
            </SmartClone>
          )}

          {statefulButtCons &&
            statefulButtCons.map((statefulButtCon, index) => (
              <SmartClone
                // eslint-disable-next-line react/no-array-index-key
                key={`statefulButtCon-${index}`}
                testId={
                  statefulButtCon.props.testId || `${testId}__statefulButtCon`
                }
              >
                {statefulButtCon}
              </SmartClone>
            ))}

          {drawerMenu ? (
            <SmartClone
              testId={drawerMenu.props.testId || `${testId}__drawerMenu`}
            >
              {drawerMenu}
            </SmartClone>
          ) : popoverMenu ? (
            <SmartClone
              testId={popoverMenu.props.testId || `${testId}__popoverMenu`}
            >
              {popoverMenu}
            </SmartClone>
          ) : null}

          {(badge || intentIcon) && (
            <Stack
              direction="row"
              alignItems="center"
              gap="base.spacing.x1"
              rc={<span />}
            >
              {badge && (
                <SmartClone testId={badge.props.testId || `${testId}__badge`}>
                  {badge}
                </SmartClone>
              )}

              {intentIcon && (
                <SmartClone
                  testId={intentIcon.props.testId || `${testId}__intentIcon`}
                >
                  {intentIcon}
                </SmartClone>
              )}
            </Stack>
          )}
        </Box>
      ) : null}
      {otherChildren}
    </>
  );

  return (
    <ClassNames>
      {({ cx }) =>
        isBaseClickable(onClick, rc, containsClickables, baseClickableProps) ? (
          <BaseClickable
            {...(!controlledHover
              ? {
                  onMouseEnter: () => setIsHovering(true),
                  onMouseLeave: () => setIsHovering(false),
                }
              : {})}
            {...baseClickableProps}
            testId={testId}
            className={cx(
              { selected, emphasized, hover: isHovering },
              `${className ?? ''} MenuItem`,
            )}
            sx={allStyles}
          >
            {innerContents}
          </BaseClickable>
        ) : isBox(onClick, rc, containsClickables, boxProps) ? (
          <Box
            {...(!controlledHover
              ? {
                  onMouseEnter: () => setIsHovering(true),
                  onMouseLeave: () => setIsHovering(false),
                }
              : {})}
            {...boxProps}
            rc={onClick ? <div /> : <article />}
            testId={testId}
            className={cx(
              { selected, emphasized, hover: isHovering },
              `${className ?? ''} MenuItem`,
            )}
            sx={allStyles}
          >
            {innerContents}
          </Box>
        ) : null
      }
    </ClassNames>
  );
}

export function MenuItem<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
>({
  shimmer = false,
  size = DEFAULT_MENU_ITEM_SIZE,
  rc,
  testId,
  className,
  children,
  emphasized,
  selected,
  domRef,
  sx = {},
  shimmerSx = {},
  controlledHover,
  textAlign,
  ...otherProps
}: MenuItemProps<RC, OnClick>) {
  return shimmer ? (
    <MenuItemShimmer
      size={size}
      rc={rc}
      testId={`${testId}__shimmer`}
      className={className}
      emphasized={emphasized}
      sx={shimmerSx}
    />
  ) : (
    <MenuItemContent
      {...otherProps}
      controlledHover={controlledHover}
      rc={rc}
      size={size}
      testId={testId}
      className={className}
      emphasized={emphasized}
      selected={selected}
      sx={sx}
      domRef={domRef}
      textAlign={textAlign}
    >
      {children}
    </MenuItemContent>
  );
}

MenuItem.displayName = 'MenuItem';
MenuItem.Icon = MenuItemIcon;
MenuItem.FramedIcon = MenuItemFramedIcon;
MenuItem.FramedImage = MenuItemFramedImage;
MenuItem.FramedLogo = MenuItemFramedLogo;
MenuItem.Label = MenuItemLabel;
MenuItem.IntentIcon = MenuItemIntentIcon;
MenuItem.PriceDisplay = MenuItemPriceDisplay;
MenuItem.Caption = MenuItemCaption;
MenuItem.Badge = MenuItemBadge;
MenuItem.OverflowPopoverMenu = MenuItemOverflowPopoverMenu;
MenuItem.OverflowDrawerMenu = MenuItemOverflowDrawerMenu;
MenuItem.StatefulButtCon = MenuItemStatefulButtCon;
