import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { MenuItemProps } from '../../types/clickable';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box, BoxProps } from '../Box';
import { Logo, LogoProps } from '../Logo';
import { DEFAULT_MENU_ITEM_SIZE, MENU_ITEM_SIZES } from './shared';
import {
  baseFramedIconStyles,
  getFramedContainerSx,
  getResponsiveFramedContainerSx,
} from './styles';

export type MenuItemFramedLogoProps = BoxProps &
  Pick<LogoProps, 'logo'> &
  Pick<MenuItemProps, 'size'> & { circularFrame?: boolean };

export function MenuItemFramedLogo({
  logo,
  sx = {},
  testId,
  circularFrame = false,
  size = DEFAULT_MENU_ITEM_SIZE,
  rc = <span />,
  ...props
}: MenuItemFramedLogoProps) {
  const theme = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_MENU_ITEM_SIZE,
    MENU_ITEM_SIZES,
  );
  const allSx = merge(
    baseFramedIconStyles,
    getFramedContainerSx({ theme, size: startingSize }),
    getResponsiveFramedContainerSx({ theme, size }),
    {
      overflow: 'hidden',
      borderRadius: circularFrame ? '50%' : 'base.borderRadius.x2',
      flexShrink: 0,
    },
    sx,
  );
  return (
    <Box {...props} testId={testId} sx={allSx} rc={rc}>
      <Logo
        logo={logo}
        sx={merge(
          {
            width: 'base.icon.size.300',
          },
          sx,
        )}
      />
    </Box>
  );
}

MenuItemFramedLogo.displayName = 'MenuItem.FramedLogo';
