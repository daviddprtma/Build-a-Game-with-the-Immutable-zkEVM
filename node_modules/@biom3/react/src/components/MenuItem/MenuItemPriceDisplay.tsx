import merge from 'ts-deepmerge';

import { useTheme } from '../../hooks';
import { useWindowSizeStore } from '../../providers/BiomeWindowSize';
import { MakeResponsive } from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { getBodyTextStyles } from '../../utils/textStyleHelpers';
import { Body, Heading, PriceDisplay, PriceDisplayProps } from '../Text';
import {
  DEFAULT_MENU_ITEM_SIZE,
  isHeading,
  isSizeAnArray,
  MENU_ITEM_SIZES,
  MenuItemSize,
} from './shared';

export type MenuItemPriceDisplayProps = Omit<
  PriceDisplayProps<undefined, undefined>,
  'size'
> & {
  size?: MakeResponsive<MenuItemSize>;
};

type PickedResponsiveOptionProps = Omit<
  PriceDisplayProps<undefined, undefined>,
  'size' | 'use' | 'weight' | 'as'
> & {
  size: MenuItemSize;
};

function PickedResponsiveOption({
  price,
  size,
  sx = {},
  ...props
}: PickedResponsiveOptionProps) {
  const themeProps = useTheme();
  const typedProps = { ...props };
  const isMedium = isHeading(size, typedProps);
  return isMedium ? (
    <PriceDisplay
      {...typedProps}
      use={<Heading size="xSmall" weight="bold" />}
      rc={<span />}
      price={price}
      sx={sx}
    />
  ) : (
    <PriceDisplay
      {...typedProps}
      use={
        <Body size={size === 'small' ? 'medium' : 'small'} weight="regular" />
      }
      rc={<span />}
      price={price}
      sx={merge(
        {
          ...(size === 'xSmall'
            ? {
                '.fiatPrice': {
                  ...getBodyTextStyles({
                    themeProps,
                    size: 'xxSmall',
                    weight: 'regular',
                    mono: false,
                  }),
                },
              }
            : {}),
        },
        sx,
      )}
    />
  );
}

export function MenuItemPriceDisplay({
  sx = {},
  size = DEFAULT_MENU_ITEM_SIZE,
  price,
  ...props
}: MenuItemPriceDisplayProps) {
  const { state: width } = useWindowSizeStore(state => state.width);
  const {
    base: { breakpointAsArray },
  } = useTheme();
  const startingSize = getStartingSize(
    size,
    DEFAULT_MENU_ITEM_SIZE,
    MENU_ITEM_SIZES,
  );
  const mergedSx = merge({ whiteSpace: 'nowrap' }, sx);
  const defaultSize = (
    <PickedResponsiveOption
      {...props}
      size={startingSize}
      price={price}
      sx={mergedSx}
    />
  );

  if (width === null) return defaultSize;

  if (isSizeAnArray(size)) {
    const actualResponsiveSizes = [...size];
    actualResponsiveSizes.shift();
    return actualResponsiveSizes.reduce((accum, curr, index) => {
      let newAccum = accum;
      if (curr !== null && width >= breakpointAsArray[index]) {
        newAccum = (
          <PickedResponsiveOption
            {...props}
            size={curr}
            price={price}
            sx={mergedSx}
          />
        );
      }
      return newAccum;
    }, defaultSize);
  }

  return size === 'medium' || size === 'small' || size === 'xSmall' ? (
    <PickedResponsiveOption
      {...props}
      price={price}
      size={size}
      sx={mergedSx}
    />
  ) : (
    defaultSize
  );
}

MenuItemPriceDisplay.displayName = 'MenuItem.PriceDisplay';
