import { designTokens, smartPickTokenValue } from '@biom3/design-tokens';
import { useState } from 'react';

import { hexToRgbString } from '../../utils/colorHelpers';
import {
  DUMMY_RASTER_IMAGE_URL,
  IMX_TOKEN_IMAGE_URL,
} from '../../utils/dummyImages';
import {
  cyGetByTestId,
  cyMountWithProviders,
  cySmartGet,
} from '../../utils/testHelpers';
import { TextInput } from './TextInput';

function TextInputWithInternalState() {
  const [currentValue, setCurrentValue] = useState('');

  return (
    <TextInput
      testId="moo"
      value={currentValue}
      onChange={ev => setCurrentValue(ev.target.value)}
    />
  );
}

// @NOTE:
// inside of the TextInput component, we use the useResizeObserver to get the
// an internal element's size. Sadly, this function takes time to return the value,
// because of the debounce time, and cypress has a bug where cy.clock() doesn't
// actually advance debounce timers. :sob:
const DEBOUNCE_TIME = 60;

describe('<TextInput />', () => {
  it('should render a plain text input by default', () => {
    cyMountWithProviders(<TextInput testId="moo" />);
    cyGetByTestId('moo').find('input').should('exist');
  });

  it('should render as a DIV by default, but as something else when neccissary', () => {
    cyMountWithProviders(
      <>
        <TextInput testId="default" placeholder="text" />
        <TextInput testId="section" placeholder="text" rc={<section />} />
      </>,
    );
    cySmartGet('default').its('0.nodeName').should('eq', 'DIV');
    cySmartGet('section').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should render an input with placeholder text, when necessary', () => {
    cyMountWithProviders(<TextInput testId="moo" placeholder="text" />);
    cySmartGet('moo__input').should('have.attr', 'placeholder', 'text');
  });

  it('should allow the rendering of a number input field', () => {
    cyMountWithProviders(<TextInput testId="moo" type="number" />);
    cySmartGet('moo__input').should('have.attr', 'type', 'number');
  });

  it(`should allow the parent component to track when the user focuses an input`, () => {
    const onFocus = cy.stub().as('onFocusStub');
    cyMountWithProviders(<TextInput testId="moo" onFocus={onFocus} />);
    cySmartGet('@onFocusStub').should('not.have.been.called');
    cySmartGet('moo__input').click();
    cySmartGet('@onFocusStub').should('have.been.calledWithMatch', {
      type: 'focus',
    });
  });

  it(`should allow the parent component to track when the user blurs an input`, () => {
    const onBlur = cy.stub().as('onBlurStub');
    cyMountWithProviders(<TextInput testId="moo" onBlur={onBlur} />);
    cySmartGet('@onBlurStub').should('not.have.been.called');
    cySmartGet('moo__input').click();
    cy.get('body').click();
    cySmartGet('@onBlurStub').should('have.been.calledWithMatch', {
      type: 'blur',
    });
  });

  it('should render ui in an error state, where necessary', () => {
    cyMountWithProviders(<TextInput testId="moo" validationStatus="error" />);
    cySmartGet('moo__input').should(
      'have.css',
      'box-shadow',
      `rgba(0, 0, 0, 0) 0px 0px 0px 0px, ${hexToRgbString(
        smartPickTokenValue(designTokens, 'base.color.status.fatal.bright'),
      )} 0px 0px 0px 1px inset`,
    );
  });

  it('should visually indicate when the user focuses on an input', () => {
    cyMountWithProviders(<TextInput testId="moo" />);
    cySmartGet('moo__input').click();
    cySmartGet('moo__input')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(designTokens, 'base.color.brand.1'),
        )} 0px 0px 0px 2px inset`,
      );
  });

  it('should visually indicate when an input has a value', () => {
    cyMountWithProviders(<TextInput testId="moo" />);
    cySmartGet('moo__input')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.300',
          ),
        )} 0px 0px 0px 1px inset`,
      );
    cySmartGet('moo__input').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.100'),
    );

    cySmartGet('moo__input').type('123').blur();

    cySmartGet('moo__input')
      .should('have.css', 'box-shadow')
      .and(
        'include',
        `${hexToRgbString(
          smartPickTokenValue(
            designTokens,
            'base.color.translucent.standard.500',
          ),
        )} 0px 0px 0px 1px inset`,
      );
    cySmartGet('moo__input').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
  });

  it('should show the clear input button by default, when there is a value to be cleared', () => {
    cyMountWithProviders(<TextInput testId="moo" />);
    cySmartGet('moo__rightButtonsContainer__clearValueButton').should(
      'not.exist',
    );
    cySmartGet('moo__input').type('123');
    cySmartGet('moo__rightButtonsContainer__clearValueButton').should(
      'be.visible',
    );
  });

  it(`should correctly clear the input's value, when clicking the little (x) button`, () => {
    const onChange = cy.stub().as('onChangeStub');
    cyMountWithProviders(<TextInput testId="moo" onChange={onChange} />);
    cySmartGet('moo__input').type('123');
    cySmartGet('moo').realHover();
    cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
      type: 'change',
      target: Cypress.sinon.match({
        value: '123',
      }),
    });
    cySmartGet('moo__rightButtonsContainer__clearValueButton').click();
    cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
      type: 'change',
      target: Cypress.sinon.match({
        value: '',
      }),
    });
    cySmartGet('moo__input').its('0.value').should('be.empty');
  });

  it('should allow parent component to add custom styles to the TextInput', () => {
    cyMountWithProviders(<TextInput testId="moo" sx={{ m: '10px' }} />);
    cyGetByTestId('moo').should('have.css', 'margin', '10px');
  });

  it('should hide the clear value button, when neccissary', () => {
    cyMountWithProviders(
      <TextInput testId="moo" value="some value" hideClearValueButton />,
    );
    cyGetByTestId('moo__rightButtonsContainer__clearValueButton').should(
      'not.exist',
    );
  });

  it('should pass through a name attr prop, when neccissary', () => {
    cyMountWithProviders(<TextInput testId="moo" name="moo" />);
    cyGetByTestId('moo__input').should('have.attr', 'name', 'moo');
  });

  it('should correctly forward domRef and inputRef props', () => {
    const domRef = cy.stub().as('domRefStub');
    const inputRef = cy.stub().as('inputRefStub');
    cyMountWithProviders(
      <TextInput testId="moo" domRef={domRef} inputRef={inputRef} />,
    );
    cySmartGet('@domRefStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
    cySmartGet('@inputRefStub').should('have.been.calledWithMatch', {
      nodeName: 'INPUT',
    });
  });

  it('should not render hover fx, or allow internal buttons to be clicked, when the input is disabled', () => {
    const buttonClick = cy.stub().as('buttonClickStub');
    const onClearValue = cy.stub().as('onClearValueStub');
    cyMountWithProviders(
      <TextInput
        testId="moo"
        defaultValue="moo"
        disabled
        onClearValue={onClearValue}
      >
        <TextInput.Button onClick={buttonClick}>moo</TextInput.Button>
      </TextInput>,
    );

    cyGetByTestId('moo__input').should('be.disabled');
    cySmartGet('moo__input').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
    cySmartGet('moo__input').realHover();
    cySmartGet('moo__input').should(
      'have.backgroundColor',
      smartPickTokenValue(designTokens, 'base.color.translucent.emphasis.300'),
    );
    cySmartGet('moo__rightButtonsContainer__clearValueButton').click({
      force: true,
    });
    cySmartGet('moo__rightButtonsContainer__rightButton').click({
      force: true,
    });
    cySmartGet('@buttonClickStub').should('not.have.been.called');
    cySmartGet('@onClearValueStub').should('not.have.been.called');
  });

  context('Adornment support', () => {
    it('should add left padding to the input by default, based on what is supplied as an adornment', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Adornment>$USD</TextInput.Adornment>
        </TextInput>,
      );

      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);

      cySmartGet('moo__input')
        .should('have.css', 'padding-left')
        .then(value => {
          expect(parseFloat(value)).to.be.greaterThan(58);
        });

      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Adornment>$</TextInput.Adornment>
        </TextInput>,
      );

      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);

      cySmartGet('moo__input')
        .should('have.css', 'padding-left')
        .then(value => {
          expect(parseFloat(value)).to.be.greaterThan(28);
        });
    });

    it('should add right padding to the input, based on what is supplied as an adornmentm, when right aligned', () => {
      cyMountWithProviders(
        <TextInput testId="moo" textAlign="right">
          <TextInput.Adornment>$USD</TextInput.Adornment>
        </TextInput>,
      );

      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);

      cySmartGet('moo__input')
        .should('have.css', 'padding-right')
        .then(value => {
          expect(parseFloat(value)).to.be.greaterThan(58);
        });

      cyMountWithProviders(
        <TextInput testId="moo" textAlign="right">
          <TextInput.Adornment>$</TextInput.Adornment>
        </TextInput>,
      );

      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);

      cySmartGet('moo__input')
        .should('have.css', 'padding-right')
        .then(value => {
          expect(parseFloat(value)).to.be.greaterThan(28);
        });

      // @NOTE: type something in, so that we have the adornment AND
      // the clear button visible
      cySmartGet('moo__input').type('123213');
      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);

      cySmartGet('moo__input')
        .should('have.css', 'padding-right')
        .then(value => {
          expect(parseFloat(value)).to.be.greaterThan(52);
        });
    });
  });

  context('Text align support', () => {
    it('should left align by default', () => {
      cyMountWithProviders(<TextInput testId="moo" />);
      cySmartGet('moo__input').should('have.css', 'text-align', 'left');
    });

    it('should align to the right, when neccissary', () => {
      cyMountWithProviders(<TextInput testId="moo" textAlign="right" />);
      cySmartGet('moo__input').should('have.css', 'text-align', 'right');
    });

    it('should left align the adornment, by default', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Adornment>kg</TextInput.Adornment>``
        </TextInput>,
      );
      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__adornment').then($el => {
        const boundingRect = $el[0].getBoundingClientRect();
        expect(boundingRect.x).to.be.lessThan(13);
      });
    });

    it('should right align the adornment, as well as input text', () => {
      cyMountWithProviders(
        <TextInput textAlign="right">
          <TextInput.Adornment testId="moo">kg</TextInput.Adornment>
        </TextInput>,
      );
      cy.viewport(300, 200);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo').then($el => {
        const boundingRect = $el[0].getBoundingClientRect();
        expect(boundingRect.x).to.be.greaterThan(221);
      });
    });
  });

  context('Size support', () => {
    it('should render at "medium" size by default', () => {
      cyMountWithProviders(<TextInput testId="moo" />);
      cySmartGet('moo__input').should('have.css', 'height', '48px');
    });

    it('should render at "large" size, when neccissary', () => {
      cyMountWithProviders(<TextInput testId="moo" sizeVariant="large" />);
      cySmartGet('moo__input').should('have.css', 'height', '64px');
    });

    it('should allow responsive sizing', () => {
      cy.viewport(200, 200);
      cyMountWithProviders(
        <TextInput testId="moo" sizeVariant={['medium', null, 'large']} />,
      );
      cySmartGet('moo__input').should('have.css', 'height', '48px');

      cy.viewport(designTokens.base.breakpoint.medium, 200);
      cySmartGet('moo__input').should('have.css', 'height', '64px');
    });
  });

  context('Uncontrolled API', () => {
    it('should allow the input to be initialised with a value, but still be un-controlled', () => {
      cyMountWithProviders(<TextInput testId="moo" defaultValue="moo cow" />);
      cySmartGet('moo__input').its('0.value').should('eq', 'moo cow');
    });

    it(`should allow the parent component to track when an input's value changes`, () => {
      const onChange = cy.stub().as('onChangeStub');
      cyMountWithProviders(<TextInput testId="moo" onChange={onChange} />);
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__input').type('123');
      cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
        type: 'change',
        target: Cypress.sinon.match({
          value: '123',
        }),
      });
    });

    it(`should clear input's value, when the user clicks the clear value button`, () => {
      const onChange = cy
        .stub()
        .as('onChangeStub')
        .callsFake(e => {
          console.log('onChangeStub', e);
        });
      cyMountWithProviders(<TextInput testId="moo" onChange={onChange} />);
      cySmartGet('@onChangeStub').should('not.have.been.called');
      cySmartGet('moo__input').type('123');
      cySmartGet('moo__rightButtonsContainer__clearValueButton').click();
      cySmartGet('@onChangeStub').should('have.been.calledWithMatch', {
        type: 'change',
        target: Cypress.sinon.match({
          value: '',
        }),
      });
    });

    it('should allow the onClearValue prop to be called, even when the input is uncontrolled', () => {
      const onClearValue = cy.stub().as('onClearValueStub');
      cyMountWithProviders(
        <TextInput
          testId="moo"
          defaultValue="Moo"
          onClearValue={onClearValue}
        />,
      );
      cySmartGet('@onClearValueStub').should('not.have.been.calledOnce');
      cySmartGet('moo__rightButtonsContainer__clearValueButton').click();
      cySmartGet('@onClearValueStub').should('have.been.calledOnce');
    });
  });

  context('Controlled API', () => {
    it('should not update the input text, when the user types something in, but the input is controlled and not wired up correctly', () => {
      cyMountWithProviders(
        <TextInput testId="moo" value="some value" onChange={() => {}} />,
      );
      cySmartGet('moo__input').type('123');
      cySmartGet('moo__input').its('0.value').should('eq', 'some value');
    });

    it('should correctly update, when the parent component updates the value prop', () => {
      cyMountWithProviders(<TextInputWithInternalState />);
      cySmartGet('moo__input').type('123');
      cySmartGet('moo__input').its('0.value').should('eq', '123');
    });

    it('should call onClearValue, when the input is controlled', () => {
      const onClearValue = cy.stub().as('onClearValueStub');
      cyMountWithProviders(
        <TextInput
          testId="moo"
          value="some value"
          onClearValue={onClearValue}
        />,
      );
      cySmartGet('@onClearValueStub').should('not.have.been.calledOnce');
      cySmartGet('moo__rightButtonsContainer__clearValueButton').click();
      cySmartGet('@onClearValueStub').should('have.been.calledOnce');
    });
  });

  context('Subcomponents', () => {
    it('should allow the rendering of any child as well as subcomponents', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Button testId="button">some button text</TextInput.Button>
          <div data-testid="not-a-subcomponent">some other text</div>
          <>how now brown cow</>
        </TextInput>,
      );

      cySmartGet('not-a-subcomponent').should('exist');
      cy.contains('how now brown cow').should('exist');
      cySmartGet('button').should('exist');
    });

    it('should correctly forward subcomponent domRef, when neccissary', () => {
      const buttonDomRef = cy.stub().as('buttonDomRefStub');
      const buttConDomRef = cy.stub().as('buttConDomRefStub');
      const iconDomRef = cy.stub().as('iconDomRefStub');
      const adornmentDomRef = cy.stub().as('adornmentDomRefStub');
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Button testId="button" domRef={buttonDomRef}>
            some button text
          </TextInput.Button>
          <TextInput.StatefulButtCon domRef={buttConDomRef} icon="AirDrop" />
          <TextInput.Icon domRef={iconDomRef} icon="AirDrop" />
          <TextInput.Adornment domRef={adornmentDomRef}>$</TextInput.Adornment>
        </TextInput>,
      );

      cySmartGet('@buttonDomRefStub').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });
      cySmartGet('@buttConDomRefStub').should('have.been.calledWithMatch', {
        nodeName: 'BUTTON',
      });
      cySmartGet('@iconDomRefStub').should('have.been.calledWithMatch', {
        nodeName: 'svg',
      });
      cySmartGet('@adornmentDomRefStub').should('have.been.calledWithMatch', {
        nodeName: 'SPAN',
      });

      const framedImageDomRef = cy.stub().as('framedImageDomRefStub');
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.FramedImage
            domRef={framedImageDomRef}
            imageUrl={DUMMY_RASTER_IMAGE_URL}
          />
        </TextInput>,
      );
      cySmartGet('@framedImageDomRefStub').should('have.been.calledWithMatch', {
        nodeName: 'DIV',
      });
    });

    it('should render an input with a button inside it, when necessary', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Button testId="button" onClick={onClickStub}>
            button
          </TextInput.Button>
        </TextInput>,
      );

      cySmartGet('button').should('exist');
      cySmartGet('@onClickStub').should('not.have.been.called');
      cySmartGet('button').click();
      cySmartGet('@onClickStub').should('have.been.called');
    });

    it('should render an input with a buttCon inside it, when necessary', () => {
      const onClickStub = cy.stub().as('onClickStub');
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.StatefulButtCon
            testId="buttcon"
            onClick={onClickStub}
            icon="AirDrop"
          />
        </TextInput>,
      );

      cySmartGet('buttcon').should('exist');
      cySmartGet('@onClickStub').should('not.have.been.called');
      cySmartGet('buttcon').click();
      cySmartGet('@onClickStub').should('have.been.called');
    });

    it('should disable all sub-component buttons, when the TextInput is disabled', () => {
      cyMountWithProviders(
        <TextInput testId="moo" disabled>
          <TextInput.StatefulButtCon testId="buttcon" icon="AirDrop" />
          <TextInput.Button testId="button">button</TextInput.Button>
        </TextInput>,
      );

      cySmartGet('buttcon').should('exist');
      cySmartGet('buttcon').should('have.attr', 'disabled');
      cySmartGet('button').should('have.attr', 'disabled');
    });

    it('should render an input with an icon inside it, when necessary', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Icon testId="icon" icon="Add" />
        </TextInput>,
      );

      cySmartGet('icon').should('exist');
    });

    it('should allow user to select the "bold" version of an icon, when neccissary', () => {
      cyMountWithProviders(
        <TextInput>
          <TextInput.Icon
            testId="icon"
            icon="ArrowForward"
            iconVariant="bold"
          />
        </TextInput>,
      );

      cySmartGet('icon').should('have.attr', 'data-variant', 'bold');

      cyMountWithProviders(
        <TextInput>
          <TextInput.Icon
            testId="icon"
            icon="ArrowForward"
            iconVariant="regular"
          />
        </TextInput>,
      );

      cySmartGet('icon').should('have.attr', 'data-variant', 'regular');
    });

    it('should allow all subcomponents to be custom styled using sx', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Icon
            testId="icon"
            sx={{ background: 'gold' }}
            icon="Add"
          />

          <TextInput.Button testId="button" sx={{ background: 'gold' }}>
            button
          </TextInput.Button>
          <TextInput.Adornment testId="adornment" sx={{ bg: 'gold' }}>
            $
          </TextInput.Adornment>
        </TextInput>,
      );

      cySmartGet('button').should('have.backgroundColor', 'gold');
      cySmartGet('icon').should('have.backgroundColor', 'gold');
      cySmartGet('adornment').should('have.backgroundColor', 'gold');
    });

    it('should not apply large amounts of padding-right to the input, when hideClearValueButton is true', () => {
      cyMountWithProviders(<TextInput testId="moo" hideClearValueButton />);
      cySmartGet('moo__input').should('have.css', 'padding-right', '12px');

      cyMountWithProviders(
        <TextInput testId="moo" value="moo cow" hideClearValueButton />,
      );
      cySmartGet('moo__input').should('have.css', 'padding-right', '12px');
    });

    it('should correctly adjust the padding-right on the input, when the width of the button subcomponent changes, and when the interactionn state of the input changes', () => {
      // Test when the input has just 1 subcomponents - with a different width, but no value
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Button testId="button">button</TextInput.Button>
        </TextInput>,
      );
      cy.viewport(350, 200);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__input')
        .should('have.css', 'padding-right')
        .then((value: any) => {
          const paddingRight = parseInt(value, 10);
          expect(paddingRight).to.be.greaterThan(85);
        });

      // Test when the input has just 1 subcomponents, but no value
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Button testId="button" sx={{ width: '130px' }}>
            button
          </TextInput.Button>
        </TextInput>,
      );
      cy.viewport(351, 201);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__input').should('have.css', 'padding-right', '150px');

      // Test when the input has 2 subcomponents, but no value
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.Icon icon="Add" testId="icon" />
          <TextInput.Button testId="button" sx={{ width: '130px' }}>
            button
          </TextInput.Button>
        </TextInput>,
      );
      cy.viewport(350, 200);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__input').should('have.css', 'padding-right', '150px');

      // Test when the input has no subcomponents
      cyMountWithProviders(<TextInput testId="moo" />);
      cy.viewport(351, 201);
      cy.wait(DEBOUNCE_TIME);
      cySmartGet('moo__input').should('have.css', 'padding-right', '12px');
    });

    it('should support TextInput.FramedImage', () => {
      cyMountWithProviders(
        <TextInput testId="moo">
          <TextInput.FramedImage
            testId="framed-image"
            imageUrl={IMX_TOKEN_IMAGE_URL}
          />
        </TextInput>,
      );

      cySmartGet('framed-image').should('exist');
    });
  });
});
