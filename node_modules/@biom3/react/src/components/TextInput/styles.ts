import { Properties } from 'csstype';

import { InputTextAlign, InputValidationStatus } from '../../types/input';
import { MakeResponsive } from '../../types/shared';
import { BiomeTheme } from '../../types/theme';
import { getResponsiveSx, RenderSxProps } from '../../utils/styleHelpers';
import { INPUT_MIN_WIDTH, TextInputSize } from './shared';

export const inputContainerBaseSx = {
  position: 'relative',
  minWidth: INPUT_MIN_WIDTH,
  flexShrink: 0,

  '& > *': {
    position: 'absolute',
  },
};

export const buttonsContainerSx = {
  top: '50%',
  transform: 'translateY(-50%)',
};
export const leftButtonsContainerSx = {
  left: 'base.spacing.x3',
};

export const rightButtonsContainerSx = {
  right: 'base.spacing.x3',
};

export const clearValueButtonSx = {
  padding: '0',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',

  '& > svg': {
    fill: 'base.color.text.secondary',
    transitionProperty: 'fill',
    transitionDuration: 'base.motion.normal.fast.cssDuration',
    transitionTimingFunction: 'base.motion.normal.fast.cssEase',
  },

  '&:hover > svg': {
    fill: 'base.color.text.primary',
  },
};

export const baseInputSx = {
  appearance: 'none',
  w: '100%',
  h: '100%',
  border: 'none',
  borderRadius: 'base.borderRadius.x4',
  fontFamily: 'base.font.family.body.primary',
  fontSize: 'base.text.body.medium.regular.fontSize',
  lineHeight: 'base.text.body.medium.regular.lineHeight',
  fontWeight: 'base.text.body.medium.regular.fontWeight',
  c: 'base.color.text.primary',
  bgc: 'base.color.translucent.emphasis.100',

  transitionProperty: 'box-shadow, background',
  transitionDuration: 'base.motion.normal.fast.cssDuration',
  transitionTimingFunction: 'base.motion.normal.fast.cssEase',

  '&:not(:disabled):hover': {
    bgc: 'base.color.translucent.emphasis.200',
  },
  '&:not(:disabled):focus': {
    bgc: 'base.color.translucent.emphasis.300',
  },
};

export const inputIconBaseSx = {
  width: 'base.icon.size.300',
  height: 'base.icon.size.300',
  fill: 'base.color.brand.1',
  left: 'base.spacing.x3',
};

export const framedImageSx = {
  w: 'base.icon.size.300',
};

export const adornmentSx = {
  c: 'base.color.text.primary',
  lineHeight: 'unset',
};

export function renderInputSx({
  validationStatus,
  leftHandButtonsWidth,
  rightHandButtonsWidth,
  textAlign,
  theme,
  hasValue,
}: {
  validationStatus: InputValidationStatus | undefined;
  rightHandButtonsWidth: number;
  leftHandButtonsWidth: number;
  textAlign: InputTextAlign;
  theme: BiomeTheme;
  hasValue: boolean;
}) {
  const paddingLeft =
    leftHandButtonsWidth > 0
      ? `calc(${leftHandButtonsWidth}px + ${theme.base.spacing.x5})`
      : theme.base.spacing.x3;
  const paddingRight =
    rightHandButtonsWidth > 0
      ? `calc(${rightHandButtonsWidth}px + ${theme.base.spacing.x5})`
      : theme.base.spacing.x3;
  const hoverShadow = theme.base.shadow[200];
  const emptyShadow = '0 0 0 rgba(0,0,0,0)';

  return {
    paddingLeft,
    paddingRight,
    textAlign,
    background: hasValue
      ? theme.base.color.translucent.emphasis[300]
      : theme.base.color.translucent.emphasis[100],

    boxShadow:
      validationStatus === 'error'
        ? `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.status.fatal.bright}`
        : hasValue
        ? `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[500]}`
        : `${emptyShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[300]}`,

    '&::-webkit-outer-spin-button, &::-webkit-inner-spin-button': {
      // @NOTE: this hides the up and down arrows on number inputs
      display: 'none',
    },

    '&::placeholder': {
      color: theme.base.color.text.secondary,
    },

    '&:not(:disabled):hover': {
      background: hasValue
        ? theme.base.color.translucent.emphasis[300]
        : theme.base.color.translucent.emphasis[200],
      boxShadow:
        validationStatus === 'error'
          ? `${hoverShadow}, inset 0 0 0 1px ${theme.base.color.status.fatal.bright}`
          : `${hoverShadow}, inset 0 0 0 1px ${theme.base.color.translucent.standard[600]}`,
    },

    '&:not(:disabled):focus': {
      outline: 'none',
      background: theme.base.color.translucent.emphasis[300],
      boxShadow:
        validationStatus === 'error'
          ? `${hoverShadow}, inset 0 0 0 2px ${theme.base.color.status.fatal.bright}`
          : `${hoverShadow}, inset 0 0 0 2px ${theme.base.color.brand[1]}`,
    },
  };
}

export const renderResponsiveInputSx = (props: {
  validationStatus: InputValidationStatus | undefined;
  leftHandButtonsWidth: number;
  rightHandButtonsWidth: number;
  textAlign: InputTextAlign;
  theme: BiomeTheme;
  size: MakeResponsive<TextInputSize>;
  hasValue: boolean;
}) =>
  getResponsiveSx({
    ...props,
    renderSxAtSize: renderInputSx as unknown as (
      props: RenderSxProps<TextInputSize>,
    ) => Properties,
  });

export function renderContainerStyles({
  size,
  theme,
}: {
  size: TextInputSize;
  theme: BiomeTheme;
}) {
  switch (size) {
    case 'large':
      return {
        height: theme.base.spacing.x16,
      };

    case 'medium':
    default:
      return {
        height: theme.base.spacing.x12,
      };
  }
}

export const renderResponsiveContainerStyles = (props: {
  theme: BiomeTheme;
  size: MakeResponsive<TextInputSize>;
}) => {
  const sx = getResponsiveSx({
    ...props,
    renderSxAtSize: renderContainerStyles,
  });
  return sx;
};
