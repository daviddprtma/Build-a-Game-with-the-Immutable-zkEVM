import { useState } from 'react';

import {
  getInvalidCurrentPageWarningMsg,
  getInvalidPropWarningMsg,
} from '../../hooks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { OnboardingPagination } from '../OnboardingPagination';
import { Pagination } from './Pagination';

function PaginationWithInternalState() {
  const [currentPage, setCurrentPage] = useState(1);

  return (
    <OnboardingPagination
      testId="moo"
      currentPage={currentPage}
      onPageChange={setCurrentPage}
    />
  );
}

describe('<Pagination />', () => {
  it('should render as a div by default, and other tags as neccisary', () => {
    cyMountWithProviders(<Pagination testId="moo" />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');

    cyMountWithProviders(<Pagination testId="moo" rc={<section />} />);
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef', () => {
    const ref = cy.stub().as('ref');
    cyMountWithProviders(<Pagination domRef={ref} />);
    cySmartGet('@ref').should('have.been.calledWithMatch', { nodeName: 'DIV' });
  });

  it('should render the correct number of pages', () => {
    cyMountWithProviders(<Pagination totalPages={7} testId="moo" />);
    cySmartGet('moo').children().should('have.length', 8);
  });

  it('should render 1 boundary and 1 sibling by default', () => {
    cyMountWithProviders(
      <Pagination totalPages={100} defaultPage={50} testId="moo" />,
    );
    cySmartGet('moo__page--1').should('exist');
    cySmartGet('moo__page--49').should('exist');
    cySmartGet('moo__page--51').should('exist');
    cySmartGet('moo__page--100').should('exist');
  });

  it('should allow for customizing the number of sibling page buttons', () => {
    cyMountWithProviders(
      <Pagination
        totalPages={100}
        siblingPages={3}
        defaultPage={50}
        testId="moo"
      />,
    );
    cySmartGet('moo__page--47').should('exist');
    cySmartGet('moo__page--48').should('exist');
    cySmartGet('moo__page--49').should('exist');

    cySmartGet('moo__page--51').should('exist');
    cySmartGet('moo__page--52').should('exist');
    cySmartGet('moo__page--53').should('exist');
  });

  it('should allow for customizing the number of boundary page buttons', () => {
    cyMountWithProviders(
      <Pagination
        totalPages={100}
        boundaryPages={3}
        defaultPage={50}
        testId="moo"
      />,
    );

    cySmartGet('moo__page--1').should('exist');
    cySmartGet('moo__page--2').should('exist');
    cySmartGet('moo__page--3').should('exist');

    cySmartGet('moo__page--98').should('exist');
    cySmartGet('moo__page--99').should('exist');
    cySmartGet('moo__page--100').should('exist');
  });

  it('should show arrows by default', () => {
    cyMountWithProviders(
      <Pagination testId="moo" defaultPage={50} totalPages={100} />,
    );

    cySmartGet('moo__arrow--previous').should('exist');
    cySmartGet('moo__arrow--next').should('exist');
  });

  it('should not show arrows when neccissary', () => {
    cyMountWithProviders(
      <Pagination
        showArrows={false}
        defaultPage={50}
        totalPages={100}
        testId="moo"
      />,
    );

    cySmartGet('moo__arrow--prev').should('not.exist');
    cySmartGet('moo__arrow--next').should('not.exist');
  });

  it('should not show prev arrow when at the start', () => {
    cyMountWithProviders(<Pagination testId="moo" />);
    cySmartGet('moo__arrow--previous').should('not.exist');
    cySmartGet('moo__arrow--next').should('exist');
  });

  it('should not show next arrow when at the end', () => {
    cyMountWithProviders(
      <Pagination testId="moo" totalPages={10} defaultPage={10} />,
    );
    cySmartGet('moo__arrow--previous').should('exist');
    cySmartGet('moo__arrow--next').should('not.exist');
  });

  it('should accept custom sx styles', () => {
    cyMountWithProviders(<Pagination testId="moo" sx={{ bg: 'gold' }} />);
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should render "dots" when neccissary', () => {
    cyMountWithProviders(<Pagination testId="moo" />);
    cySmartGet('moo__dots--5').should('exist');

    cyMountWithProviders(
      <Pagination testId="moo" totalPages={100} defaultPage={50} />,
    );
    cySmartGet('moo__dots--1').should('exist');
    cySmartGet('moo__dots--5').should('exist');
  });

  context('Uncontrolled API', () => {
    it('should allow the use of onPageChange in uncontrolled mode', () => {
      const onPageChange = cy.stub().as('onPageChange');
      cyMountWithProviders(
        <Pagination defaultPage={1} onPageChange={onPageChange} testId="moo" />,
      );
      cySmartGet('@onPageChange').should('not.have.been.called');
      cySmartGet('moo__page--4').click();
      cySmartGet('@onPageChange').should('have.been.calledWith', 4);
    });

    it('should update the currently selected page, when a new page is clicked', () => {
      cyMountWithProviders(<Pagination defaultPage={1} testId="moo" />);
      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--3').click();
      cySmartGet('moo__page--1').should('not.have.class', 'selected');
      cySmartGet('moo__page--3').should('have.class', 'selected');
    });
  });

  context('Controlled API', () => {
    it('should not update the selected page when the user clicks the dots, and the control is not wired up properly', () => {
      cyMountWithProviders(
        <Pagination currentPage={1} onPageChange={() => {}} testId="moo" />,
      );

      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--4').click();
      cySmartGet('moo__page--1').should('have.class', 'selected');
    });

    it('should change page when another page is clicked', () => {
      cyMountWithProviders(<PaginationWithInternalState />);
      cySmartGet('moo__page--1').should('have.class', 'selected');
      cySmartGet('moo__page--3').click().should('have.class', 'selected');
    });

    it('should allow the use of onPageChange in controlled mode', () => {
      const onPageChange = cy.stub().as('onPageChange');
      cyMountWithProviders(
        <Pagination currentPage={1} onPageChange={onPageChange} testId="moo" />,
      );
      cySmartGet('@onPageChange').should('not.have.been.called');
      cySmartGet('moo__page--4').click();
      cySmartGet('@onPageChange').should('have.been.calledWith', 4);
    });
  });
  context('Unhappy path (bad input props)', () => {
    it('should not render anything and output a warning to the console, when totalPages is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(<Pagination totalPages={0} testId="moo" />);
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('Pagination', 'totalPages', 0),
      );
    });
    it('should not render anything and output a warning to the console, when currentPage is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(<Pagination defaultPage={0} testId="moo" />);
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('Pagination', 'defaultPage', 0),
      );
    });
    it('should not render anything and output a warning to the console, when defaultPage is less than 1', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <Pagination currentPage={0} onPageChange={console.log} testId="moo" />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidPropWarningMsg('Pagination', 'currentPage', 0),
      );
    });

    it('should not render anything and output a warning to the console, when currentPage is greater than totalPages', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <Pagination
          currentPage={11}
          totalPages={10}
          onPageChange={console.log}
          testId="moo"
        />,
      );
      cySmartGet('moo').should('not.exist');
      cySmartGet('@consoleWarn').should(
        'have.been.calledWith',
        getInvalidCurrentPageWarningMsg('Pagination', 11, 10),
      );
    });

    it('should fallback to a defaultPage of 1, when defaultPage is greater than totalPages', () => {
      cy.window().then(win => {
        cy.spy(win.console, 'warn').as('consoleWarn');
      });

      cyMountWithProviders(
        <Pagination defaultPage={11} totalPages={10} testId="moo" />,
      );
      cySmartGet('moo__page--1').should('have.class', 'selected');
    });
  });
});
