import { designTokens } from '@biom3/design-tokens';

import { DUMMY_RASTER_IMAGE_2_URL, DUMMY_RASTER_IMAGE_URL } from '../../utils';
import {
  cyMountWithProviders,
  cySmartGet,
  getSrcsetSizes,
} from '../../utils/testHelpers';
import { SwapStack } from './SwapStack';

function SwapStackTestFixture({
  testId = 'moo',
  primaryImageUrl = DUMMY_RASTER_IMAGE_2_URL,
  size = 'medium',
  ...props
}: any) {
  return (
    <SwapStack
      testId={testId}
      primaryImageUrl={primaryImageUrl}
      size={size}
      {...props}
    />
  );
}

describe('<SwapStack />', () => {
  beforeEach(() => {
    cy.viewport(200, 200);
  });

  it('should have correct displayName', () => {
    expect(SwapStack.displayName).to.eq('SwapStack');
  });

  it('should render inside a div by default, but override that when an rc prop is provided', () => {
    cyMountWithProviders(<SwapStackTestFixture />, { useAllProviders: true });
    cySmartGet('moo').its('0.nodeName').should('eq', 'DIV');
    cyMountWithProviders(<SwapStackTestFixture rc={<section />} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').its('0.nodeName').should('eq', 'SECTION');
  });

  it('should correctly forward domRef prop', () => {
    const ref = cy.stub().as('refStub');
    cySmartGet('@refStub').should('not.have.been.calledOnce');
    cyMountWithProviders(<SwapStackTestFixture domRef={ref} />, {
      useAllProviders: true,
    });
    cySmartGet('@refStub').should('have.been.calledWithMatch', {
      nodeName: 'DIV',
    });
  });

  it('should correctly accept sx styles', () => {
    cyMountWithProviders(<SwapStackTestFixture sx={{ bg: 'gold' }} />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.backgroundColor', 'gold');
  });

  it('should pass through DOM properties like aria-* and data-*', () => {
    cyMountWithProviders(
      <SwapStackTestFixture aria-atomic="true" data-moo="cow" />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.attr', 'aria-atomic', 'true');
    cySmartGet('moo').should('have.attr', 'data-moo', 'cow');
  });

  it('should render left image for both sides, when user does not supply secondary image', () => {
    cyMountWithProviders(
      <SwapStackTestFixture primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL} />,
      { useAllProviders: true },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcSet => {
        expect(srcSet).to.include(
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvZGVtby1pbWFnZXMvdHJlZS1kdWRlLmpwZw==',
        );
      });
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcSet => {
        expect(srcSet).to.include(
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvZGVtby1pbWFnZXMvdHJlZS1kdWRlLmpwZw==',
        );
      });
  });

  it('should render primary and secondary image when both are supplied', () => {
    cyMountWithProviders(
      <SwapStackTestFixture
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
        secondaryImageUrl={DUMMY_RASTER_IMAGE_URL}
      />,
      { useAllProviders: true },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcSet => {
        expect(srcSet).to.include(
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvZGVtby1pbWFnZXMvdHJlZS1kdWRlLmpwZw==',
        );
      });
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcSet => {
        expect(srcSet).to.include(
          'https://image-resizer-cache.dev.immutable.com/url=aHR0cHM6Ly9iaW9tZS5pbW11dGFibGUuY29tL2hvc3RlZC1hc3NldHMvZGVtby1pbWFnZXMvZnJvZy5wbmc=',
        );
      });
  });

  it('should render in "medium" size, by default', () => {
    cyMountWithProviders(<SwapStackTestFixture />, { useAllProviders: true });
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '20px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '20px',
    );
  });

  it('should render the correct sizes', () => {
    cyMountWithProviders(<SwapStackTestFixture size="xLarge" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '64px');
    cySmartGet('moo').should('have.css', 'height', '64px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '48px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '48px',
    );

    cyMountWithProviders(<SwapStackTestFixture size="large" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '48px');
    cySmartGet('moo').should('have.css', 'height', '48px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '32px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '32px',
    );

    cyMountWithProviders(<SwapStackTestFixture size="medium" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '20px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '20px',
    );

    cyMountWithProviders(<SwapStackTestFixture size="small" />, {
      useAllProviders: true,
    });
    cySmartGet('moo').should('have.css', 'width', '24px');
    cySmartGet('moo').should('have.css', 'height', '24px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '16px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '16px',
    );
  });

  it('should render in responsive sizing, where neccissary', () => {
    cy.viewport(200, 200);
    cyMountWithProviders(
      <SwapStackTestFixture size={['small', 'medium', 'large', 'xLarge']} />,
      { useAllProviders: true },
    );
    cySmartGet('moo').should('have.css', 'width', '24px');
    cySmartGet('moo').should('have.css', 'height', '24px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '16px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '16px',
    );

    cy.viewport(designTokens.base.breakpoint.small, 200);
    cySmartGet('moo').should('have.css', 'width', '32px');
    cySmartGet('moo').should('have.css', 'height', '32px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '20px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '20px',
    );

    cy.viewport(designTokens.base.breakpoint.medium, 200);
    cySmartGet('moo').should('have.css', 'width', '48px');
    cySmartGet('moo').should('have.css', 'height', '48px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '32px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '32px',
    );

    cy.viewport(designTokens.base.breakpoint.large, 200);
    cySmartGet('moo').should('have.css', 'width', '64px');
    cySmartGet('moo').should('have.css', 'height', '64px');
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'width',
      '48px',
    );
    cySmartGet('moo__framedImage--right__innerContainer__cloudImage').should(
      'have.css',
      'height',
      '48px',
    );
  });

  it('should render correct responsiveImageSizes for each size', () => {
    cyMountWithProviders(
      <SwapStackTestFixture
        size="xLarge"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
      });

    cyMountWithProviders(
      <SwapStackTestFixture
        size="large"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(64);
        expect(sizes).to.contain(128);
      });

    cyMountWithProviders(
      <SwapStackTestFixture
        size="medium"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
      });

    cyMountWithProviders(
      <SwapStackTestFixture
        size="small"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );
    cySmartGet('moo__framedImage--left__innerContainer__cloudImage')
      .should('have.attr', 'srcset')
      .then(srcset => {
        const sizes = getSrcsetSizes(srcset);
        expect(sizes).to.contain(32);
        expect(sizes).to.contain(64);
      });
  });

  it('should render correct relativeImageSizeInLayout, when neccissary', () => {
    cyMountWithProviders(
      <SwapStackTestFixture
        size="xLarge"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage--left__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '48px',
    );

    cyMountWithProviders(
      <SwapStackTestFixture
        size="large"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage--left__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '32px',
    );

    cyMountWithProviders(
      <SwapStackTestFixture
        size="medium"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage--left__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '20px',
    );

    cyMountWithProviders(
      <SwapStackTestFixture
        size="small"
        primaryImageUrl={DUMMY_RASTER_IMAGE_2_URL}
      />,
      {
        useAllProviders: true,
      },
    );

    cySmartGet('moo__framedImage--left__innerContainer__cloudImage').should(
      'have.attr',
      'sizes',
      '16px',
    );
  });
});
