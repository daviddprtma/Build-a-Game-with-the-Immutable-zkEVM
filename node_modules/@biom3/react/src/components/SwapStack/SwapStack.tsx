import { ReactElement, useMemo } from 'react';
import merge from 'ts-deepmerge';

import {
  useGetCurrentSizeClass,
  useGetRelativeImageSizeInLayout,
  useGetResponsiveImageSizes,
  useTheme,
} from '../../hooks';
import {
  DEFAULT_IMAGE_SIZE_VARIANT,
  IMAGE_SIZE_VARIANTS,
  ImageSizeVariant,
} from '../../types/image';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from '../../types/shared';
import { getStartingSize } from '../../utils/styleHelpers';
import { Box } from '../Box';
import { FramedImage } from '../FramedImage';
import {
  getContainerSx,
  getImageSx,
  getResponsiveContainerSx,
  getResponsiveImageSx,
  swapContainerImageSx,
  swapContainerSx,
} from './styles';

export type SwapStackProps = StandardComponentWithProps<
  HTMLDivElement,
  {
    circularFrame?: boolean;
    primaryImageUrl: string;
    secondaryImageUrl?: string;
    direction?: 'left' | 'right';
    size?: MakeResponsive<ImageSizeVariant>;
  }
>;

export function SwapStack<RC extends ReactElement | undefined = undefined>({
  circularFrame,
  primaryImageUrl,
  secondaryImageUrl,
  direction = 'left',
  testId = 'SwapStack',
  className,
  size = DEFAULT_IMAGE_SIZE_VARIANT,
  sx = {},
  ...props
}: RC extends undefined
  ? DomPropsWithDomRef<'div'> & SwapStackProps
  : SwapStackProps & { rc: RC }) {
  const startingSize = getStartingSize(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );
  const theme = useTheme();
  const containerSx = useMemo(
    () =>
      merge(
        swapContainerSx,
        {
          pos: 'relative',
        },
        getContainerSx({ theme, size: startingSize }),
        getResponsiveContainerSx({ theme, size }),
        sx,
      ),
    [size, startingSize, sx, theme],
  );
  const baseImageSx = useMemo(
    () =>
      merge(
        swapContainerImageSx,
        getImageSx({ theme, size: startingSize }),
        getResponsiveImageSx({ theme, size }),
      ),
    [size, startingSize, theme],
  );
  const responsiveImageSizes = useGetResponsiveImageSizes(size, 'SwapStack');
  const relativeImageSizeInLayout = useGetRelativeImageSizeInLayout(
    size,
    'SwapStack',
  );
  const leftImageSx = merge(baseImageSx, {
    top: 0,
    left: 0,
  });
  const sizeClass = useGetCurrentSizeClass(
    size,
    DEFAULT_IMAGE_SIZE_VARIANT,
    IMAGE_SIZE_VARIANTS,
  );
  const rightImageProps = useMemo(
    () => ({
      circularFrame,
      relativeImageSizeInLayout,
      testId: `${testId}__framedImage--right`,
      className: 'SwapStack__image SwapStack__image--right',
      sx: merge(baseImageSx, {
        bottom: 0,
        right: 0,
      }),
    }),
    [circularFrame, baseImageSx, relativeImageSizeInLayout, testId],
  );

  return (
    <Box
      {...props}
      testId={testId}
      className={`${
        className ?? ''
      } SwapStack SwapStack--${sizeClass} SwapStack--${direction} SwapStack--${
        circularFrame ? 'circle' : 'square'
      }`}
      sx={containerSx}
    >
      <FramedImage
        testId={`${testId}__framedImage--left`}
        circularFrame={circularFrame}
        imageUrl={primaryImageUrl}
        className="SwapStack__image SwapStack__image--left"
        responsiveSizes={responsiveImageSizes}
        relativeImageSizeInLayout={relativeImageSizeInLayout}
        sx={leftImageSx}
      />
      <FramedImage
        {...rightImageProps}
        imageUrl={secondaryImageUrl || primaryImageUrl}
      />
    </Box>
  );
}

SwapStack.displayName = 'SwapStack';
