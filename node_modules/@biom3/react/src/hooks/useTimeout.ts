import { useEffect, useRef } from 'react';

/**
 * This is a TypeScript function that sets a timeout and returns a reference to it.
 * @param callback - A function that will be executed after the specified delay has elapsed.
 * @param {number} delay - The delay parameter is a number that represents the amount of time, in
 * milliseconds, that the timeout should wait before executing the callback function.
 * @returns The `useTimeout` function returns a `timeoutRef` object which is a reference to the timeout
 * ID returned by `window.setTimeout`. This can be used to clear the timeout using
 * `window.clearTimeout(timeoutRef.current)`.
 */
export function useTimeout(callback: () => void, delay: number) {
  const timeoutRef = useRef<number>();
  const savedCallback = useRef(callback);

  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    timeoutRef.current = window.setTimeout(
      () => savedCallback.current(),
      delay,
    );
    return () => window.clearTimeout(timeoutRef.current);
  }, [delay]);
  return timeoutRef;
}
