import { Dispatch, useEffect, useState } from 'react';

/**
 * This is a TypeScript function that uses local storage to store and retrieve a value, with a default
 * value provided if none exists.
 * @param {string} key - The key is a string that is used as the key to store and retrieve the value
 * from the local storage. It should be unique and descriptive enough to identify the value it
 * represents.
 * @param {ValueType} defaultValue - The default value to be used if there is no value stored in the
 * localStorage for the given key. It should be of type ValueType, which is a generic type parameter
 * that extends the string type.
 * @returns The function `useLocalStorage` returns an array with two elements: the current value stored
 * in local storage (or the default value if no value is found), and a function to update the value in
 * local storage. The first element in the array has a type of `ValueType`, which is a generic type
 * that is inferred from the `defaultValue` argument passed to the function. The second element in the
 * array
 */
export function useLocalStorage<ValueType extends string>(
  key: string,
  defaultValue: ValueType,
): [ValueType, Dispatch<ValueType>] {
  const [value, setValue] = useState(() => {
    let currentValue;
    try {
      currentValue = JSON.parse(localStorage.getItem(key) || defaultValue);
    } catch (error) {
      currentValue = defaultValue;
    }
    return currentValue;
  });
  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value));
  }, [value, key]);

  return [value, setValue];
}
