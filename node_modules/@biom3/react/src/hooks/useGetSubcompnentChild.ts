import { Children, ComponentType, ReactElement, ReactNode } from 'react';
import { isFragment } from 'react-is';

import {
  isChildSubcomponent,
  isSubcomponentNestedInSmartClone,
} from '../utils/subcomponentHelpers';

/**
 * This function returns the first child element that matches a given subcomponent or an array of
 * subcomponents.
 * @param {ReactNode} children - The `children` parameter is a ReactNode, which represents the child
 * elements passed to a component. It can be a single child element or an array of child elements.
 * @param {ComponentType<TProps> | Array<ComponentType<TProps>>} subcomponent - The `subcomponent`
 * parameter is either a single React component or an array of React components that the function is
 * searching for within the `children` prop. The function returns the first matching child element that
 * is a subcomponent of the specified `subcomponent`.
 * @returns The function `useGetSubcomponentChild` returns a React element of type
 * `ReactElement<TProps>` or `undefined`. It takes two arguments: `children` of type `ReactNode` and
 * `subcomponent` of type `ComponentType<TProps> | Array<ComponentType<TProps>>`. The function uses
 * `Children.toArray` to convert the `children` prop to an array and then uses
 */
export function useGetSubcomponentChild<TProps>(
  children: ReactNode,
  subcomponent: ComponentType<TProps> | Array<ComponentType<TProps>>,
) {
  if (isFragment(children)) {
    return Children.toArray(children.props.children).find(child => {
      if (Array.isArray(subcomponent)) {
        return subcomponent.some(
          sub =>
            isChildSubcomponent(child, sub) ||
            isSubcomponentNestedInSmartClone(child, sub),
        );
      }
      return (
        isChildSubcomponent(child, subcomponent) ||
        isSubcomponentNestedInSmartClone(child, subcomponent)
      );
    }) as undefined | ReactElement<TProps>;
  }

  return Children.toArray(children).find(child => {
    if (Array.isArray(subcomponent)) {
      return subcomponent.some(
        sub =>
          isChildSubcomponent(child, sub) ||
          isSubcomponentNestedInSmartClone(child, sub),
      );
    }
    return (
      isChildSubcomponent(child, subcomponent) ||
      isSubcomponentNestedInSmartClone(child, subcomponent)
    );
  }) as undefined | ReactElement<TProps>;
}
