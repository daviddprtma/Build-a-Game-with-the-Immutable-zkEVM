import { useMemo } from 'react';

import { useWindowSizeStore } from '../providers';
import { SafeSizes } from '../types/image';
import { MakeResponsive } from '../types/shared';
import { getStartingSize } from '../utils/styleHelpers';
import { useTheme } from '.';

export function useGetCurrentSizeClass<Size extends string>(
  size: MakeResponsive<Size>,
  defaultSize: Size,
  safeSizes: SafeSizes,
) {
  const startingSize = getStartingSize(size, defaultSize, safeSizes);
  const { state: windowWidth } = useWindowSizeStore(state => state.width);
  const {
    base: { breakpointAsArray },
  } = useTheme();
  const currentSizeClass = useMemo(() => {
    if (!windowWidth) {
      return startingSize;
    }

    if (Array.isArray(size)) {
      const actualResponsiveSizes = [...size];
      actualResponsiveSizes.shift();
      return actualResponsiveSizes.reduce((accum, curr, index) => {
        let newAccum = accum;
        if (curr !== null && windowWidth >= breakpointAsArray[index]) {
          newAccum = curr;
        }
        return newAccum;
      }, startingSize) as Size;
    }

    return safeSizes.indexOf(size) !== -1 ? size : startingSize;
  }, [windowWidth, size, safeSizes, startingSize, breakpointAsArray]);

  return currentSizeClass;
}
