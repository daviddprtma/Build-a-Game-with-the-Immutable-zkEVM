import { ReactNode, useContext } from 'react';

import { DrawerOverlay, PopoverOverlay } from '../../overlays';
import { ClientOnlyPortal } from '../../overlays/ClientOnlyPortal';
import { ModalOverlay } from '../../overlays/ModalOverlay';
import { ToastOverlay } from '../../overlays/ToastOverlay';
import { StringWithoutHash } from '../../types/text';
import { BiomePortalIdContext } from '../BiomePortalIdProvider/BiomePortalIdProvider';
import { BiomeOverlaysProvider } from './context';

const MODAL_SELECTOR = 'modal-container';
const DRAWER_SELECTOR = 'drawer-container';
const POPOVER_SELECTOR = 'popover-container';
const TOAST_SELECTOR = 'toast-container';

export type MountedOverlayAndProviderProps<T> = {
  children: ReactNode;
  modalContainerId?: StringWithoutHash<T>;
  drawerContainerId?: StringWithoutHash<T>;
  popoverContainerId?: StringWithoutHash<T>;
  toastContainerId?: StringWithoutHash<T>;
};

export function MountedOverlaysAndProvider<T extends string>({
  children,
  modalContainerId,
  drawerContainerId,
  popoverContainerId,
  toastContainerId,
}: MountedOverlayAndProviderProps<T>) {
  const portalId = useContext(BiomePortalIdContext);

  return (
    <BiomeOverlaysProvider>
      {children}

      {/* MODAL */}
      <ClientOnlyPortal
        selector={
          modalContainerId
            ? `#${modalContainerId}`
            : `#${MODAL_SELECTOR}${portalId}`
        }
      >
        <ModalOverlay hasExternalContainer={Boolean(modalContainerId)} />
      </ClientOnlyPortal>
      {!modalContainerId && <div id={`${MODAL_SELECTOR}${portalId}`} />}

      {/* BOTTOM SHEET */}
      <ClientOnlyPortal
        selector={
          drawerContainerId
            ? `#${drawerContainerId}`
            : `#${DRAWER_SELECTOR}${portalId}`
        }
      >
        <DrawerOverlay hasExternalContainer={Boolean(drawerContainerId)} />
      </ClientOnlyPortal>
      {!drawerContainerId && <div id={`${DRAWER_SELECTOR}${portalId}`} />}

      {/* POPOVER */}
      <ClientOnlyPortal
        selector={
          popoverContainerId
            ? `${popoverContainerId}`
            : `#${POPOVER_SELECTOR}${portalId}`
        }
      >
        <PopoverOverlay />
      </ClientOnlyPortal>
      {!popoverContainerId && <div id={`${POPOVER_SELECTOR}${portalId}`} />}

      {/* TOAST */}
      <ClientOnlyPortal
        selector={
          toastContainerId
            ? `#${toastContainerId}`
            : `#${TOAST_SELECTOR}${portalId}`
        }
      >
        <ToastOverlay />
      </ClientOnlyPortal>
      {!toastContainerId && <div id={`${TOAST_SELECTOR}${portalId}`} />}
    </BiomeOverlaysProvider>
  );
}
