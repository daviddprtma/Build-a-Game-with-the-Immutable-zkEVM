/* eslint-disable no-param-reassign */
import {
  BaseTokensLeaf,
  DesignTokens,
  designTokens,
  leafIsObject,
  smartPickTokenValue,
} from '@biom3/design-tokens';
import { injectGlobal } from '@emotion/css';
import { Global, Interpolation, ThemeProvider } from '@emotion/react';
import { ReactNode } from 'react';
import merge from 'ts-deepmerge';

import { useConvertSxToEmotionStyles } from '../../../hooks';
import { DeeplyNestedSx } from '../../../types/sxProps';
import { BiomeTheme } from '../../../types/theme';
import { InputTheme } from '../shared';

// eslint-disable-next-line @typescript-eslint/no-unused-expressions
injectGlobal`
  @import url("https://biome.immutable.com/hosted-assets/css/im-fonts-v4.css");
  /*  ^ @NOTE: never put anyting (even a comment), before the fontFaceStylesImport */
`;

export function recursivelyConvertNestedColorTokens<T extends BaseTokensLeaf>(
  leaf: T,
  theme: DesignTokens,
) {
  if (leafIsObject(leaf)) {
    let leafKey: keyof typeof leaf;
    // eslint-disable-next-line no-restricted-syntax
    for (leafKey in leaf) {
      const child = leaf[leafKey];
      if (typeof child === 'object') {
        leaf[leafKey] = recursivelyConvertNestedColorTokens(
          leaf[leafKey],
          theme,
        );
      } else if (typeof child === 'string' && child.includes('base.')) {
        leaf[leafKey] = smartPickTokenValue(theme, child);
      }
    }
  }
  return leaf;
}

function augmentThemeWithCalculatedTokens(theme: DesignTokens): BiomeTheme {
  const { base, ...other } = theme;
  const { color } = base;
  return {
    base: {
      ...base,
      color: recursivelyConvertNestedColorTokens(color, theme),
      breakpointAsArray: Object.values(base.breakpoint),
    },
    ...other,
  };
}

const DEFAULT_THEME = designTokens;

export type BiomeThemeProviderProps = {
  theme?: InputTheme;
  children: ReactNode;
  globalSx?: DeeplyNestedSx;
};

export function BiomeThemeProvider({
  children,
  theme = DEFAULT_THEME,
  globalSx = {},
}: BiomeThemeProviderProps) {
  const defaultGlobalSx = {
    '*, *::before, *::after': {
      boxSizing: 'border-box',
    },
    'html, body': {
      height: '100%',
      margin: 0,
    },
    'pre, p, h1, h2, h3, h4, h5, h6': {
      margin: 0,
    },
    body: {
      WebkitFontSmoothing: 'antialiased',
      MozOsxFontSmoothing: 'grayscale',
      textRendering: 'optimizeLegibility',
    },
  };
  const augmentedTheme = augmentThemeWithCalculatedTokens(theme);
  const globalStyles = useConvertSxToEmotionStyles(
    merge(defaultGlobalSx, globalSx),
    augmentedTheme,
  );

  return (
    <ThemeProvider theme={augmentedTheme}>
      <Global styles={globalStyles as Interpolation<BiomeTheme>} />
      {children}
    </ThemeProvider>
  );
}
