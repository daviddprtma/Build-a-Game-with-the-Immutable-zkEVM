import { onLightBase } from '@biom3/design-tokens';
import isEqual from 'lodash.isequal';
import { useEffect } from 'react';

import { useTheme } from '../../../hooks';
import { cyMountWithProviders, cySmartGet } from '../../../utils/testHelpers';
import { BiomeThemeProvider } from './BiomeThemeProvider';

function DemoComponent({ onThemeProps }: any) {
  const theme = useTheme();
  useEffect(() => {
    onThemeProps?.(theme);
  }, [theme, onThemeProps]);
  return <div>demo component</div>;
}

describe('<BiomeThemeProvider />', () => {
  it('should provide children access to biome theme tokens', () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeThemeProvider theme={{ base: onLightBase }}>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeThemeProvider>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return theme.base.color.accent[1] === onLightBase.color.accent[1];
      }),
    );
  });

  it('should add breakpointsAsArray field to the theme tokens, when given breakpoints as an object', () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeThemeProvider theme={{ base: onLightBase }}>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeThemeProvider>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return isEqual(
          theme.base.breakpointAsArray,
          Object.values(onLightBase.breakpoint),
        );
      }),
    );
  });

  it(`should default to BIOME's onLight theme design-tokens, when no theme is provided`, () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeThemeProvider>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeThemeProvider>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return (
          isEqual(theme.base.color, onLightBase.color) &&
          isEqual(theme.base.text, onLightBase.text)
        );
      }),
    );
  });

  it('should allow global styles to be rendered, where neccissary', () => {
    cySmartGet('html > body').should(
      'not.have.css',
      'background-color',
      'gold',
    );
    cyMountWithProviders(
      <BiomeThemeProvider globalSx={{ body: { bgc: 'gold' } }}>
        <div>something</div>
      </BiomeThemeProvider>,
    );
    cySmartGet('html > body').should('have.backgroundColor', 'gold');
  });
});
