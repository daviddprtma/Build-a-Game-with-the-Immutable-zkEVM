import { designTokens, onDarkBase, onLightBase } from '@biom3/design-tokens';
import {
  createContext,
  ReactNode,
  useCallback,
  useContext,
  useMemo,
  useState,
} from 'react';

import { useBrowserLayoutEffect } from '../../../hooks';
import { DeeplyNestedSx } from '../../../types/sxProps';
import { BiomeThemeProvider } from '../BiomeThemeProvider';
import { InputTheme } from '../shared';

export const ToggleableThemeContext = createContext<{
  toggleTheme: () => void;
  currentTheme: typeof designTokens;
}>({ toggleTheme: () => {}, currentTheme: { base: onLightBase } });

export function ToggleableThemeProvider({
  children,
  lightTheme = { base: onLightBase },
  darkTheme = { base: onDarkBase },
  autoPickTheme = false,
  globalSx,
}: {
  children: ReactNode;
  lightTheme?: InputTheme;
  darkTheme?: InputTheme;
  autoPickTheme?: boolean;
  globalSx?: DeeplyNestedSx;
}) {
  const [currentTheme, setCurrentTheme] = useState({
    base: onLightBase,
  });

  const toggleTheme = useCallback(() => {
    setCurrentTheme(currentTheme.base === onLightBase ? darkTheme : lightTheme);
  }, [currentTheme.base, darkTheme, lightTheme]);

  // @NOTE: set the current color mode, based on the user's OS color mode:
  useBrowserLayoutEffect(() => {
    if (!autoPickTheme) return;
    if (
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches
    ) {
      setCurrentTheme(darkTheme);
    }
    window
      .matchMedia('(prefers-color-scheme: dark)')
      .addEventListener('change', event => {
        setCurrentTheme(event.matches ? darkTheme : lightTheme);
      });
  }, []);

  const contextValue = useMemo(() => {
    return { toggleTheme, currentTheme };
  }, [currentTheme, toggleTheme]);

  return (
    <ToggleableThemeContext.Provider value={contextValue}>
      <BiomeThemeProvider theme={currentTheme} globalSx={globalSx}>
        {children}
      </BiomeThemeProvider>
    </ToggleableThemeContext.Provider>
  );
}

export const useToggleableTheme = () => {
  const context = useContext(ToggleableThemeContext);
  if (context === undefined) {
    throw new Error(
      'useToggleableTheme must be used within ToggleableThemeProvider',
    );
  }
  return context;
};
