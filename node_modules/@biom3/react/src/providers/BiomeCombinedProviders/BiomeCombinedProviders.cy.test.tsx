import { onLightBase } from '@biom3/design-tokens';
import isEqual from 'lodash.isequal';
import { useEffect } from 'react';

import { useTheme } from '../../hooks';
import { cyMountWithProviders, cySmartGet } from '../../utils/testHelpers';
import { useWindowSizeStore } from '../BiomeWindowSize';
import { BiomeCombinedProviders } from './BiomeCombinedProviders';

function DemoComponent({ onThemeProps, onWindowSize }: any) {
  const theme = useTheme();
  const { state: windowSize } = useWindowSizeStore(store => store);
  useEffect(() => {
    onThemeProps?.(theme);
  }, [theme, onThemeProps]);
  useEffect(() => {
    onWindowSize?.(windowSize);
  }, [windowSize, onWindowSize]);
  return <div>demo component</div>;
}

describe('<BiomeCombinedProviders />', () => {
  it('should provide children access to biome theme tokens', () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeCombinedProviders theme={{ base: onLightBase }}>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeCombinedProviders>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return theme.base.color.accent[1] === onLightBase.color.accent[1];
      }),
    );
  });

  it('should add breakpointsAsArray field to the theme tokens, when given breakpoints as an object', () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeCombinedProviders theme={{ base: onLightBase }}>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeCombinedProviders>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return isEqual(
          theme.base.breakpointAsArray,
          Object.values(onLightBase.breakpoint),
        );
      }),
    );
  });

  it(`should default to BIOME's onLight theme design-tokens, when no theme is provided`, () => {
    const onThemePropsStub = cy.stub().as('onThemePropsStub');
    cyMountWithProviders(
      <BiomeCombinedProviders>
        <DemoComponent onThemeProps={onThemePropsStub} />
      </BiomeCombinedProviders>,
    );

    cySmartGet('@onThemePropsStub').should(
      'be.calledWithMatch',
      Cypress.sinon.match(theme => {
        return (
          isEqual(theme.base.color, onLightBase.color) &&
          isEqual(theme.base.text, onLightBase.text)
        );
      }),
    );
  });

  it('should mount a layer for tooltips, modals and popovers', () => {
    cyMountWithProviders(
      <BiomeCombinedProviders>
        <div data-testid="moo">moo</div>
      </BiomeCombinedProviders>,
    );

    cySmartGet('moo').should('exist');
    cySmartGet("[id^='tooltip-container']").should('exist');
    cySmartGet("[id^='popover-container']").should('exist');
    cySmartGet("[id^='modal-container']").should('exist');
  });

  it('should provide children access to window size information', () => {
    const onWindowSizeStub = cy.stub().as('onWindowSizeStub');
    cyMountWithProviders(
      <BiomeCombinedProviders>
        <DemoComponent onWindowSize={onWindowSizeStub} />
      </BiomeCombinedProviders>,
    );

    cySmartGet('@onWindowSizeStub').should('be.calledWithMatch', {
      width: 500,
      height: 500,
    });
  });
});
