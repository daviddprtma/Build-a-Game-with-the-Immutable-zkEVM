import {
  MountedOverlayAndProviderProps,
  MountedOverlaysAndProvider,
} from '../BiomeOverlaysProvider/MountedOverlaysAndProvider';
import { BiomePortalIdProvider } from '../BiomePortalIdProvider';
import { BiomeShadowRootContext } from '../BiomeShadowRootProvider/context';
import { MountedTooltipOverlayAndProvider } from '../BiomeTooltipProvider';
import {
  DEFAULT_RESIZE_DEBOUNCE_TIME,
  SetWindowSize,
  SetWindowSizeProps,
} from '../BiomeWindowSize';
import { BiomeWindowSizeProvider } from '../BiomeWindowSize/context';
import { ToggleableThemeProvider } from '../theming';
import { BiomeThemeProvider } from '../theming/BiomeThemeProvider';
import { BiomeThemeProviderProps } from '../theming/BiomeThemeProvider/BiomeThemeProvider';
import { InputTheme } from '../theming/shared';

// @TODO: for some reason this needs to be a type helper, for the discriminated
// union to kick in and actually work. Simply using a discriminated union
// inside the type intersection leaves react unable to decide that darkTheme
// cannot be supplied when withThemeToggle is false or undefined. :(
// TS PLAYGROUND LINK:
// https://www.typescriptlang.org/play?ts=4.9.5#code/JYWwDg9gTgLgBAbzgJQKYEMDGMByEAmqccAvnAGZQQhwDkUG2tA3AFCswCeYRAkgHZgArjAAqAC1QgiAXjgBnGFGD8A5m1aoAHpFhwuPOAFkIEAApUw8uHKSZxwADb4G-APwAuFI1wFUzUjgAMjhWYgAKBDDiGIB3YBhxCSlUUQhVVUdULyUhf2iYuEdgVXExSWlPOAFhcpS2QuJ8dCgAa2TKrxqRDvzG-QrUKv5UADdUKAaYkmiAH0Q4eMTetIysqvJ0R3kieaF+QnIVVHwAxJSq7rrpAJIASg1yfexgCH5jUwBhakgR-hhwmBLPIvCZzMC7ogCnBMG9FAslklBqtMkQyHIgRArFNiLD+PCkMVStdUAAaODNNq9cnnaSBOSIlbpVHQwpuBYAOi5mKsNMGXn2h2O+FIrJiXii-X6XI5PPkpLF-SJZV6AoOqCOI3wCqljUp7X5cEFGuFOqlJA0hTx8ggWQ5jnS4VoAAFXW7aOTlSTyfrqQMUg9WDN2AB6EMKcQQITOOATKhQDysMHfcBvVD-SJFEoqw20ACMtFIgeTPzTGaQiwSSJSKKyOSgeT5KS8+cL9zYJdTfwBFcZyOZdYoWx2nuzJJbBaLGlYYYjUZj-Ag8Dj0ETnd+6Z7xD7NYH2X0DbJWeJqrok-bSa+pe7mdp+9bU8vEBTG-LF-YQA
type GetThemeToggleProps<ThemeToggle extends boolean | undefined> =
  ThemeToggle extends true
    ? {
        withThemeToggle: ThemeToggle;
        autoPickTheme?: boolean;
        lightTheme?: InputTheme;
        darkTheme?: InputTheme;
      }
    : ThemeToggle extends false
    ? { withThemeToggle: ThemeToggle; theme?: InputTheme }
    : { withThemeToggle?: never; theme?: InputTheme };

export type BiomeCombinedProvidersProps<
  Id extends string,
  ThemeToggle extends boolean | undefined,
> = Omit<BiomeThemeProviderProps, 'theme'> &
  SetWindowSizeProps &
  MountedOverlayAndProviderProps<Id> &
  GetThemeToggleProps<ThemeToggle> & {
    shadowRoot?: ShadowRoot;
  };

export function BiomeCombinedProviders<
  Id extends string,
  ThemeToggle extends boolean | undefined = undefined,
>(props: BiomeCombinedProvidersProps<Id, ThemeToggle>) {
  const {
    children,
    withThemeToggle,
    resizeDebounceDuration = DEFAULT_RESIZE_DEBOUNCE_TIME,
    modalContainerId,
    drawerContainerId,
    popoverContainerId,
    toastContainerId,
    shadowRoot,
    globalSx,
  } = props;
  const { autoPickTheme, lightTheme, darkTheme, theme } = withThemeToggle
    ? { ...props, theme: undefined }
    : {
        ...props,
        autoPickTheme: undefined,
        lightTheme: undefined,
        darkTheme: undefined,
      };

  const wrappedChildren = (
    <BiomeWindowSizeProvider>
      <SetWindowSize resizeDebounceDuration={resizeDebounceDuration} />
      <MountedTooltipOverlayAndProvider>
        <MountedOverlaysAndProvider
          modalContainerId={modalContainerId}
          drawerContainerId={drawerContainerId}
          popoverContainerId={popoverContainerId}
          toastContainerId={toastContainerId}
        >
          {children}
        </MountedOverlaysAndProvider>
      </MountedTooltipOverlayAndProvider>
    </BiomeWindowSizeProvider>
  );

  return (
    <BiomePortalIdProvider>
      <BiomeShadowRootContext.Provider value={shadowRoot}>
        {withThemeToggle ? (
          <ToggleableThemeProvider
            lightTheme={lightTheme}
            darkTheme={darkTheme}
            globalSx={globalSx}
            autoPickTheme={autoPickTheme}
          >
            {wrappedChildren}
          </ToggleableThemeProvider>
        ) : (
          <BiomeThemeProvider theme={theme} globalSx={globalSx}>
            {wrappedChildren}
          </BiomeThemeProvider>
        )}
      </BiomeShadowRootContext.Provider>
    </BiomePortalIdProvider>
  );
}
