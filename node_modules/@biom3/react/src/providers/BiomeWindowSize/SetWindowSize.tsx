import debounce from 'lodash.debounce';

import { useBrowserLayoutEffect, useEventListener } from '../../hooks';
import { DEFAULT_RESIZE_DEBOUNCE_TIME } from '.';
import { useWindowSizeStore } from './context';

export type SetWindowSizeProps = { resizeDebounceDuration?: number };

export function SetWindowSize({
  resizeDebounceDuration = DEFAULT_RESIZE_DEBOUNCE_TIME,
}: SetWindowSizeProps) {
  const { setState } = useWindowSizeStore(state => state);
  const debouncedOnResize = debounce(() => {
    setState({ width: window.innerWidth, height: window.innerHeight });
  }, resizeDebounceDuration);
  useEventListener('resize', debouncedOnResize, {
    current: typeof window !== 'undefined' ? window : null,
  });
  useBrowserLayoutEffect(
    () => setState({ width: window.innerWidth, height: window.innerHeight }),
    [],
  );
  return null;
}
