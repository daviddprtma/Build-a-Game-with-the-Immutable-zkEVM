import ls from 'localstorage-slim';

import { AllIconKeys, dualVariantIcons } from '../components/Icon/Icon';
import { AllLogoKeys } from '../components/Logo/Logo';
import { IconVariant } from '../types/icon';

type IconChildJsonResponse = {
  regular: string[];
  bold?: string[];
};

const LS_OPTIONS = {
  ttl: 1000 * 60 * 60 * 24 * 4, // 4 days
};

export async function fetchIconContent(
  icon: AllIconKeys,
  variant: IconVariant,
): Promise<string[]> {
  const localStorageKey = `@biom3/react icon-cache: ${icon}-${variant}`;
  const cachedIcon = ls.get(localStorageKey);

  if (cachedIcon) {
    return cachedIcon as string[];
  }

  try {
    const resp = await fetch(
      `https://biome.immutable.com/hosted-assets/icons/${icon}.json`,
    );
    const children = (await resp.json()) as IconChildJsonResponse;
    const content =
      variant === 'bold' && Object.keys(dualVariantIcons).includes(icon)
        ? (children[variant] as string[])
        : children.regular;
    ls.set(localStorageKey, content, LS_OPTIONS);
    return content;
  } catch (err) {
    console.error(`ðŸ§¬ BIOME (icon) Fetch Error ðŸš¨:`, err);
    return [];
  }
}

export async function fetchLogoContent(logo: AllLogoKeys): Promise<string[]> {
  const localStorageKey = `@biom3/react logo-cache: ${logo}`;
  const cachedIcon = ls.get(localStorageKey);

  if (cachedIcon) {
    return cachedIcon as string[];
  }

  try {
    const resp = await fetch(
      `https://biome.immutable.com/hosted-assets/logos/${logo}.json`,
    );
    const data = await resp.json();
    ls.set(localStorageKey, data, LS_OPTIONS);
    return data;
  } catch (err) {
    console.error(`ðŸ§¬ BIOME (logo) Fetch Error ðŸš¨:`, err);
    return [];
  }
}
