import { ComponentType, isValidElement, ReactElement, ReactNode } from 'react';
import { isFragment } from 'react-is';

import { SmartClone } from '../components/SmartClone';

export function checkForElementChildType(
  child: ReactNode,
): child is ReactElement & { type: { displayName: string } } {
  return (
    isValidElement(child) &&
    typeof child?.type !== 'string' &&
    typeof child?.type !== 'number' &&
    typeof child?.type !== 'boolean'
  );
}

export function isChildSubcomponent(
  child: ReactNode,
  subcomponent: ComponentType<any>,
): child is ReactElement & { type: { displayName: string } } {
  if (checkForElementChildType(child)) {
    if (child.type === subcomponent) {
      return true;
    }

    // @NOTE: allow for when the child is a SmartClone component,
    // and the desired subcomponent as its child
    if (
      // @TODO: not sure why the below crashes webpack:
      // child.type === SmartClone - need to investigate
      child.type.displayName === 'SmartClone' &&
      child.props.children.type === subcomponent
    ) {
      return true;
    }

    // @NOTE: allow for when the child is an overlay component,
    // and the desired subcomponent is its Target child
    if (/Modal|Tooltip|Drawer|Popover/.test(child.type.displayName)) {
      const potentialTargetElement = child.props.children?.[0];
      if (/\.Target/.test(potentialTargetElement?.type?.displayName)) {
        const targetChild = potentialTargetElement?.props?.children;
        if (targetChild?.type === subcomponent) {
          return true;
        }
      }
    }
  }

  return false;
}

export function getSubcomponentChild(
  children: ReactNode | ReactNode[],
  subcomponent: ComponentType<any>,
) {
  if (Array.isArray(children)) {
    return children.find(child => isChildSubcomponent(child, subcomponent));
  }
  return isChildSubcomponent(children, subcomponent) ? children : null;
}

export function isSubcomponentNestedInSmartClone<TProps>(
  child: ReactNode,
  subcomponent: ComponentType<TProps>,
): boolean {
  if (checkForElementChildType(child)) {
    const nestedChild = child.props.children;
    return child.type === SmartClone && nestedChild.type === subcomponent;
  }
  return false;
}

export function isSubcomponentNestedInFragment<TProps>(
  child: ReactNode,
  subcomponent: ComponentType<TProps>,
): boolean {
  if (checkForElementChildType(child)) {
    const nestedChild = child.props.children;
    return isFragment(child) && nestedChild.type === subcomponent;
  }
  return false;
}
