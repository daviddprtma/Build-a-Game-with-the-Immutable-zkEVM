import { Properties } from 'csstype';
import merge from 'ts-deepmerge';

import { SafeSizes } from '../types/image';
import { MakeResponsive, RemoveErrorBrand } from '../types/shared';
import { SxProps } from '../types/sxProps';
import { BiomeTheme } from '../types/theme';
import { isError } from './textStyleHelpers';

export const inputResetStyles = (disabled?: boolean): Properties => ({
  margin: 0,
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  cursor: disabled ? 'default' : 'pointer',
  border: 'none',
  appearance: 'none',
});

export function isSafeSize<T>(
  size: T,
  safeSizes: SafeSizes,
): size is NonNullable<RemoveErrorBrand<T>> {
  return typeof size === 'string' && safeSizes.includes(size);
}

export function getStartingSize<T>(
  size: MakeResponsive<T>,
  defaultSize: T,
  safeSizes: SafeSizes,
) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  const startingSize = sizeAsArray.shift();
  return isSafeSize(startingSize, safeSizes) ? startingSize : defaultSize;
}

export function setDefaultWidthSx(sx: SxProps, width: string) {
  return sx.w ? { w: width } : sx.width ? { width } : { width };
}

export function setDefaultHeightSx(sx: SxProps, height: string) {
  return sx.h ? { w: height } : sx.height ? { height } : { height };
}

export function setDefaultSxTextColor(sx: SxProps, color: string) {
  return sx.c ? { c: color } : sx.color ? { color } : { color };
}

export function setDefaultMinWidthSx(sx: SxProps, minWidth: string) {
  return sx.minw
    ? { minw: minWidth }
    : sx.minWidth
    ? { minWidth }
    : { minWidth };
}

export type RenderSxProps<S extends string> = {
  theme: BiomeTheme;
  size: S;
  [x: string]: unknown;
};

export function getResponsiveSx<S extends string>({
  theme,
  size,
  renderSxAtSize,
  ...props
}: {
  theme: BiomeTheme;
  size: MakeResponsive<S>;
  renderSxAtSize: (props: RenderSxProps<S>) => Properties;
}) {
  const sizeAsArray = Array.isArray(size) ? [...size] : [size];
  sizeAsArray.shift();

  const sizeStyles = merge(
    ...sizeAsArray.map((responsiveSize, index) => {
      if (responsiveSize != null && !isError(responsiveSize)) {
        const mediaStyleRule = `@media screen and (min-width: ${theme.base.breakpointAsArray?.[index]}px)`;
        return {
          [mediaStyleRule]: renderSxAtSize({
            size: responsiveSize,
            theme,
            ...props,
          }),
        };
      }
      return {};
    }),
  );

  return sizeStyles;
}
