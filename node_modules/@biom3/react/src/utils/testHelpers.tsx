import { base, DesignTokens } from '@biom3/design-tokens';
// eslint-disable-next-line import/no-extraneous-dependencies
import { mount } from 'cypress/react18';
import { ReactNode } from 'react';
import merge from 'ts-deepmerge';

import { MockNextRouter } from '../mocks';
import { MockNextRouterProps } from '../mocks/mock-next-router.component';
import { BiomeCombinedProviders, ToggleableThemeProvider } from '../providers';
import { BiomeThemeProvider } from '../providers/theming/BiomeThemeProvider';

type CyMountWithProvidersProps = {
  theme?: Partial<DesignTokens>;
  useAllProviders?: boolean;
  withThemeToggle?: boolean;
  mockRouterProps?: MockNextRouterProps;
};
export function cyMountWithProviders(
  children: ReactNode,
  {
    theme,
    useAllProviders = true,
    withThemeToggle = false,
    mockRouterProps = {},
  }: CyMountWithProvidersProps = {},
) {
  let baseTheme: DesignTokens = { base };
  if (theme) baseTheme = merge(baseTheme, theme) as DesignTokens;
  return mount(
    useAllProviders ? (
      <MockNextRouter {...mockRouterProps}>
        <BiomeCombinedProviders
          withThemeToggle={withThemeToggle}
          {...(!withThemeToggle ? { theme: baseTheme } : {})}
        >
          {children}
        </BiomeCombinedProviders>
      </MockNextRouter>
    ) : withThemeToggle ? (
      <ToggleableThemeProvider>{children}</ToggleableThemeProvider>
    ) : (
      <BiomeThemeProvider theme={baseTheme}>{children}</BiomeThemeProvider>
    ),
  );
}

/**
 * Allows the simple selection of testid's
 *
 * @param testId - (string) the selector lookup string
 * @returns Cypress.Chainable
 *
 * @alpha maturity
 */
export const cyGetByTestId = (
  testId: string,
  options?: {
    domElement?: string;
  },
) => {
  return cy.get(
    `${options?.domElement ? options.domElement : ''}[data-testid="${testId}"]`,
  );
};

/**
 * Allows the simple selection of both cypress aliases and testids
 *
 * @param selector - the selector lookup string
 * @returns Cypress.Chainable
 *
 * @alpha maturity
 */
export function cySmartGet(selector: string): Cypress.Chainable {
  return selector.includes('@') ||
    selector.includes(' ') ||
    selector.includes('#') ||
    selector.includes('[')
    ? cy.get(selector)
    : cyGetByTestId(selector);
}

/**
 * Returns a function that takes any array and validates that it exhaustively contains and matches all members of the type union originally passed in.
 * @example `const arrayOfAllLinkSizes = arrayOfAll<'small' | 'medium'>();`
 * // arrayOfAllLinkSizes makes sure any array passed in matches ['small', 'medium'] or ['medium', 'small'].
 */
export function arrayOfAll<T>() {
  // eslint-disable-next-line func-names
  return function <U extends T[]>(
    array: U &
      ([T] extends [U[number]]
        ? unknown
        : 'Error: Array does not match type union. Array either does not contain all type union members or contains members not in type union.'),
  ) {
    return array;
  };
}

export function getSrcsetSizes(srcset: string) {
  const sources = srcset.split('w, ').map((s: string) => s.trim());
  const sizes = sources
    .map((src: string) => {
      if (src !== '') {
        return parseInt(src.split('&w=')[1], 10);
      }
      return null;
    })
    .filter(Boolean);
  return sizes;
}
