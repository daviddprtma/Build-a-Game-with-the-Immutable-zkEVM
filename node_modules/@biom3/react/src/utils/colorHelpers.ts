export function hexToRgb(hex: string): {
  r: number;
  g: number;
  b: number;
  a?: number;
} {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(
    hex,
  );
  return result
    ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
        a: result[4] ? parseInt(result[4], 16) / 255 : undefined,
      }
    : { r: 0, g: 0, b: 0 };
}

export function hexToRgbString(hex: string): string {
  const rgb = hexToRgb(hex);
  if (rgb.a !== undefined && rgb.a !== 1) {
    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${parseFloat(
      rgb.a.toFixed(2),
    )})`;
  }
  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`;
}

export function hexToRgbaString(hex: string, alpha: number): string {
  const rgb = hexToRgb(hex);
  return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${alpha})`;
}

export function hexWithAlphaToRgbaString(hex: string): string {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  const a = parseInt(hex.slice(7, 9), 16) / 255;
  return `rgba(${r}, ${g}, ${b}, ${a})`;
}

export function rgbaToHex(rgba: string): string {
  // Parse the input string to get the individual red, green, blue, and alpha values
  const matches = rgba.match(
    /rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d+(\.\d+)?)\)/,
  );
  if (!matches) return '';

  const [, r, g, b, a] = matches;

  // Convert the red, green, and blue values to hexadecimals
  const rHex = parseInt(r, 10).toString(16);
  const gHex = parseInt(g, 10).toString(16);
  const bHex = parseInt(b, 10).toString(16);

  // Add leading zeros if necessary
  const rHexPadded = rHex.length === 1 ? `0${rHex}` : rHex;
  const gHexPadded = gHex.length === 1 ? `0${gHex}` : gHex;
  const bHexPadded = bHex.length === 1 ? `0${bHex}` : bHex;

  // Convert the alpha value to a hexadecimal
  const aHex = Math.round(parseFloat(a) * 255).toString(16);
  const aHexPadded = aHex.length === 1 ? `0${aHex}` : aHex;

  // Return the final hexadecimal color with transparency
  return `#${rHexPadded}${gHexPadded}${bHexPadded}${aHexPadded}`;
}
