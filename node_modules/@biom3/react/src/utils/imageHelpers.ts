import {
  ImageComponentKind,
  ImageSizeVariant,
  SizeMapping,
  TOLERATED_IMAGE_SIZES,
} from '../types/image';
import { BiomeTheme } from '../types/theme';

export function removeDuplicates(numbers: number[]): number[] {
  // Use a Set to store unique values
  const uniqueNumbers = new Set(numbers);
  // Convert the Set back to an array
  const resultArray = Array.from(uniqueNumbers);
  return resultArray;
}

export function getImageSizesArray(currentSize: number) {
  const index = TOLERATED_IMAGE_SIZES.indexOf(
    currentSize as (typeof TOLERATED_IMAGE_SIZES)[number],
  );

  let closestLargerSize = null;
  if (index === -1) {
    // If currentSize is not found, find the closest larger size
    const largerSizes = TOLERATED_IMAGE_SIZES.filter(
      size => size > currentSize,
    );
    if (largerSizes.length > 0) {
      closestLargerSize = largerSizes.reduce((prev, curr) =>
        Math.abs(curr - currentSize) < Math.abs(prev - currentSize)
          ? curr
          : prev,
      );
    }
  }

  const underSize = index > 0 ? TOLERATED_IMAGE_SIZES[index - 1] : null;
  const matchedSize =
    closestLargerSize !== null ? closestLargerSize : currentSize;
  const largeSize = TOLERATED_IMAGE_SIZES.find(
    size => size > currentSize,
  ) as number;
  const xLargeSize = TOLERATED_IMAGE_SIZES.find(size => size > largeSize);

  const sizes = [underSize, matchedSize, largeSize, xLargeSize];
  const refinedSizes = sizes.filter(size => size !== null) as number[];
  const sortedSizes = refinedSizes.sort((n1, n2) => n1 - n2);
  const dedupedSizes = removeDuplicates(sortedSizes);
  return dedupedSizes;
}

export function pickResponsiveSize(
  size: ImageSizeVariant | null,
  sizeMapping: SizeMapping,
) {
  switch (size) {
    case 'xLarge':
      return getImageSizesArray(sizeMapping.xLarge);
    case 'large':
      return getImageSizesArray(sizeMapping.large);
    case 'small':
      return getImageSizesArray(sizeMapping.small);
    case 'medium':
    default:
      return getImageSizesArray(sizeMapping.medium);
  }
}

export function pickSizeInLayout(
  size: ImageSizeVariant | null,
  sizeMapping: SizeMapping,
): string {
  switch (size) {
    case 'xLarge':
      return `${sizeMapping.xLarge}px`;
    case 'large':
      return `${sizeMapping.large}px`;
    case 'small':
      return `${sizeMapping.small}px`;
    case 'medium':
    default:
      return `${sizeMapping.medium}px`;
  }
}

export function getImageSizeMapping<AsNum extends boolean = false>(
  componentKind: ImageComponentKind,
  theme: BiomeTheme,
  asNumbers?: AsNum,
) {
  const { base } = theme;
  let sizeMapping: any;
  switch (componentKind) {
    case 'FramedStack':
      sizeMapping = {
        small: asNumbers
          ? parseInt(base.icon.size[300], 10)
          : base.icon.size[300],
        medium: asNumbers
          ? parseInt(base.icon.size[400], 10)
          : base.icon.size[400],
        large: asNumbers
          ? parseInt(base.icon.size[500], 10)
          : base.icon.size[500],
        xLarge: asNumbers
          ? parseInt(base.icon.size[600], 10)
          : base.icon.size[600],
      };
      break;

    case 'SwapStack':
      sizeMapping = {
        small: asNumbers
          ? parseInt(base.icon.size[200], 10)
          : base.icon.size[200],
        medium: asNumbers
          ? parseInt(base.icon.size[250], 10)
          : base.icon.size[250],
        large: asNumbers
          ? parseInt(base.icon.size[400], 10)
          : base.icon.size[400],
        xLarge: asNumbers
          ? parseInt(base.icon.size[500], 10)
          : base.icon.size[500],
      };
      break;

    case 'Avatar':
    default:
      sizeMapping = {
        small: asNumbers
          ? parseInt(base.icon.size[300], 10)
          : base.icon.size[300],
        medium: asNumbers
          ? parseInt(base.icon.size[400], 10)
          : base.icon.size[400],
        large: asNumbers
          ? parseInt(base.icon.size[500], 10)
          : base.icon.size[500],
        xLarge: asNumbers
          ? parseInt(base.icon.size[600], 10)
          : base.icon.size[600],
      };
      break;
  }

  return sizeMapping as Record<
    ImageSizeVariant,
    AsNum extends true ? number : string
  >;
}
