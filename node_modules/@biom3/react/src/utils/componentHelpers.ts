import { jsx } from '@emotion/react';
import { ReactElement, ReactNode } from 'react';
import { isFragment } from 'react-is';

export type ReactElementWithRef = ReactElement & { ref?: HTMLOrSVGElement };

export const cloneElementWithCssProp = (
  element: ReactElementWithRef,
  props: Record<string, unknown>,
) => {
  // EMOTION_TYPE handles non-React elements (native JSX/HTML nodes)
  const clonedElement =
    // eslint-disable-next-line no-underscore-dangle
    element.props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__ || element.type;

  const clonedProps = {
    key: element.key,
    ref: element.ref,
    ...element.props,
    ...props,
  };

  if (props.css || element.props.css) {
    clonedProps.css = [element.props.css, props.css];
  }

  return jsx(clonedElement, clonedProps);
};

export const isReactFragment = (child: ReactNode) => isFragment(child);

export function isChildReactComponent(child: any) {
  return typeof child?.type === 'function';
}

export const serializeChildren = (children: ReactNode | unknown) => {
  // Comparison function to JSON.stringify that can handle
  // circular references and ignores internal React properties.
  // https://github.com/facebook/react/issues/8669#issuecomment-531515508
  const circular = () => {
    const seen = new WeakSet();
    return (key: string, value: unknown) => {
      // Don't compare React's internal props.
      if (key.startsWith('_')) return null;

      if (typeof value === 'object' && value !== null) {
        if (seen.has(value)) return null;
        seen.add(value);
      }
      return value;
    };
  };

  return JSON.stringify(children, circular());
};

export function warnUser(message: string) {
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.warn(
      `ðŸ§¬ BIOME Render Warning ðŸš¨: 
      ${message}`,
    );
  }
}

export function renderNullAndWarnUser(
  componentName: string,
  errorMessage: string = `A component (${componentName}) is currently rendering null, instead of expected subcomponent children. 
This is normally due the usage of non-subcomponent children, within a component which expects only subcomponents children.`,
) {
  warnUser(errorMessage);
  return null;
}

export const noop = () => {};
