import {
  BodySize,
  BodyWeight,
  CaptionSize,
  CaptionWeight,
  HeadingSize,
  HeadingWeight,
} from '@biom3/design-tokens';
import { ElementType, ReactElement, ReactNode } from 'react';

import { Body, Caption, Heading } from '../components/Text';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from './shared';
import { DeeplyNestedSx } from './sxProps';

export type BodyTextProps = {
  size?: MakeResponsive<BodySize>;
  weight?: MakeResponsive<BodyWeight>;
  mono?: boolean;
  shimmer?: number;
  shimmerSx?: DeeplyNestedSx;
};

export type BaseBodyProps = StandardComponentWithProps<
  HTMLSpanElement,
  {
    children?: ReactNode;
  } & BodyTextProps
>;

export type BodyProps<RC extends ReactElement | undefined = undefined> =
  RC extends undefined
    ? DomPropsWithDomRef<'span'> & BaseBodyProps
    : BaseBodyProps & { rc: RC };

export type BaseHeadingProps = StandardComponentWithProps<
  HTMLHeadingElement,
  {
    children?: ReactNode;
    size?: MakeResponsive<HeadingSize>;
    weight?: MakeResponsive<HeadingWeight>;
    autoGenerateId?: boolean;
    id?: string;
  }
>;

export type HeadingProps<RC extends ReactElement | undefined = undefined> =
  RC extends undefined
    ? DomPropsWithDomRef<'h1'> & BaseHeadingProps
    : BaseHeadingProps & { rc: RC };

export type CaptionBaseProps = StandardComponentWithProps<
  HTMLSpanElement,
  {
    children?: ReactNode;
    size?: MakeResponsive<CaptionSize>;
    weight?: MakeResponsive<CaptionWeight>;
  }
>;

export type CaptionProps<RC extends ReactElement | undefined = undefined> =
  RC extends undefined
    ? DomPropsWithDomRef<'span'> & CaptionBaseProps
    : CaptionBaseProps & { rc: RC };

export type StringWithoutHash<T> = T extends `#${string}` ? never : T;

export type BiomeTextComponent = ReactElement;

export function isBody(
  { type }: BiomeTextComponent,
  props: unknown,
): props is Partial<BodyProps<undefined>> {
  return type === Body;
}

export function isHeading(
  { type }: BiomeTextComponent,
  props: unknown,
): props is Partial<HeadingProps<undefined>> {
  return type === Heading;
}

export function isCaption(
  { type }: BiomeTextComponent,
  props: unknown,
): props is Partial<CaptionProps<undefined>> {
  return type === Caption;
}

export type GetMultiTextProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
  BaseProps extends {},
  FallbackNodeTag extends ElementType = 'span',
> = RC extends undefined
  ? Use extends undefined
    ? DomPropsWithDomRef<FallbackNodeTag> & BaseProps & BodyTextProps
    : BaseProps & { use: Use }
  : Use extends undefined
  ? BaseProps & BodyTextProps & { rc: RC }
  : BaseProps & { rc: RC; use: Use };
