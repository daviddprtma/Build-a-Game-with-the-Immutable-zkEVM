import { BaseTokens } from '@biom3/design-tokens';
import {
  ComponentPropsWithRef,
  ElementType,
  MouseEvent,
  ReactElement,
  ReactNode,
  Ref,
} from 'react';

import { SxComponentProps } from './sxProps';

export type BaseComponentProps<T extends HTMLElement | SVGElement> = {
  testId?: string;
  className?: string;
  rc?: ReactElement<unknown>;
  domRef?: Ref<T>;
};

// @NOTE: This type cannot be used for input elements
export type StandardComponentWithProps<
  T extends HTMLElement | SVGElement,
  Props extends {} = {},
> = BaseComponentProps<T> & SxComponentProps & Props;

export type DomPropsWithDomRef<TElement extends ElementType> = {
  [Key in keyof ComponentPropsWithRef<TElement> as Key extends 'ref'
    ? 'domRef'
    : Key]: ComponentPropsWithRef<TElement>[Key];
};

export type Overwrite<A, B> = Omit<A, keyof B> & B;

type TupleOf<T, N extends number, R extends unknown[]> = R['length'] extends N
  ? R
  : TupleOf<T, N, [T, ...R]>;

// N extends N makes sure this is distributive across unions!
export type Tuple<T, N extends number> = N extends N
  ? number extends N
    ? T[]
    : TupleOf<T, N, []>
  : never;

// Type Helpers
export type GetFontWeights<T extends keyof BaseTokens['text']> =
  keyof BaseTokens['text'][T][keyof BaseTokens['text'][T]];
export type GetTypeSizes<T extends keyof BaseTokens['text']> =
  keyof BaseTokens['text'][T];

// @TODO: Improve this! add and remove brands at better places.
export type ErrorBrand<T extends string> = {
  _error: T;
} & object;

export type RemoveErrorBrand<T> = T extends ErrorBrand<any> ? never : T;

export type MakeWriteable<T extends { [x: string]: any }, K extends string> = {
  [P in K]: T[P];
};

// @TODO: This is hardcoded for now to allow breakpoints of up to 5
export type MakeResponsive<T> =
  | [
      // This will display on any error, although the most common is exceeding the breakpoint limit.
      ...ErrorMessage: ErrorBrand<'Error! This may or may not be caused by exceeding the breakpoint limit!'>[],
      First: T | null,
      Second: T | null,
      Third: T | null,
      Fourth: T | null,
      Fifth: T | null,
      Sixth: T | null,
      Seventh: T | null,
    ]
  | T
  | Tuple<T | null, 1>
  | Tuple<T | null, 2>
  | Tuple<T | null, 3>
  | Tuple<T | null, 4>
  | Tuple<T | null, 5>
  | Tuple<T | null, 6>
  | Tuple<T | null, 7>;

export type DomReferenceRect = {
  bottom: number;
  height: number;
  left: number;
  right: number;
  top: number;
  width: number;
  x: number;
  y: number;
};

// @NOTE: Very tricky to safely type this component,
// as it can accept any number of children, of different dom element types
export type SmartCloneProps = StandardComponentWithProps<
  HTMLElement,
  {
    fallBackDomNode?: keyof JSX.IntrinsicElements;
    onClick?: (ev: MouseEvent<unknown>) => void;
    children?: ReactNode;
    // @NOTE: allow various unknown props to be spread in to cloned component
    [key: string]: unknown;
  }
>;
