import { BodySize } from '@biom3/design-tokens';
import { DistributiveOmit } from '@emotion/react';
import {
  ComponentPropsWithoutRef,
  ElementType,
  ReactElement,
  ReactNode,
} from 'react';

import { BoxProps, LogoProps, StatefulButtConProps } from '../components';
import { AllIconKeys } from '../components/Icon/Icon';
import { MenuItemSize } from '../components/MenuItem/shared';
import { DualVariantIconProps } from './icon';
import { InputTextAlign } from './input';
import {
  DomPropsWithDomRef,
  MakeResponsive,
  StandardComponentWithProps,
} from './shared';
import { DeeplyNestedSx } from './sxProps';
import { BodyTextProps } from './text';

export type BaseClickableProps = StandardComponentWithProps<
  HTMLButtonElement,
  {
    children?: ReactNode;
  }
>;

export type BaseClickableWithRCAndDomProps<
  RC extends ReactElement | undefined = undefined,
> = RC extends undefined
  ? DomPropsWithDomRef<'button'> & BaseClickableProps
  : BaseClickableProps & { rc: RC };

export const BUTTON_SIZES = ['small', 'medium', 'large'] as const;

export type ButtonSize = (typeof BUTTON_SIZES)[number];

export type ButtonProps<RC extends ReactElement | undefined = undefined> =
  BaseClickableWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ButtonSize>;
    variant?: ButtonVariant;
  };

export type ButtConProps<RC extends ReactElement | undefined = undefined> =
  BaseClickableWithRCAndDomProps<RC> & {
    size?: MakeResponsive<ButtonSize>;
    variant?: ButtonVariant;
    iconVariant?: DualVariantIconProps['variant'];
    iconSx?: DeeplyNestedSx;
  } & ({ icon: AllIconKeys } | { children: ReactNode });

export type ButtonVariant =
  | 'primary'
  | 'primary/destructive'
  | 'primary/inverse'
  | 'secondary'
  | 'secondary/destructive'
  | 'tertiary'
  | 'tertiary/inverse';

export type LinkSize = BodySize;
export type LinkVariant = 'primary' | 'secondary';

export type LinkBaseProps = StandardComponentWithProps<
  HTMLButtonElement,
  {
    variant?: LinkVariant;
    children?: ReactNode;
    use?: ReactElement;
    size?: MakeResponsive<LinkSize>;
  }
>;

export type GetClickableMultiTextProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
  BaseProps extends {},
  BaseClickProps extends {},
> = RC extends undefined
  ? Use extends undefined
    ? DomPropsWithDomRef<'button'> & BaseProps & BaseClickProps & BodyTextProps
    : BaseProps & BaseClickProps & { use: Use }
  : Use extends undefined
  ? BaseProps & { rc: RC }
  : BaseProps & { rc: RC; use: Use };

export type LinkProps<
  RC extends ReactElement | undefined,
  Use extends ReactElement | undefined,
> = GetClickableMultiTextProps<RC, Use, LinkBaseProps, BaseClickableProps>;

export type TextInputButtonProps = BaseClickableProps &
  ComponentPropsWithoutRef<'button'> & {
    disabled?: boolean;
    currentInputValue?: ComponentPropsWithoutRef<'input'>['value'];
  };

export type TextInputStatefulButtConProps<
  RC extends ReactElement | undefined = undefined,
> = DistributiveOmit<StatefulButtConProps<RC>, 'size'> &
  ComponentPropsWithoutRef<'button'> & {
    disabled?: boolean;
    currentInputValue?: ComponentPropsWithoutRef<'input'>['value'];
  };

export type ClearValueButtonProps<
  RC extends ReactElement | undefined = undefined,
> = BaseClickableWithRCAndDomProps<RC>;

type ComponentWithOnClick<Element extends 'button' | 'div'> = {
  onClick: ComponentPropsWithoutRef<Element>['onClick'];
};

export function isBaseClickable(
  onClick: unknown,
  rc: ReactElement | undefined,
  containsClickables: boolean,
  props: unknown,
): props is BaseClickableProps & ComponentWithOnClick<'button'> {
  return Boolean(rc) || (!containsClickables && Boolean(onClick));
}

export function isBox(
  onClick: unknown,
  rc: ReactElement | undefined,
  containsClickables: boolean,
  props: unknown,
): props is Partial<BoxProps> & ComponentWithOnClick<'div'> {
  return containsClickables || (!rc && !onClick);
}

export function isLogo(
  onClick: unknown,
  rc: ReactElement | undefined,
  props: unknown,
): props is Partial<LogoProps> {
  return !rc && !onClick;
}

export type GetHybridClickableRCandDomProps<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
  FallbackNodeTag extends ElementType = 'div',
> = RC extends undefined
  ? OnClick extends undefined
    ? DomPropsWithDomRef<FallbackNodeTag> & Omit<BoxProps, 'domRef'>
    : DomPropsWithDomRef<'button'> & BaseClickableProps & { onClick?: OnClick }
  : OnClick extends undefined
  ? BaseClickableProps & { rc?: RC }
  : BaseClickableProps & { rc?: RC; onClick?: OnClick };

export type MenuItemProps<
  RC extends ReactElement | undefined = undefined,
  OnClick extends Function | undefined = undefined,
> = GetHybridClickableRCandDomProps<RC, OnClick> & {
  emphasized?: boolean;
  size?: MakeResponsive<MenuItemSize>;
  selected?: boolean;
  shimmer?: boolean;
  shimmerSx?: DeeplyNestedSx;
  controlledHover?: boolean;
  textAlign?: InputTextAlign;
};

export type MenuItemContentProps<
  RC extends ReactElement | undefined,
  OnClick extends Function | undefined,
> = Omit<MenuItemProps<RC, OnClick>, 'shimmer'>;

type BaseMenuItemShimmerProps = Omit<
  StandardComponentWithProps<
    HTMLDivElement,
    {
      size?: MakeResponsive<MenuItemSize>;
      emphasized?: boolean;
    }
  >,
  'domRef'
>;

export type MenuItemShimmerProps<
  RC extends ReactElement | undefined = undefined,
> = RC extends undefined
  ? DomPropsWithDomRef<'button'> & BaseMenuItemShimmerProps
  : BaseMenuItemShimmerProps & { rc: RC };
