import { ComponentPropsWithoutRef, MouseEvent, ReactNode, Ref } from 'react';

import { TextAreaSize } from '../components/TextArea/shared';
import { TextInputSize } from '../components/TextInput/shared';
import { MakeResponsive, StandardComponentWithProps } from './shared';

export type InputValidationStatus = 'error' | 'success' | 'warning';

export type StandardInputComponentWithProps<
  InputType extends 'input' | 'textarea' = 'input',
  ExtraProps extends {} = {},
> = StandardComponentWithProps<
  HTMLDivElement,
  ComponentPropsWithoutRef<InputType> & ExtraProps
>;

export type InputTextAlign = 'left' | 'right';

export type TextInputProps = StandardInputComponentWithProps<
  'input',
  {
    children?: ReactNode;
    validationStatus?: InputValidationStatus;
    hideClearValueButton?: boolean;
    defaultValue?: string;
    onClearValue?: () => void;
    sizeVariant?: MakeResponsive<TextInputSize>;
    textAlign?: InputTextAlign;
    inputRef?: Ref<HTMLInputElement>;
  }
>;

export type TextAreaProps = Omit<
  StandardInputComponentWithProps<
    'textarea',
    {
      validationStatus?: InputValidationStatus;
      defaultValue?: string;
      hideClearValueButton?: boolean;
      onClearValue?: () => void;
      sizeVariant?: MakeResponsive<TextAreaSize>;
      textAlign?: InputTextAlign;
      textAreaRef?: Ref<HTMLTextAreaElement>;
    }
  >,
  'onClick'
> & {
  // @NOTE: clicks need to be for the container div in this control, because the
  // input is not 100% the size of the container, like with the TextInput component
  onClick?: (ev: MouseEvent<HTMLDivElement>) => void;
};
