import { Breakpoints, Colors } from '@biom3/design-tokens';
import { ComponentType, ReactNode, Ref, RefObject } from 'react';

import { ConfirmationDialogContentProps } from '../components/ConfirmationDialog/ConfirmationDialogContent';
import { LoadingOverlayContentProps } from '../components/LoadingOverlay/LoadingOverlayContent';
import { ModalContentProps } from '../components/Modal/ModalContent';
import { DeeplyNestedSx } from './sxProps';

export type ModalPosition = {
  y: 'top' | 'center' | 'bottom';
  x: 'left' | 'center' | 'right';
};

export type ModalItem = {
  id: string;
  content: ReactNode;
  showBgOverlay: boolean;
  bgOverlaySx: DeeplyNestedSx;
  fullScreenUntilBreakpoint?: keyof Breakpoints;
  isControlled?: boolean;
  onCloseModal?: () => void;
  outsideClicksClose?: boolean;
  position: ModalPosition;
  testId: string;
};

export type OverlayStore = {
  modalList: ModalItem[];
  drawerList: DrawerItem[];
  popoverList: PopoverItem[];
  toastList: ToastItem[];
};

export type ModalComponentProps = {
  children: ReactNode;
  visible?: boolean;
  id?: string;
  domRef?: Ref<HTMLButtonElement>;
  onCloseModal?: () => void;
  showBgOverlay?: boolean;
  outsideClicksClose?: boolean;
  bgOverlaySx?: DeeplyNestedSx;
  fullScreenUntilBreakpoint?: keyof Breakpoints;
  position?: ModalPosition;
  testId?: string;
  ContentSubcomponent?:
    | ComponentType<ModalContentProps<undefined>>
    | ComponentType<ConfirmationDialogContentProps<undefined>>
    | ComponentType<LoadingOverlayContentProps<undefined>>;
};

export const DRAWER_POSITIONS = ['bottom', 'right', 'left'] as const;
export const DRAWER_SIZES = [
  'quarter',
  'half',
  'threeQuarter',
  'full',
] as const;
export const DEFAULT_DRAWER_SIZE = DRAWER_SIZES[2];
export const DEFAULT_DRAWER_POSITION = DRAWER_POSITIONS[0];
export type DrawerSize = (typeof DRAWER_SIZES)[number];
export type DrawerPosition = (typeof DRAWER_POSITIONS)[number];

// @NOTE: to avoid a situation where there is no header
// (which provides the ability to close a Drawer),
// and clicks outside wont close close the Drawer
// We enforce certain prop combinations:
// if showHeaderBar == true, then titleText must be supplied
// if showHeaderBar == false, then titleText must not be supplied
// if showHeaderBar is not supplied, then titleText must be supplied
export type WithDrawerDisriminatedProps<Props = {}> = Props &
  (
    | {
        showHeaderBar: true;
        headerBarTitle: ReactNode;
      }
    | {
        showHeaderBar: false;
        headerBarTitle?: never;
      }
    | {
        showHeaderBar?: undefined;
        headerBarTitle: ReactNode;
      }
  );

export type DrawerItem = WithDrawerDisriminatedProps<{
  id: string;
  content: ReactNode;
  size: DrawerSize;
  isControlled?: boolean;
  onCloseDrawer?: () => void;
  showBgOverlay: boolean;
  outsideClicksClose?: boolean;
  drawerPosition: DrawerPosition;
  testId: string;
}>;

export type DrawerComponentProps = WithDrawerDisriminatedProps<{
  visible?: boolean;
  id?: string;
  // @TODO: does this need to use MakeResponsive<X>?
  size?: DrawerSize;
  domRef?: Ref<HTMLButtonElement>;
  onCloseDrawer?: () => void;
  showBgOverlay?: boolean;
  outsideClicksClose?: boolean;
  children: ReactNode;
  drawerPosition?: DrawerPosition;
  testId?: string;
}>;

export type PopoverPosition = {
  y: 'above' | 'below';
  x: 'left' | 'center' | 'right';
};

export type PopoverItem = {
  id: string;
  content: ReactNode;
  targetRef: RefObject<HTMLElement>;
  position: PopoverPosition;
  verticalGap?: number;
  isControlled?: boolean;
  onOutsideClick?: () => void;
};

export type PopoverComponentProps = {
  visible?: boolean;
  id?: string;
  children?: ReactNode;
  position?: PopoverPosition;
  domRef?: Ref<HTMLButtonElement>;
  onOutsideClick?: () => void;
  verticalGap?: number;
};

export type ToastPosition = {
  y: 'top' | 'bottom';
  x: 'left' | 'center' | 'right';
};

export type ToastVariant = keyof Colors['status'];

export type ToastItem = {
  id: string;
  content: ReactNode;
  position: ToastPosition;
  variant: ToastVariant;
  buttonsPosition: 'right' | 'bottomRight';
  hideDismissButton: boolean;
  autoDismissDuration?: number;
  onCloseToast: () => void;
  testId?: string;
  sx?: DeeplyNestedSx;
};

export type ToastComponentProps = {
  visible: boolean;
  domRef?: Ref<HTMLDivElement>;
  children: ReactNode;
} & Partial<Omit<ToastItem, 'content'>>;
