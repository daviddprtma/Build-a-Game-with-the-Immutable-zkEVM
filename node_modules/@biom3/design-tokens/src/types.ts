export type BaseTokensLeaf =
  | string
  | number
  | number[]
  | undefined
  | {
      [key in any]: BaseTokensLeaf;
    };

// Base Types
export type Colors = {
  brand: {
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
  };
  neutral: {
    1000: string;
    900: string;
    800: string;
    700: string;
    600: string;
    500: string;
  };
  accent: {
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: string;
    8: string;
  };
  translucent: {
    emphasis: {
      500: string;
      400: string;
      300: string;
      200: string;
      100: string;
    };
    standard: {
      1000: string;
      900: string;
      800: string;
      700: string;
      600: string;
      500: string;
      400: string;
      300: string;
      200: string;
      150: string;
      100: string;
      50: string;
    };
    inverse: {
      1000: string;
      900: string;
      800: string;
      700: string;
      600: string;
      500: string;
      400: string;
      300: string;
      200: string;
      100: string;
    };
  };
  status: {
    guidance: {
      bright: string;
      dim: string;
    };
    success: {
      bright: string;
      dim: string;
    };
    attention: {
      bright: string;
      dim: string;
    };
    fatal: {
      bright: string;
      dim: string;
    };
    destructive: {
      bright: string;
      dim: string;
    };
  };
  text: {
    primary: string;
    secondary: string;
    link: {
      primary: string;
      secondary: string;
    };
    inverse: {
      primary: string;
      secondary: string;
    };
  };
  fixed: {
    black: {
      1000: string;
      100: string;
    };
    white: {
      1000: string;
      100: string;
    };
  };
};

export type ZLevels = {
  tooltip: number;
  modal: number;
  popover: number;
  drawer: number;
  toast: number;
};

export type Shadows = {
  100: string;
  200: string;
  300: string;
  400: string;
  500: string;
};

export type Gradient = {
  spectrum: string;
  blendMode: string;
  svgDefs: string;
  svgDefIds: string;
};

export type Gradients = {
  1: Gradient;
  2: Gradient;
  3: Gradient;
};

export type Borders = {
  size: {
    600: string;
    500: string;
    400: string;
    300: string;
    200: string;
    100: string;
  };
};

export type Icons = {
  size: {
    600: string;
    500: string;
    400: string;
    300: string;
    250: string;
    200: string;
    100: string;
  };
};

export type Font = {
  family: {
    heading: {
      primary: string;
      secondary: string;
    };
    body: {
      secondary: string;
      primary: string;
    };
  };
  decoration: {
    underline: string;
    lineThrough: string;
    none: string;
  };
  casing: {
    uppercase: string;
    none: string;
  };
};

export type Text = {
  body: {
    large: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    medium: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    small: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    xSmall: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    xxSmall: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
  };
  caption: {
    medium: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
        casing: string;
        letterSpacing: string;
      };
      bold: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
        casing: string;
        letterSpacing: string;
      };
    };
    small: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
        casing: string;
        letterSpacing: string;
      };
      bold: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
        casing: string;
        letterSpacing: string;
      };
    };
  };
  heading: {
    xxLarge: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    xLarge: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    large: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    medium: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    small: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
    xSmall: {
      regular: {
        fontSize: string;
        lineHeight: string;
        fontWeight: number;
      };
      light: {
        fontWeight: number;
      };
      bold: {
        fontWeight: number;
      };
    };
  };
};

export type Spacing = { [key in `x${IntRange<1, 51>}`]: `${string}px` };
export type BorderRadius = { [key in `x${IntRange<1, 26>}`]: `${string}px` };

export type Breakpoints = {
  small: number;
  medium: number;
  large: number;
  xLarge: number;
  xxLarge: number;
  xxxLarge: number;
};

export type Animation = {
  normal: {
    gentle: {
      cssDuration: string;
      cssEase: string;
      jsEase: string | number[];
      jsDuration: number;
    };
    fast: {
      cssDuration: string;
      cssEase: string;
      jsEase: string | number[];
      jsDuration: number;
    };
  };
  bounce: {
    gentle: {
      cssDuration: string;
      cssEase: string;
      jsEase: string | number[];
      jsDuration: number;
    };
    fast: {
      cssDuration: string;
      cssEase: string;
      jsEase: string | number[];
      jsDuration: number;
    };
  };
};

export type ColorModes = 'lightOnDark' | 'darkOnLight';

export type BaseTokens = {
  colorMode: ColorModes;
  color: Colors;
  shadow: Shadows;
  gradient: Gradients;
  font: Font;
  text: Text;
  spacing: Spacing;
  borderRadius: BorderRadius;
  breakpoint: Breakpoints;
  border: Borders;
  icon: Icons;
  zLevel: ZLevels;
  motion: Animation;
};

type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc['length'] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc['length']]>;

// Use this sparingly. Type-level math is expensive.
export type IntRange<F extends number, T extends number> = Exclude<
  Enumerate<T>,
  Enumerate<F>
>;

export type DesignTokens = {
  base: BaseTokens;
};

// Loose Autocomplete
// We can add more helper types to filter for specific types (measurement paths, color paths, etc) later.

// Helper types for generating design token paths
type Primitive = string | number | symbol;

type GenericObject = Record<Primitive, unknown>;

type Join<
  L extends Primitive | undefined,
  R extends Primitive | undefined,
> = L extends string | number
  ? R extends string | number
    ? `${L}.${R}`
    : L
  : R extends string | number
  ? R
  : undefined;

type Union<
  L extends unknown | undefined,
  R extends unknown | undefined,
> = L extends undefined
  ? R extends undefined
    ? undefined
    : R
  : R extends undefined
  ? L
  : L | R;

//  GenerateDesignTokensPaths
//  Get all the paths to the leaves of an object representing our design tokens. For all gradient paths, we shortcircuit on the number of the gradient, and not the internals. This is because we don't want to expose the internals of the gradient to the user.
//  @example
//  type Paths = GenerateDesignTokenPaths<{ a: { b: { c: string } }>
//  // 'a.b.c'
//  @example
//  type Paths = GenerateDesignTokenPaths<{ base: { color: { c: string }, gradient: {1: { spectrum: "lineargradient(something)"}, 2: {spectrum: "lineargradient(something)"}} }>
//  // 'base.color.c' | 'base.gradient.1' | 'base.gradient.2'
export type GenerateDesignTokensPaths<
  T extends GenericObject,
  Prev extends Primitive | undefined = undefined,
  Path extends Primitive | undefined = undefined,
> = {
  [K in keyof T]: T[K] extends GenericObject
    ? IsGradientTokenPath<K> extends true
      ? ShortcircuitGradients<T[K], Join<Path, K>>
      : GenerateDesignTokensPaths<T[K], Union<Prev, Path>, Join<Path, K>>
    : Join<Path, K>;
}[keyof T];

export type IsGradientTokenPath<TKeyName> = TKeyName extends 'gradient'
  ? true
  : false;

export type ShortcircuitGradients<
  T extends GenericObject,
  Path extends Primitive | undefined = undefined,
> = {
  [K in keyof T]: Join<Path, K>;
}[keyof T];

// Using '& {}' with any type stops that type from expanding to fill the union. In this case, we want to allow the user to autocomplete on any string union passed in, but also fallback to any string. Without (string & {}), autocomplete would not work as the 'string' primitive type would expand and override the union.
export type LooseAutocomplete<T> = T | (string & {});

export type ColorTokenPaths = GenerateDesignTokensPaths<{
  base: { color: Colors };
}>;
export type GradientTokenPaths = GenerateDesignTokensPaths<{
  base: { gradient: Gradients };
}>;
export type ShadowTokenPaths = GenerateDesignTokensPaths<{
  base: { shadow: Shadows };
}>;
export type FontTokenPaths = GenerateDesignTokensPaths<{
  base: { font: Font };
}>;
export type TextTokenPaths = GenerateDesignTokensPaths<{
  base: { text: Text };
}>;
export type SpacingTokenPaths = GenerateDesignTokensPaths<{
  base: { spacing: Spacing };
}>;
export type BorderRadiusTokenPaths = GenerateDesignTokensPaths<{
  base: { borderRadius: BorderRadius };
}>;
export type BorderTokenPaths = GenerateDesignTokensPaths<{
  base: { border: Borders };
}>;
export type IconTokenPaths = GenerateDesignTokensPaths<{
  base: { icon: Icons };
}>;
export type MotionTokenPaths = GenerateDesignTokensPaths<{
  base: { motion: Animation };
}>;

export type ProcessedBaseTokens = BaseTokens & {
  breakpointAsArray: number[];
};

export type BodySize = keyof BaseTokens['text']['body'];
export type BodyWeight = keyof BaseTokens['text']['body']['small'];

export type HeadingSize = keyof BaseTokens['text']['heading'];
export type HeadingWeight = keyof BaseTokens['text']['heading']['medium'];

export type CaptionSize = keyof BaseTokens['text']['caption'];
export type CaptionWeight = keyof BaseTokens['text']['caption']['small'];
