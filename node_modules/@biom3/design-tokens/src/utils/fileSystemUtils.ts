/* eslint-disable no-restricted-syntax */
/* eslint-disable no-await-in-loop */
import fs from 'fs/promises';
// eslint-disable-next-line import/no-extraneous-dependencies
import prependFile from 'prepend-file';

import { BaseTokensLeaf } from '../types';
import { leafIsObject } from './leafUtils';

export async function recursivelyOutputTokens<T extends BaseTokensLeaf>(
  leaf: T,
  leafParents: string,
  cssFileName: string,
) {
  if (leafIsObject(leaf)) {
    let leafKey: keyof typeof leaf;
    for (leafKey in leaf) {
      if (Object.hasOwn(leaf, leafKey)) {
        const child = leaf[leafKey];
        const selectors = `${leafParents}-${String(leafKey)}`;
        if (typeof child === 'object') {
          await recursivelyOutputTokens({ ...child }, selectors, cssFileName);
        } else if (typeof child === 'string' || typeof child === 'number') {
          await fs.appendFile(cssFileName, `\n  --${selectors}: ${child};`);
        }
      }
    }
  }
}

export async function wrapCssFileWithBodySelector(fileName: string) {
  await prependFile(fileName, `body {`);
  await fs.appendFile(fileName, '\n}');
}
