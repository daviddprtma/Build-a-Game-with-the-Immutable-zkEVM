type BaseTokensLeaf = string | number | number[] | undefined | {
    [key in any]: BaseTokensLeaf;
};
type Colors = {
    brand: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
    };
    neutral: {
        1000: string;
        900: string;
        800: string;
        700: string;
        600: string;
        500: string;
    };
    accent: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
    };
    translucent: {
        emphasis: {
            500: string;
            400: string;
            300: string;
            200: string;
            100: string;
        };
        standard: {
            1000: string;
            900: string;
            800: string;
            700: string;
            600: string;
            500: string;
            400: string;
            300: string;
            200: string;
            150: string;
            100: string;
            50: string;
        };
        inverse: {
            1000: string;
            900: string;
            800: string;
            700: string;
            600: string;
            500: string;
            400: string;
            300: string;
            200: string;
            100: string;
        };
    };
    status: {
        guidance: {
            bright: string;
            dim: string;
        };
        success: {
            bright: string;
            dim: string;
        };
        attention: {
            bright: string;
            dim: string;
        };
        fatal: {
            bright: string;
            dim: string;
        };
        destructive: {
            bright: string;
            dim: string;
        };
    };
    text: {
        primary: string;
        secondary: string;
        link: {
            primary: string;
            secondary: string;
        };
        inverse: {
            primary: string;
            secondary: string;
        };
    };
    fixed: {
        black: {
            1000: string;
            100: string;
        };
        white: {
            1000: string;
            100: string;
        };
    };
};
type ZLevels = {
    tooltip: number;
    modal: number;
    popover: number;
    drawer: number;
    toast: number;
};
type Shadows = {
    100: string;
    200: string;
    300: string;
    400: string;
    500: string;
};
type Gradient = {
    spectrum: string;
    blendMode: string;
    svgDefs: string;
    svgDefIds: string;
};
type Gradients = {
    1: Gradient;
    2: Gradient;
    3: Gradient;
};
type Borders = {
    size: {
        600: string;
        500: string;
        400: string;
        300: string;
        200: string;
        100: string;
    };
};
type Icons = {
    size: {
        600: string;
        500: string;
        400: string;
        300: string;
        250: string;
        200: string;
        100: string;
    };
};
type Font = {
    family: {
        heading: {
            primary: string;
            secondary: string;
        };
        body: {
            secondary: string;
            primary: string;
        };
    };
    decoration: {
        underline: string;
        lineThrough: string;
        none: string;
    };
    casing: {
        uppercase: string;
        none: string;
    };
};
type Text = {
    body: {
        large: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        medium: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        small: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        xSmall: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        xxSmall: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
    };
    caption: {
        medium: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
                casing: string;
                letterSpacing: string;
            };
            bold: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
                casing: string;
                letterSpacing: string;
            };
        };
        small: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
                casing: string;
                letterSpacing: string;
            };
            bold: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
                casing: string;
                letterSpacing: string;
            };
        };
    };
    heading: {
        xxLarge: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        xLarge: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        large: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        medium: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        small: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
        xSmall: {
            regular: {
                fontSize: string;
                lineHeight: string;
                fontWeight: number;
            };
            light: {
                fontWeight: number;
            };
            bold: {
                fontWeight: number;
            };
        };
    };
};
type Spacing = {
    [key in `x${IntRange<1, 51>}`]: `${string}px`;
};
type BorderRadius = {
    [key in `x${IntRange<1, 26>}`]: `${string}px`;
};
type Breakpoints = {
    small: number;
    medium: number;
    large: number;
    xLarge: number;
    xxLarge: number;
    xxxLarge: number;
};
type Animation = {
    normal: {
        gentle: {
            cssDuration: string;
            cssEase: string;
            jsEase: string | number[];
            jsDuration: number;
        };
        fast: {
            cssDuration: string;
            cssEase: string;
            jsEase: string | number[];
            jsDuration: number;
        };
    };
    bounce: {
        gentle: {
            cssDuration: string;
            cssEase: string;
            jsEase: string | number[];
            jsDuration: number;
        };
        fast: {
            cssDuration: string;
            cssEase: string;
            jsEase: string | number[];
            jsDuration: number;
        };
    };
};
type ColorModes = 'lightOnDark' | 'darkOnLight';
type BaseTokens = {
    colorMode: ColorModes;
    color: Colors;
    shadow: Shadows;
    gradient: Gradients;
    font: Font;
    text: Text;
    spacing: Spacing;
    borderRadius: BorderRadius;
    breakpoint: Breakpoints;
    border: Borders;
    icon: Icons;
    zLevel: ZLevels;
    motion: Animation;
};
type Enumerate<N extends number, Acc extends number[] = []> = Acc['length'] extends N ? Acc[number] : Enumerate<N, [...Acc, Acc['length']]>;
type IntRange<F extends number, T extends number> = Exclude<Enumerate<T>, Enumerate<F>>;
type DesignTokens = {
    base: BaseTokens;
};
type Primitive = string | number | symbol;
type GenericObject = Record<Primitive, unknown>;
type Join<L extends Primitive | undefined, R extends Primitive | undefined> = L extends string | number ? R extends string | number ? `${L}.${R}` : L : R extends string | number ? R : undefined;
type Union<L extends unknown | undefined, R extends unknown | undefined> = L extends undefined ? R extends undefined ? undefined : R : R extends undefined ? L : L | R;
type GenerateDesignTokensPaths<T extends GenericObject, Prev extends Primitive | undefined = undefined, Path extends Primitive | undefined = undefined> = {
    [K in keyof T]: T[K] extends GenericObject ? IsGradientTokenPath<K> extends true ? ShortcircuitGradients<T[K], Join<Path, K>> : GenerateDesignTokensPaths<T[K], Union<Prev, Path>, Join<Path, K>> : Join<Path, K>;
}[keyof T];
type IsGradientTokenPath<TKeyName> = TKeyName extends 'gradient' ? true : false;
type ShortcircuitGradients<T extends GenericObject, Path extends Primitive | undefined = undefined> = {
    [K in keyof T]: Join<Path, K>;
}[keyof T];
type LooseAutocomplete<T> = T | (string & {});
type ColorTokenPaths = GenerateDesignTokensPaths<{
    base: {
        color: Colors;
    };
}>;
type GradientTokenPaths = GenerateDesignTokensPaths<{
    base: {
        gradient: Gradients;
    };
}>;
type ShadowTokenPaths = GenerateDesignTokensPaths<{
    base: {
        shadow: Shadows;
    };
}>;
type FontTokenPaths = GenerateDesignTokensPaths<{
    base: {
        font: Font;
    };
}>;
type TextTokenPaths = GenerateDesignTokensPaths<{
    base: {
        text: Text;
    };
}>;
type SpacingTokenPaths = GenerateDesignTokensPaths<{
    base: {
        spacing: Spacing;
    };
}>;
type BorderRadiusTokenPaths = GenerateDesignTokensPaths<{
    base: {
        borderRadius: BorderRadius;
    };
}>;
type BorderTokenPaths = GenerateDesignTokensPaths<{
    base: {
        border: Borders;
    };
}>;
type IconTokenPaths = GenerateDesignTokensPaths<{
    base: {
        icon: Icons;
    };
}>;
type MotionTokenPaths = GenerateDesignTokensPaths<{
    base: {
        motion: Animation;
    };
}>;
type ProcessedBaseTokens = BaseTokens & {
    breakpointAsArray: number[];
};
type BodySize = keyof BaseTokens['text']['body'];
type BodyWeight = keyof BaseTokens['text']['body']['small'];
type HeadingSize = keyof BaseTokens['text']['heading'];
type HeadingWeight = keyof BaseTokens['text']['heading']['medium'];
type CaptionSize = keyof BaseTokens['text']['caption'];
type CaptionWeight = keyof BaseTokens['text']['caption']['small'];

declare const fontFaceStylesImport = "@import url(\"https://biome.immutable.com/hosted-assets/css/im-fonts-v4.css\");";
declare const base: BaseTokens;
declare const onDarkBase: BaseTokens;

declare function leafIsObject(leaf: unknown): leaf is Record<string, unknown>;

declare const pickTokenValue: <T extends unknown>(themeProps: DesignTokens, selector: string) => T;
declare function smartPickTokenValue<T extends unknown>(themeProps: DesignTokens, selector: string): T;

declare const designTokens: {
    base: BaseTokens;
};

export { Animation, BaseTokens, BaseTokensLeaf, BodySize, BodyWeight, BorderRadius, BorderRadiusTokenPaths, BorderTokenPaths, Borders, Breakpoints, CaptionSize, CaptionWeight, ColorModes, ColorTokenPaths, Colors, DesignTokens, Font, FontTokenPaths, GenerateDesignTokensPaths, Gradient, GradientTokenPaths, Gradients, HeadingSize, HeadingWeight, IconTokenPaths, Icons, IntRange, IsGradientTokenPath, LooseAutocomplete, MotionTokenPaths, ProcessedBaseTokens, ShadowTokenPaths, Shadows, ShortcircuitGradients, Spacing, SpacingTokenPaths, Text, TextTokenPaths, ZLevels, base, designTokens, fontFaceStylesImport, leafIsObject, onDarkBase, base as onLightBase, pickTokenValue, smartPickTokenValue };
